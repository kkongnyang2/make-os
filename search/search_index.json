{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"\ud83d\udcda \ubaa9\ucc28","text":"<ul> <li>1. vm</li> <li>2. xv6-riscv</li> <li>3. go</li> </ul>"},{"location":"go/","title":"go","text":"<p>qemu\ub294 \uc804\uc6a9 \uac00\uc0c1 \uc8fc\uc18c\uac00 \uc874\uc7ac. \ud558\uc9c0\ub9cc \ub0b4\uac00 \ub9cc\ub4e4 os\ub294 qemu \uc804\uc6a9\uc774 \uc544\ub2c8\ub77c \ubc94\uc6a9\uc73c\ub85c \uc0ac\uc6a9\ud558\uae38 \uc6d0\ud558\uae30\uc5d0 DTB\ub97c \uc77d\uc5b4\uc11c \ub3d9\uc801\uc73c\ub85c \uc5bb\uc740 \uc8fc\uc18c \uc0ac\uc6a9. \uc544\ud0a4\ud14d\ucc98\ub9cc \ub3d9\uc77c\ud558\uba74 \uc5b4\ub290 \uba38\uc2e0\uc5d0\uc11c\ub3c4 \ub3cc\uc544\uac08 \uc218 \uc788\uc74c.</p> <p>[QEMU]  \u2502  \u2514\u2500\u2500\u2500&gt; \uac00\uc0c1 \ud558\ub4dc\uc6e8\uc5b4 \uc0dd\uc131 + dtb \uc0dd\uc131          \u2502 [\ubd80\ud2b8\ub85c\ub354]  \u2502   \u2514\u2500\u2500&gt; dtb \uc804\ub2ec [\ucee4\ub110 (Ubuntu)]  \u2514\u2500\u2500&gt; dtb \ud30c\uc2f1 \u2192 \ub514\ubc14\uc774\uc2a4 \uc8fc\uc18c, IRQ \ub4f1 \uc124\uc815 [\ub4dc\ub77c\uc774\ubc84]  \u2514\u2500\u2500&gt; \uc2e4\uc81c \uc7a5\uce58 \uc81c\uc5b4</p> <p>. \u251c\u2500\u2500 start.S             \u2192 x0\ub85c dtb \uc8fc\uc18c \ubc1b\uae30 \u251c\u2500\u2500 main.c              \u2192 uart \ucd08\uae30\ud654 \ud638\ucd9c \u251c\u2500\u2500 uart.c              \u2192 \uc2e4\uc81c MMIO \uc8fc\uc18c\ub85c \ucd08\uae30\ud654 \u251c\u2500\u2500 dtb.c               \u2192 \uac04\ub2e8\ud55c dtb \ud30c\uc11c (serial@ \ucc3e\uae30) \u2514\u2500\u2500 link.ld             \u2192 \ub85c\ub4dc \uc8fc\uc18c\ub294 0x40080000 (QEMU \uae30\ubcf8)</p> <ol> <li>start.S x0 \ub808\uc9c0\uc2a4\ud130\ub85c \ub118\uc5b4\uc628 </li> </ol> <p>\u2705 \ucd5c\uc885 \uc815\ub9ac</p> <p>\u2714\ufe0f \ubaa9\ud45c: Bare-metal\uc5d0\uc11c \ud558\ub4dc\uc6e8\uc5b4 \uc81c\uc5b4 \u2714\ufe0f \ud14c\uc2a4\ud2b8 \ud658\uacbd: QEMU ARM64 Virt Machine (LED \ub300\uc2e0 UART \ucd9c\ub825) \u2714\ufe0f \ubc29\ubc95: Bare-metal \u2192 UART \u2192 Timer \u2192 MMU \u2192 Shell \u2714\ufe0f \uae30\uc874 \uc608\uc81c \ucf54\ub4dc \ucc38\uace0\ud574\uc11c \ubcf5\ubd99, \uc8fc\uc11d \ucd94\uac00\ub85c \uad6c\uc870 \uc774\ud574 \u2714\ufe0f \uacb0\uad6d Buildroot \uc218\uc900\uae4c\uc9c0 \ubaa9\ud45c \u2192 rootfs \ub9cc\ub4e4\uc5b4 BusyBox, \ub124\ud2b8\uc6cc\ud06c \ucd94\uac00</p>"},{"location":"go/#_1","title":"&gt; \uc124\uce58","text":"<pre><code>~$ sudo apt install qemu-system-aarch64         #qemu arm64 \uc124\uce58\n~$ qemu-system-aarch64 --version                #\uc124\uce58 \ud655\uc778\nQEMU emulator version 6.2.0 (Debian 1:6.2+dfsg-2ubuntu6.26)\n\n~$ sudo apt install gcc-aarch64-linux-gnu       #\ud06c\ub85c\uc2a4\ucef4\ud30c\uc77c\ub7ec \uc124\uce58   \n~$ aarch64-linux-gnu-gcc --version              #\uc124\uce58 \ud655\uc778\naarch64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\n</code></pre>"},{"location":"go/#_2","title":"&gt; \ub9cc\ub4e4 \uad6c\uc870","text":"<p>baremetal/ \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 link.ld \u251c\u2500\u2500 start.S               # \ubd80\ud2b8 \ucf54\ub4dc(\ucd08\uae30\ud654) \u251c\u2500\u2500 include/              # \ud5e4\ub354\ud30c\uc77c \u2502   \u251c\u2500\u2500 uart.h            # UART \ud5e4\ub354 \u2502   \u251c\u2500\u2500 timer.h           # Timer \ud5e4\ub354 \u2502   \u2514\u2500\u2500 mmu.h             # MMU \ud5e4\ub354 \u251c\u2500\u2500 drivers/              # \ud558\ub4dc\uc6e8\uc5b4 \ub4dc\ub77c\uc774\ubc84 \ubaa8\uc74c \u2502   \u251c\u2500\u2500 uart.c \u2502   \u251c\u2500\u2500 timer.c \u2502   \u2514\u2500\u2500 mmu.c \u251c\u2500\u2500 kernel/               # \ucee4\ub110 \ub85c\uc9c1 \u2502   \u251c\u2500\u2500 main.c            # \uc9c4\uc785\uc810, \ucd08\uae30\ud654 \uc21c\uc11c \u2502   \u251c\u2500\u2500 shell.c          # Shell \u2502   \u2514\u2500\u2500 scheduler.c     # (\ub098\uc911\uc5d0 \ucd94\uac00) \u2514\u2500\u2500 build/                # \ube4c\ub4dc \uc0b0\ucd9c\ubb3c     \u251c\u2500\u2500 kernel.elf     \u2514\u2500\u2500 kernel.img</p>"},{"location":"go/#_3","title":"&gt; \ubaa8\ub4c8 \uc124\uba85","text":"<p>UART : \uc9c1\uc811 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uac12 \uc4f0\uae30 \u2192 \ucd9c\ub825 Timer : \uc778\ud130\ub7fd\ud2b8 \u2192 tick \ubc1c\uc0dd MMU : \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \u2192 \uc8fc\uc18c \ubcc0\ud658 Shell : UART I/O\ub85c \uae30\ubcf8 \uba85\ub839\uc5b4 \uc778\ud130\ud504\ub9ac\ud130</p>"},{"location":"go/#_4","title":"&gt; \uc8fc\uc18c","text":"<p>qemu virt machine \uae30\uc900</p> <p>0x09000000: UART0 (\uc9c1\ub82c \ud1b5\uc2e0 \uc7a5\uce58. \ucef4\ud4e8\ud130\uc640 \ud130\ubbf8\ub110 \uac04 \ud14d\uc2a4\ud2b8 \uc8fc\uace0\ubc1b\uc744 \ub54c \uc0ac\uc6a9) 0x08000000: GIC (\uc778\ud130\ub7fd\ud2b8 \uad00\ub9ac \ucee8\ud2b8\ub864\ub7ec. timer, uart, virtio \ub4f1 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub819\ud2b8\ub97c gic\uac00 \ubc1b\uc544\uc11c cpu\uc5d0 \uc804\ub2ec) 0x0A000000: Virtio (\uac00\uc0c1\ud654 \ub514\ubc14\uc774\uc2a4 \uc778\ud130\ud398\uc774\uc2a4. \ub124\ud2b8\uc6cc\ud06c, \ube14\ub85d \ub514\ubc14\uc774\uc2a4 \ub4f1) 0x40000000: DRAM \uc2dc\uc791 \uc8fc\uc18c. \uc5ec\uae30\ubd80\ud130 \uba54\ubaa8\ub9ac \uadf8 \uc0ac\uc774: bootloader, MMU, DTB \ub85c\ub4dc 0x40080000: OS/\ucee4\ub110 \uc774\ubbf8\uc9c0 \ub85c\ub529 \uc8fc\uc18c. \ucf54\ub4dc(.text) \uadf8 \ub4a4\ub85c \ub370\uc774\ud130,</p> <p>[ \ud504\ub85c\uadf8\ub7a8\uc758 \uba54\ubaa8\ub9ac \uacf5\uac04 ] \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \ubca1\ud130 \ud14c\uc774\ube14     \u2502  \u2190 \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac \ud568\uc218 \ud3ec\uc778\ud130\ub4e4 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \ucf54\ub4dc (.text)   \u2502  \u2190 \uc2e4\ud589 \uba85\ub839\uc5b4(\ud38c\uc6e8\uc5b4, \ucee4\ub110, \uc571) \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \uc0c1\uc218 (.rodata) \u2502  \u2190 \uc0c1\uc218 \ubb38\uc790\uc5f4, \ud14c\uc774\ube14 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \ub370\uc774\ud130 (.data) \u2502  \u2190 \uc804\uc5ed \ubcc0\uc218 (\ucd08\uae30\uac12 \uc788\uc74c) \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 BSS (.bss)    \u2502  \u2190 \uc804\uc5ed \ubcc0\uc218 (\ucd08\uae30\uac12 0) \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \ud799 (heap)     \u2502  \u2190 malloc, new \ub4f1 \ub3d9\uc801\ud560\ub2f9 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \uc2a4\ud0dd (stack)   \u2502  \u2190 \ud568\uc218 \ud638\ucd9c, \uc9c0\uc5ed \ubcc0\uc218 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <pre><code>~$ cat &gt; link.ld                      #link.ld \uc0dd\uc131\nSECTIONS\n{\n    . = 0x40080000; /* QEMU virt machine\uc5d0\uc11c \uae30\ubcf8 \ub85c\ub4dc\uc8fc\uc18c */\n    .text : { *(.text*) }\n    .rodata : { *(.rodata*) }\n    .data : { *(.data*) }\n    .bss : { *(.bss*) }\n}\nCtrl+D\n</code></pre>"},{"location":"go/#arm64","title":"&gt; arm64 \ud2b9\uc131","text":"<ol> <li>\ubc14\uc774\ud2b8 \uc21c\uc11c: little endian\uc0ac\uc6a9. 0x12345678\uc740 \uba54\ubaa8\ub9ac\uc5d0 78 56 34 12 \uc21c\uc11c\ub85c \uc800\uc7a5.</li> <li>\uba54\ubaa8\ub9ac \uc815\ub82c: 4\ubc14\uc774\ud2b8 \ub2e8\uc704\uc758 word alignment\uac00 \uae30\ubcf8. 0x40080001\uac19\uc740\uac74 \uc815\ub82c\ub418\uc9c0 \uc54a\uc740 \uc8fc\uc18c.</li> <li>\ub808\uc9c0\uc2a4\ud130: x0 ~ x30\uc740 \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130, sp\ub294 \uc2a4\ud0dd \ud3ec\uc778\ud130, pc\ub294 \ud504\ub85c\uadf8\ub7a8 \uce74\uc6b4\ud130, VBAR_EL1\uc740 \uc778\ud130\ub7fd\ud2b8 \ubca1\ud130 \ubca0\uc774\uc2a4, TTBR_EL1\uc740 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \ubca0\uc774\uc2a4, SCTLR_EL1\uc740 \uc2dc\uc2a4\ud15c \uc81c\uc5b4 \ub808\uc9c0\uc2a4\ud130(MMU,\uce90\uc2dc \ucf1c\uae30)</li> <li>\ud568\uc218 \ud638\ucd9c \uaddc\uc57d: \ub9ac\ud134\uac12\uc740 x0, \ud30c\ub77c\uba54\ud130 x0~x7. \uc2a4\ud0dd\uc740 16\ubc14\uc774\ud2b8 \uc815\ub82c(align 16)</li> </ol>"},{"location":"go/#qemu","title":"&gt; qemu \ud14c\uc2a4\ud2b8","text":"<p>[ hello.S ] --(\uc5b4\uc148\ube14\ub7ec)--&gt; [ hello.o ] --(\ub9c1\ucee4)--&gt; [ kernel.elf ] --(objcopy)--&gt; [ kernel.img ] \uc5b4\uc148\ube14\ub9ac \u2192 \uc624\ube0c\uc81d\ud2b8 : CPU\uac00 \uc774\ud574\ud560 \uc218 \uc788\ub294 \uae30\uacc4\uc5b4(.o)\ub85c \ubcc0\ud658 \uc624\ube0c\uc81d\ud2b8 \u2192 ELF \uc2e4\ud589\ud30c\uc77c : \ucf54\ub4dc\uc640 \ub370\uc774\ud130(\uc139\uc158)\ub4e4\uc744 \uc8fc\uc18c\uc5d0 \ub9de\uac8c \ubc30\uce58 ELF \u2192 \ubc14\uc774\ub108\ub9ac \uc774\ubbf8\uc9c0 : ELF \ud5e4\ub354 \uc81c\uac70, \ubd80\ud2b8\ub85c\ub354/\uc5d0\ubbac\ub808\uc774\ud130\uac00 \ubc14\ub85c \uc77d\uc744 \uc218 \uc788\uac8c</p> <pre><code>~$ cat &gt; test.S                      #test.S \uc0dd\uc131\n.section .text\n.globl _start\n_start:\n\n    b .\nCtrl+D\n</code></pre> <pre><code>~$ aarch64-linux-gnu-as hello.S -o hello.o                      #\uc5b4\uc148\ube14\ub9ac&gt;\uc624\ube0c\uc81d\ud2b8\n~$ aarch64-linux-gnu-ld -T link.ld hello.o -o kernel.elf        #\ub9c1\ucee4\n~$ aarch64-linux-gnu-objcopy -O binary kernel.elf kernel.img    #\ubc14\uc774\ub108\ub9ac\ub85c \ubcc0\ud658\n\n~$ qemu-system-aarch64 \\\n    -M virt \\                                                   #\ud45c\uc900 ARM64 \uac00\uc0c1\uba38\uc2e0\n    -cpu cortex-a53 \\                                           #ARM64 CPU\n    -nographic \\                                                #\uc2dc\ub9ac\uc5bc\ub85c\ub9cc \uc785\ucd9c\ub825\n    -kernel kernel8.img                                         #\ucee4\ub110 \ubc14\uc774\ub108\ub9ac \uc9c0\uc815\nCtrl+A X\n</code></pre> <pre><code>~$ ps aux | grep qemu           #\uc2e4\ud589\uc911\uc778 \ud504\ub85c\uc138\uc2a4 \ubc88\ud638\n~$ kill \uc22b\uc790                     #\uac15\uc81c\uc885\ub8cc\n</code></pre>"},{"location":"go/#makefile","title":"&gt; Makefile","text":"<p>\uc704 \uacfc\uc815\uc744 \ud558\ub098\ub85c \uc815\ub9ac</p>"},{"location":"go/#_5","title":"&gt; \ub514\ubc84\uae45","text":"<p>\ub2e4\ub978 \ud130\ubbf8\ub110\uc5d0\uc11c gdb-multiarch ~/make-os/kernel.elf (gdb) target remote localhost:1234  #\uc5f0\uacb0 (gdb) continue                      #\ucf54\ub4dc \uc2e4\ud589 (gdb) quit                          #\uadf8\ub9cc\ub450\uba74 \uba48\ucd98 \uc8fc\uc18c \ub098\ud0c0\ub0a8 (gdb) info registers                #\ub808\uc9c0\uc2a4\ud130 \uc815\ubcf4 (gdb) disassemble                   #\uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \ubcf4\uae30 (gdb) x/i $pc                       #\ud604\uc7ac \uc704\uce58(pc)</p>"},{"location":"go/#uart","title":"&gt; Uart","text":"<ol> <li>\uc804\uc6d0 On \u2192 \ucee4\ub110 \ucf54\ub4dc \uc2e4\ud589</li> <li>UART\ub85c \"Hello\" \uac19\uc740 \ubb38\uc790 \ucd9c\ub825</li> <li>Timer\ub97c \uc124\uc815\ud574\uc11c \"1\ucd08\ub9c8\ub2e4 \uc778\ud130\ub7fd\ud2b8(IRQ) \uc8fc\uc138\uc694\"\ub77c\uace0 \uc694\uccad</li> <li>\uc9c4\uc9dc 1\ucd08\ub9c8\ub2e4 CPU\ud55c\ud14c \uc778\ud130\ub7fd\ud2b8\uac00 \uc624\uba74 \u2192 \uc6b0\ub9ac\uac00 \ub9cc\ub4e0 \ud568\uc218(IRQ \ud578\ub4e4\ub7ec) \ud638\ucd9c\ub428</li> <li>\uac70\uae30\uc11c UART\ub85c \"Tick!\" \ucd9c\ub825</li> </ol> <p>\u2705 \uc804\uccb4 \ud750\ub984 \uc694\uc57d: Tick \ucd9c\ub825\uc774 \ub098\uc624\uae30\uae4c\uc9c0</p> <p>\ud83e\uddf1 0. QEMU \uc2e4\ud589 <pre><code>qemu-system-aarch64 -M virt -cpu cortex-a53 -nographic -kernel kernel.img\n</code></pre> - QEMU\ub294 \ucee4\ub110 \ubc14\uc774\ub108\ub9ac\ub97c <code>0x40080000</code>\uc5d0 \ub85c\ub4dc\ud558\uace0, - <code>_start</code>\ub77c\ub294 \uc2ec\ubcfc(\uc2dc\uc791 \uc8fc\uc18c)\ubd80\ud130 \uc2e4\ud589\uc744 \uc2dc\uc791\ud568.</p> <p>\ud83d\udd25 1. <code>_start</code> \uc2e4\ud589 (start.S)</p> \ub3d9\uc791 \uc124\uba85 <code>sp</code> \uc124\uc815 \uc2a4\ud0dd \ucd08\uae30\ud654 (<code>_stack_top</code>\uc744 <code>sp</code>\ub85c \uc124\uc815) <code>VBAR_EL1 = vector_table</code> \uc778\ud130\ub7fd\ud2b8 \ubca1\ud130 \ud14c\uc774\ube14 \uc8fc\uc18c \ub4f1\ub85d <code>DAIFClr, #0xf</code> \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8 \ud5c8\uc6a9 (IRQ, FIQ, SError \ub4f1) <code>bl main</code> C \ucf54\ub4dc \uc9c4\uc785\uc810 <code>main()</code> \ud638\ucd9c <p>\u2699\ufe0f 2. <code>main()</code> \uc9c4\uc785 (main.c) <pre><code>void main(void) {\n    uart_puts(\"Starting Timer...\\n\");\n\n    gic_init();   // GIC \uc778\ud130\ub7fd\ud2b8 \ucee8\ud2b8\ub864\ub7ec \ucd08\uae30\ud654\n    timer_init(); // 1\ucd08 \ub4a4 IRQ 30 \uc778\ud130\ub7fd\ud2b8 \uc124\uc815\n\n    while (1) {}  // \ubb34\ud55c \ub300\uae30 (\uc778\ud130\ub7fd\ud2b8\ub9cc \ucc98\ub9ac\ud568)\n}\n</code></pre></p> <p>\ud83d\udee0\ufe0f 3. GIC \ucd08\uae30\ud654 (gic.c)</p> \ub3d9\uc791 \uc124\uba85 <code>GICD_CTLR = 1</code> Distributor \ucf2c (\uc804\uc5ed \uc778\ud130\ub7fd\ud2b8 \uad00\ub9ac\uc790) <code>GICC_CTLR = 1</code> CPU Interface \ucf2c (CPU\ub85c \uc778\ud130\ub7fd\ud2b8 \uc804\ub2ec \ud5c8\uc6a9) <code>GICD_ISENABLER0 |= (1 &lt;&lt; 30)</code> IRQ ID 30 (\ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8)\ub9cc \ud5c8\uc6a9 <p>\u23f1\ufe0f 4. Timer \ucd08\uae30\ud654 (timer.c)</p> \ub3d9\uc791 \uc124\uba85 <code>cntfrq_el0</code> \uc77d\uae30 \ud0c0\uc774\uba38 \uc8fc\ud30c\uc218 (ex. 62.5MHz) <code>cntp_tval_el0 = cntfrq</code> 1\ucd08 \ud6c4 \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd \uc608\uc57d <code>cntp_ctl_el0 = 1</code> \ud0c0\uc774\uba38 \uc2dc\uc791 (IRQ \ubc1c\uc0dd \uac00\ub2a5) <p>\ud83d\udca4 5. \uba54\uc778 \ub8e8\ud504 \uc9c4\uc785 - <code>main()</code>\uc740 <code>while(1)</code> \ub8e8\ud504\uc5d0 \uc9c4\uc785\ud558\uc5ec \uc544\ubb34 \uc77c\ub3c4 \ud558\uc9c0 \uc54a\uc74c - \uc774\ud6c4\uc758 \ub3d9\uc791\uc740 \uc778\ud130\ub7fd\ud2b8\uc5d0 \uc758\ud574\uc11c\ub9cc \ubc1c\uc0dd\ud568</p> <p>\u26a1 6. 1\ucd08 \ud6c4 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd - \ud0c0\uc774\uba38 \ub0b4\ubd80\uc801\uc73c\ub85c <code>cntp_tval_el0</code>\uc5d0\uc11c \uce74\uc6b4\ud2b8 \uac10\uc18c - 0\uc5d0 \ub3c4\ub2ec\ud558\uba74 IRQ 30\ubc88 \ubc1c\uc0dd - CPU\ub294 \ubca1\ud130 \ud14c\uc774\ube14\uc744 \ub530\ub77c <code>irq_handler</code> \uc2e4\ud589</p> <p>\ud83e\udded 7. \ubca1\ud130 \ud14c\uc774\ube14 \uc9c4\uc785 (start.S) <pre><code>vector_table:\n    b sync_handler       // Synchronous Exception\n    b irq_handler        // IRQ \ubc1c\uc0dd \uc2dc \uc5ec\uae30\uac00 \uc2e4\ud589\ub428\n    b fiq_handler        // FIQ\n    b error_handler      // SError\n\nirq_handler:\n    bl irq_handler_c     // \uc2e4\uc81c C \ud578\ub4e4\ub7ec \ud638\ucd9c\n    eret                 // \ubcf5\uadc0\n</code></pre></p> <p>\ud83d\udce6 8. <code>irq_handler_c()</code> \uc2e4\ud589 (main.c) <pre><code>unsigned int intid = gic_acknowledge();  // IRQ ID \uc77d\uae30\n\nuart_puts(\"IRQ ID: \");\nprint_dec(intid);                        // \"IRQ ID: 30\" \ucd9c\ub825\n\nif (intid == 30) {\n    uart_puts(\"Tick!\\n\");               // \"Tick!\" \ucd9c\ub825\n    timer_init();                        // \ub2e4\uc2dc \ud0c0\uc774\uba38 \uc7ac\uc124\uc815 (1\ucd08 \ud6c4 \ubc18\ubcf5)\n}\n\ngic_eoi(intid);                          // GIC\uc5d0 \ucc98\ub9ac \uc644\ub8cc \uc54c\ub9bc\n</code></pre></p> <p>\ud83d\udd01 9. \ub8e8\ud504 \ubc18\ubcf5 - \ub2e4\uc2dc \ud0c0\uc774\uba38 \uc124\uc815\ub428 (<code>timer_init()</code> \ud638\ucd9c) - \ub610 1\ucd08 \ub4a4 IRQ 30 \ubc1c\uc0dd \u2192 \uc704 \uacfc\uc815 \ubc18\ubcf5</p> <p>.section .text .global _start</p> <p>_start:     // \ubca1\ud130 \ud14c\uc774\ube14 \ub4f1\ub85d     ldr x0, =vector_table     msr VBAR_EL1, x0     isb</p> <pre><code>// GIC \ucd08\uae30\ud654\nbl gic_init\n\n// CNTV Timer \uc124\uc815 (1\ucd08)\nldr x1, =0x3B9ACA00      // 1,000,000,000 ticks\nmsr cntv_tval_el0, x1\nmov x2, #1\nmsr cntv_ctl_el0, x2\n\n// IRQ \uc5b8\ub9c8\uc2a4\ud06c\nmsr DAIFClr, #2\n</code></pre> <p>1:  wfe     b 1b</p> <p>.align 11 vector_table:     // Synchronous EL1t     b default_handler     .space 0x80 - 4</p> <pre><code>// IRQ EL1t\nb default_handler\n.space 0x80 - 4\n\n// FIQ EL1t\nb default_handler\n.space 0x80 - 4\n\n// SError EL1t\nb default_handler\n.space 0x80 - 4\n\n// Synchronous EL1h\nb default_handler\n.space 0x80 - 4\n\n// IRQ EL1h\nb irq_handler\n.space 0x80 - 4\n\n// FIQ EL1h\nb default_handler\n.space 0x80 - 4\n\n// SError EL1h\nb default_handler\n.space 0x80 - 4\n</code></pre> <p>default_handler:     b .</p> <p>irq_handler:     // \uba54\uc2dc\uc9c0 \ucd9c\ub825     ldr x0, =tick_msg print_loop:     ldrb w1, [x0], #1     cbz w1, tick_done     bl putc     b print_loop</p> <p>tick_done:     // \ud0c0\uc774\uba38 \uc7ac\uc124\uc815     ldr x1, =0x3B9ACA00     msr cntv_tval_el0, x1</p> <pre><code>// \uc778\ud130\ub7fd\ud2b8 EOI \ucc98\ub9ac\nldr x0, =0x08010010\nmov w1, #27            // Timer IRQ ID 27\nstr w1, [x0]\n\neret\n</code></pre> <p>putc:     ldr x2, =0x09000000    // UART MMIO wait_uart:     ldr w3, [x2, #0x18]     tst w3, #0x20     b.ne wait_uart     str w1, [x2]     ret</p> <p>gic_init:     ldr x0, =0x08000000    // GIC Distributor     mov w1, #1     str w1, [x0]           // GICD_CTLR</p> <pre><code>add x1, x0, #0x100     // GICD_ISENABLER0\nmov w2, #(1 &lt;&lt; 27)     // Timer IRQ ID 27\nstr w2, [x1]\n\nldr x0, =0x08010000    // GICC base\nmov w1, #1\nstr w1, [x0]           // GICC_CTLR\n\nadd x1, x0, #0x4       // GICC_PMR\nmov w2, #0xFF\nstr w2, [x1]\n\nret\n</code></pre> <p>tick_msg:     .asciz \"Tick!\\n\"</p> <p>\uacb0\uacfc Tick! Tick! Tick!</p>"},{"location":"go/#mmu","title":"&gt; mmu(\uba54\ubaa8\ub9ac \ub9e4\ub2c8\uc9c0\uba3c\ud2b8 \uc720\ub2db)","text":"<p>\ubb3c\ub9ac \uc8fc\uc18c\uc640 \uac00\uc0c1 \uc8fc\uc18c\ub97c \ub9e4\ud551\ud574\uc900\ub2e4. \ub530\ub77c\uc11c \uc720\uc800\ubaa8\ub4dc/\ucee4\ub110\ubaa8\ub4dc\ub97c \ubd84\ub9ac\ud558\uc5ec \ud504\ub85c\uc138\uc2a4\ub97c \uaca9\ub9ac\ud558\uace0 \uba54\ubaa8\ub9ac\ub97c \ubcf4\ud638\ud55c\ub2e4. step 1. \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc900\ube44 arm64\uc5d0\uc11c\ub294 \uae30\ubcf8\uc73c\ub85c L1 -&gt; L2 -&gt; L3 \ud14c\uc774\ube14\ub85c \uacc4\uce35\ud654\ub97c \ud558\uc9c0\ub9cc \uc5ec\uae30\uc120 identity mapping\uc73c\ub85c \uad6c\uc131 step 2. mmu \ub808\uc9c0\uc2a4\ud130 TTBRO_EL1 : \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \ubca0\uc774\uc2a4 \uc8fc\uc18c TCR_EL1 : \uc8fc\uc18c \ud06c\uae30 \uc124\uc815 MAIR_EL1 : \uba54\ubaa8\ub9ac \uc18d\uc131 SCTLR_EL1 : mmu \ud65c\uc131\ud654</p>"},{"location":"vm/","title":"vm","text":""},{"location":"vm/#_1","title":"&gt; \uac00\uc0c1\uba38\uc2e0?","text":"<p>\uac00\uc0c1\uba38\uc2e0? \ubb3c\ub9ac\uc801 \ucef4\ud4e8\ud130 \uc704\uc5d0\uc11c \ub3cc\uc544\uac00\ub294 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \ucef4\ud4e8\ud130</p> <p>\ud558\uc774\ud37c\ubc14\uc774\uc800 -&gt; \uadf8 \uac00\uc9dc \ucef4\ud4e8\ud130\ub97c \uad00\ub9ac\ud558\ub294 \uad00\ub9ac\uc790</p>"},{"location":"vm/#_2","title":"&gt; \ubd84\ub958","text":"<p>\ud558\uc774\ud37c\ubc14\uc774\uc800 \uc704\uce58</p> <p>type 1. bare-metal \ud558\ub4dc\uc6e8\uc5b4 \ubc14\ub85c \uc704\uc5d0 \ud558\uc774\ud37c\ubc14\uc774\uc800\uac00 \ub3d9\uc791. os \uc124\uce58 \uc5c6\uc774 \ubc14\ub85c vm \uc2e4\ud589 \uac00\ub2a5</p> <p>[\ubb3c\ub9ac \ucef4\ud4e8\ud130]  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502        Hypervisor          \u2502  \u2190 \ud558\uc774\ud37c\ubc14\uc774\uc800 (Xen, VMware ESXi, Hyper-V)  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502  \u2502 VM #1      \u2502 \u2502 VM #2 \u2502 \u2502  \u2502  \u2502 Ubuntu     \u2502 \u2502 Win10 \u2502 \u2502  \u2190 \uac00\uc0c1\uba38\uc2e0 (\uac8c\uc2a4\ud2b8 OS + \ucee4\ub110)  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>type 2. hosted \uc77c\ubc18 os \uc704\uc5d0\uc11c \ud504\ub85c\uadf8\ub7a8\ucc98\ub7fc \uc2e4\ud589\ub418\ub294 \ud558\uc774\ud37c\ubc14\uc774\uc800</p> <p>[\ubb3c\ub9ac \ucef4\ud4e8\ud130]  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502       Host OS              \u2502  \u2190 \uc77c\ubc18 \ub370\uc2a4\ud06c\ud0d1 OS  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502  \u2502 Hypervisor           \u2502  \u2502  \u2190 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uae30\ubc18 (QEMU, VirtualBox)  \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502  \u2502  \u2502  \u2502  \u2502 VM #1      \u2502      \u2502  \u2502  \u2502  \u2502  \u2502 Fedora     \u2502      \u2502  \u2502  \u2190 \uac8c\uc2a4\ud2b8 OS  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>\ubcc4\ucca8. \ucee8\ud14c\uc774\ub108 \ubaa8\ub450 \ud638\uc2a4\ud2b8 \ucee4\ub110 \uacf5\uc720</p> <p>[\ubb3c\ub9ac \ucef4\ud4e8\ud130]  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502     Host OS (\ub9ac\ub205\uc2a4)        \u2502  \u2190 \ucee4\ub110 \uacf5\uc720  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502  \u2502 \ucee8\ud14c\uc774\ub108 \ub7f0\ud0c0\uc784       \u2502  \u2502  \u2190 Docker  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502     \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510  \u2502     \u2502 Container\u2502 \u2502 Container\u2502  \u2190 \uac00\ubcbc\uc6b4 \uaca9\ub9ac \ud658\uacbd  \u2502     \u2502  Nginx   \u2502 \u2502  Python  \u2502  \u2190 rootfs + \ub77c\uc774\ube0c\ub7ec\ub9ac + \uc571  \u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>cpu \uac00\uc0c1\ud654 \uae30\ubc95</p> <p>trap-and-emulate \ud2b9\uad8c \uba85\ub839 -&gt; \ud2b8\ub7a9 \ubc1c\uc0dd -&gt; \ud558\uc774\ud37c\ubc14\uc774\uc800\uac00 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub85c \uc5d0\ubbac\ub808\uc774\uc158. \uc27d\uac8c \ub9d0\ud574 \uc6b8\uba74 \uc5b4\ub978\uc774 \ub300\uc2e0 \ucc98\ub9ac.</p> <p>binary translation \uc2e4\ud589 \ucf54\ub4dc\ub97c \ub3d9\uc801 \uc7ac\uc791\uc131. \uc27d\uac8c \ub9d0\ud574 \uc548\uc6b8\ub3c4\ub85d \ubbf8\ub9ac \uc0ac\uc804 \uc791\uc5c5.</p> <p>HW-assist intel VT-x, AMD-V \ub4f1 \ud558\ub4dc\uc6e8\uc5b4\uac00 \uba85\ub839-\ud398\uc774\uc9c0\ud14c\uc774\ube14 \uac00\uc0c1\ud654 \uc9c0\uc6d0. \uc27d\uac8c \ub9d0\ud574 \uc544\uc774 \uc804\uc6a9\ubc29\uc774 \ub530\ub85c \uc788\uc74c.</p> <p>\uc7a5\uce58 \uac00\uc0c1\ud654</p> <p>\ud480 \uc5d0\ubbac\ub808\uc774\uc158 qemu\uac00 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub85c \uac00\uc0c1 \ud558\ub4dc\uc6e8\uc5b4 \uad6c\ud604. \uc27d\uac8c \ub9d0\ud574 \uac00\uc9dc \uc218\ucde8\ud568</p> <p>\ud30c\ub77c\uac00\uc0c1\ud654 \uac8c\uc2a4\ud2b8\uac00 virtio \ud1b5\uc2e0. \uc804\uc6a9 \uace0\uc18d \ud0dd\ubc30 \uc804\uc6a9</p> <p>\ud328\uc2a4-\uc2a4\ub8e8 \uc2e4\uc81c \uc7a5\uce58 \uae30\ub2a5 \uc9c1\uc811 \ub118\uae40. \uc9d1 \uc5f4\uc1e0\ub97c \ud1b5\uc9f8\ub85c \uc90c.</p>"},{"location":"vm/#_3","title":"&gt; \uad6c\uc131\uc694\uc18c","text":"<p>vcpu \uc2e4\uc81c cpu \ucf54\uc5b4\uc640 \ub17c\ub9ac \ucf54\uc5b4 \ub9e4\ud551. \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce58, \ud0c0\ubbf8\uc5b4 \uc778\ud130\ub7fd\ud2b8, TLB flush \ub4f1. \u250c\u2500 Host CPU Core \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2026\uc2e4\ud589 \uc911\u2026                               \u2502 \u2502  (\ud638\uc2a4\ud2b8 \ucf54\ub4dc)                           \u2502 \u2502  \u2199 \u300cWorld-switch\u300d \u2198                   \u2502 \u2502  \uac8c\uc2a4\ud2b8 \ub808\uc9c0\uc2a4\ud130 \uc138\ud2b8 \ub85c\ub4dc              \u2502 \u2502  \uac8c\uc2a4\ud2b8 \ucf54\ub4dc \uc2e4\ud589 (user \u2192 kernel \u2192 \u2026)   \u2502 \u2502  VM-Exit (\ud2b8\ub7a9 \ubc1c\uc0dd)                    \u2502 \u2502  \u2026\ub2e4\uc2dc \ud638\uc2a4\ud2b8 \ucf54\ub4dc\u2026                     \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 world-switch= \ub808\uc9c0\uc2a4\ud130,TLB\ub97c \uc2f9 \ubc14\uafd4 \ub07c\uc6b0\ub294 \uc21c\uac04 \uc2a4\ucf00\uc904\ub7ec\uac00 \uc774\ubc88 \ud0c0\uc784\uc2ac\ub77c\uc774\uc2a4\ub294 vCPU #2\ub77c\uace0 \uacb0\uc815\ud558\uc5ec \uc2e4 cpu\uc5d0 \ud0dc\uc6b0\ub294 \ud615\uc2dd</p> <p>\uac00\uc0c1 \uba54\ubaa8\ub9ac nested page table</p> <p>\uac8c\uc2a4\ud2b8 \uac00\uc0c1 addr 0x7fff_1234    \u2502 (\uac8c\uc2a4\ud2b8 \ud398\uc774\uc9c0 \ud14c\uc774\ube14)          \u2190 xv6\uac00 \uc544\ub294 \uc138\uacc4    \u25bc \uac8c\uc2a4\ud2b8-\ubb3c\ub9ac addr 0x8010_1234    \u2502 (Nested page table / EPT)      \u2190 \ud558\uc774\ud37c\ubc14\uc774\uc800\uac00 \uc18d\uc784    \u25bc \ud638\uc2a4\ud2b8-\ubb3c\ub9ac addr 0x3c20_51234    \u2502 (MMU \uc2e4\uc81c DRAM)                \u2190 \uc9c4\uc9dc \ud558\ub4dc\uc6e8\uc5b4</p> <p>i/o \uac00\uc0c1\ud654 mmio \ud2b8\ub7a9, DMA \ub9ac\ub9f5, virtio ring buffer 1. \uac8c\uc2a4\ud2b8 \ucee4\ub110\uc774 store 0x10001014 &lt;- 0x1 (virtio \ub514\uc2a4\ud06c \ud050 \ub4f1\ub85d) 2. MMIO \uc8fc\uc18c\uc774\ubbc0\ub85c VM-Exit -&gt; QEMU\uc5d0\uac8c \ub514\uc2a4\ud06c \uc4f0\uc790 \uc694\uccad 3. QEMU\uac00 \ud638\uc2a4\ud2b8 \ud30c\uc77c(fs.img)\uc5d0 write -&gt; \uc644\ub8cc \ud6c4 \uac00\uc9dc \uc778\ud130\ub7fd\ud2b8 \uc7ac\uc8fc\uc785 4. \uac8c\uc2a4\ud2b8\uc5d0\uc11c ISR \uc2e4\ud589 -&gt; \uc2dc\uc2a4\ud15c\ucf5c\ub85c \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc4f0\uae30 \uc644\ub8cc \uc54c\ub9bc</p> <p>\uc774\ub54c virtio\ub294 2,3\ub2e8\uacc4\uc5d0\uc11c \ub9c1 \ubc84\ud37c/IOVRING\uc744 \uc368\uc11c \ud2b8\ub7a9 \ud69f\uc218\ub97c \ud655 \uc904\uc774\ub294 \ucd5c\uc801\ud654</p> <p>\uc2a4\ud1a0\ub9ac\uc9c0 \ub124\ud2b8\uc6cc\ud0b9 QCOW2\uac19\uc740 \uc774\ubbf8\uc9c0 \ud615\uc2dd</p>"},{"location":"vm/#qemu-kvm","title":"&gt; QEMU-KVM \ud750\ub984","text":"<p>qemu? type2 \ud480 \uc5d0\ubbac\ub808\uc774\uc158 \ud558\uc774\ud37c\ubc14\uc774\uc800 kvm? HW-assist \ubc29\uc2dd \uc804\uc6a9 \ucee4\ub110 \ubaa8\ub4c8(type 1) \ud070 \ud2c0\uc740 qemu\ub97c \uc4f0\uace0 cpu \uac00\uc0c1\ud654\ub97c \ucd94\uac00\ub85c \uc9c4\ud589\ud558\uc5ec qemu+kvm \ubc29\uc2dd\uc73c\ub85c \ub9ce\uc774 \uc500.</p> <p>A. \ubd80\ud305 \uc804 <code>make qemu</code> qemu\uac00 risc-v virt \uba38\uc2e0\uc744 \uc0dd\uc131 -&gt; /dev/kvm\uc5d0 vCPU 3\uac1c \uc694\uccad B. vCPU \uc9c4\uc785 <code>hart 2 starting</code> kvm \ubaa8\ub4c8\uc774 KVM_RUN \uc9c4\uc785 -&gt; mepc=0x80000000 \ub85c\ub4dc. \uac8c\uc2a4\ud2b8 \uccab \uba85\ub839 \uc2e4\ud589 C. \uc2dc\uacc4 \uc778\ud130\ub7fd\ud2b8 <code>tick</code> RISC-V mtimecmp \ub9cc\ub8cc -&gt; \ud558\ub4dc\uc6e8\uc5b4\uac00 'supervisor timer interrupt' -&gt; VM-Exit -&gt; KVM\uac00 \uc778\ud130\ub7fd\ud2b8 \uc7ac\uc8fc\uc785 D. \uc2dc\uc2a4\ud15c\ucf5c <code>read</code> \uc0ac\uc6a9\uc790 \ud504\ub85c\uadf8\ub7a8\uc774 ecall -&gt; trap -&gt; xv6-kernel sys_open -&gt; I/O \uc694\uccad \uc0dd\uc131 E. \ub514\uc2a4\ud06c I/O virtio-blk MMIO \uc811\uadfc -&gt; VM-Exit -&gt; QEMU\uac00 fs.img\uc5d0 \ube14\ub85d read -&gt; \uc885\ub8cc IRQ \uc7ac\uc8fc\uc785 F. \ucf58\uc194 \ucd9c\ub825 <code>$ls</code> \uac8c\uc2a4\ud2b8\uac00 UART MMIO(0x10000000) write -&gt; QEMU\uac00 \ud638\uc2a4\ud2b8 stderr\ub85c \ubc14\ub85c \ud504\ub9b0\ud2b8 G. \ud638\uc2a4\ud2b8\ub85c \ubcf5\uadc0 \ub2e8\ucd95\ud0a4 Ctrl-a x \ub204\ub974\uba74 QEMU \uc885\ub8cc -&gt; vCPU context \uc800\uc7a5, \ud30c\uc77c flush \ud6c4 make \uc885\ub8cc</p> <p>cpu \uad8c\ud55c \ub808\ubca8</p> <p>x86\uc5d0\uc11c\ub294 Ring0(\ucee4\ub110) Ring3(\uc720\uc800) ARM\uc5d0\uc11c\ub294 EL0(\uc720\uc800) EL1(\ucee4\ub110) EL2(\ud558\uc774\ud37c\ubc14\uc774\uc800) EL3(\ubcf4\uc548) RISC-V\uc5d0\uc11c\ub294 U(\uc720\uc800) S(\ucee4\ub110) M(\ucd5c\uc0c1\uc704)</p> <p>\uac8c\uc2a4\ud2b8 OS -&gt; \uc9c1\uc811 CPU\uc5d0\uc11c \uc2e4\ud589 (EL1) \ud2b9\uad8c \uba85\ub839\uc5b4 -&gt; trap -&gt; EL2 -&gt; KVM -&gt; \uacb0\uacfc\ucc98\ub9ac -&gt; \ubcf5\uadc0</p>"},{"location":"xv6-riscv/","title":"xv6-riscv","text":""},{"location":"xv6-riscv/#_1","title":"&gt; \ud30c\uc77c \uad6c\uc870","text":"<p>[1] \ubd80\ud2b8 \uc9c4\uc785 [2] \ucee4\ub110 \ucd08\uae30\ud654 [3] \ud2b8\ub7a9 \ud578\ub4e4\ub7ec \ub4f1\ub85d [4] \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud65c\uc131\ud654 [5] init \ud504\ub85c\uc138\uc2a4 \uc2dc\uc791 [6] \uc720\uc800 \uc2a4\ud398\uc774\uc2a4 \u2192 \uc2dc\uc2a4\ud15c \ucf5c \u2192 \ucee4\ub110 \uc9c4\uc785</p> <p>xv6-riscv/ \u251c\u2500\u2500 Makefile           \u2190 \ube4c\ub4dc \uba85\ub839 \uc815\uc758 \u251c\u2500\u2500 kernel/            \u2190 \ucee4\ub110 \ucf54\ub4dc\uac00 \ub2f4\uae34 \ub514\ub809\ud1a0\ub9ac \u2502   \u251c\u2500\u2500 entry.S        \u2190 \ucee4\ub110 \uc9c4\uc785\uc810 (Assembly) \u2502   \u251c\u2500\u2500 start.c        \u2190 \ucd08\uae30\ud654 \ub8e8\ud2f4 \u2502   \u251c\u2500\u2500 main.c         \u2190 \ucee4\ub110 main \ud568\uc218 \u2502   \u251c\u2500\u2500 trap.c         \u2190 \ud2b8\ub7a9/\uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac \u2502   \u251c\u2500\u2500 syscall.c      \u2190 \uc2dc\uc2a4\ud15c \ucf5c \ub514\uc2a4\ud328\uce58 \u2502   \u251c\u2500\u2500 proc.c         \u2190 \ud504\ub85c\uc138\uc2a4 \uc0dd\uc131/\uc2a4\ucf00\uc904\ub9c1 \u2502   \u251c\u2500\u2500 vm.c           \u2190 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \ubc0f \uba54\ubaa8\ub9ac \uad00\ub9ac \u2502   \u251c\u2500\u2500 kalloc.c       \u2190 \ubb3c\ub9ac \uba54\ubaa8\ub9ac \ud560\ub2f9\uc790 \u2502   \u251c\u2500\u2500 file.c, fs.c   \u2190 \ud30c\uc77c \uc2dc\uc2a4\ud15c \u2502   \u251c\u2500\u2500 uart.c         \u2190 UART \ub4dc\ub77c\uc774\ubc84 \u2502   \u251c\u2500\u2500 spinlock.c     \u2190 \uc2a4\ud540\ub77d \u2502   \u2514\u2500\u2500 ...            \u2190 \ub2e4\uc591\ud55c \ucee4\ub110 \uc11c\ube0c\uc2dc\uc2a4\ud15c \u251c\u2500\u2500 user/              \u2190 \uc0ac\uc6a9\uc790 \uc601\uc5ed \ud504\ub85c\uadf8\ub7a8 \u2502   \u251c\u2500\u2500 init.c         \u2190 \ucd5c\ucd08 \uc720\uc800 \ud504\ub85c\uadf8\ub7a8 \u2502   \u251c\u2500\u2500 sh.c           \u2190 \uc178 \u2502   \u2514\u2500\u2500 ...            \u2190 ls, cat, echo \ub4f1 \uc720\ud2f8\ub4e4 \u251c\u2500\u2500 fs/                \u2190 \ud30c\uc77c \uc2dc\uc2a4\ud15c \u2502   \u2514\u2500\u2500 fs.img         \u2190 \ucd08\uae30 \ud30c\uc77c \uc2dc\uc2a4\ud15c \uc774\ubbf8\uc9c0 \u251c\u2500\u2500 mkfs/              \u2190 \ud30c\uc77c \uc2dc\uc2a4\ud15c \uc774\ubbf8\uc9c0 \uc0dd\uc131 \ub3c4\uad6c \u2502   \u2514\u2500\u2500 mkfs.c \u251c\u2500\u2500 include/           \u2190 \ucee4\ub110/\uc720\uc800 \uacf5\uc6a9 \ud5e4\ub354 \u2502   \u2514\u2500\u2500 *.h \u251c\u2500\u2500 .gdbinit           \u2190 GDB \ucd08\uae30\ud654 \uc124\uc815 \u2514\u2500\u2500 README.md</p>"},{"location":"xv6-riscv/#kernelkernelld","title":"&gt; \uba54\ubaa8\ub9ac \ubc30\uce58 kernel/kernel.ld","text":"<p>\ub9c1\ucee4 \uc2a4\ud06c\ub9bd\ud2b8\ub780? .o \ub4e4\uc744 \ud558\ub098\ub85c \ubb36\uc5b4 \uc2e4\ud589 \uac00\ub2a5\ud55c .elf \ubc14\uc774\ub108\ub9ac\ub97c \ub9cc\ub4e4\ub54c, \uc5b4\ub5a4 \uc139\uc158\uc744 \uc5b4\ub514\uc5d0 \ubc30\uce58\ud560\uc9c0 \uacb0\uc815\ud558\ub294 \ubc30\uce58\ub3c4 \uc5ed\ud560\uc744 \ud55c\ub2e4. <pre><code>OUTPUT_ARCH( \"riscv\" )\nENTRY( _entry )\n\nSECTIONS\n{\n  /*\n   * ensure that entry.S / _entry is at 0x80000000,\n   * where qemu's -kernel jumps.\n   */\n  . = 0x80000000;\n\n  .text : {                     // \uc2e4\ud589 \uac00\ub2a5\ud55c \ucf54\ub4dc\ub4e4\uc744 \uc774 \uc139\uc158\uc5d0 \ubc30\uce58\n    *(.text .text.*)            // \uc77c\ubc18 C/\uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\n    . = ALIGN(0x1000);          // 4KB \uc815\ub82c (\ud398\uc774\uc9c0 \ub2e8\uc704)\n    _trampoline = .;            // \ud2b8\ub7a8\ud3f4\ub9b0 \uc2dc\uc791 \uc704\uce58 \uc800\uc7a5\n                                // \ud2b8\ub7a8\ud3f4\ub9b0\uc774\ub780 \uc720\uc800 \ubaa8\ub4dc\uc5d0\uc11c \ucee4\ub110 \ubaa8\ub4dc\ub85c \ub3cc\uc544\uc62c \ub54c \ud544\uc694\ud55c \uc784\uc2dc \ucf54\ub4dc \uacf5\uac04. \uac01 \ud504\ub85c\uc138\uc2a4\uc758 trap handler\uac00 \uc810\ud504\ud558\ub294 \uc7a5\uc18c\n    *(trampsec)                 // \ud2b8\ub7a8\ud3f4\ub9b0 \ucf54\ub4dc \uc0bd\uc785\n    . = ALIGN(0x1000);          // \ub2e4\uc2dc 4KB \uc815\ub82c\n    ASSERT(. - _trampoline == 0x1000, \"error: trampoline larger than one page\");\n    //\ud06c\uae30 \uccb4\ud06c. \ud639\uc5ec\ub77c\ub3c4 1\ud398\uc774\uc9c0(4KB)\ub85c \uc815\ub82c \uc548\ub410\uc744\uae4c\ubd10.\n    PROVIDE(etext = .);         // etext\ub77c\ub294 \uc2ec\ubcfc\ub85c \ud604\uc7ac \uc8fc\uc18c \ucee4\uc11c \uc800\uc7a5. \ud14d\uc2a4\ud2b8 \ub05d \uc8fc\uc18c\ub97c \uc54c \uc218 \uc788\uac8c.\n  }\n\n  .rodata : {                   // \uc77d\uae30 \uc804\uc6a9 \ub370\uc774\ud130\ub4e4(const)\n    . = ALIGN(16);              // 16\ubc14\uc774\ud2b8 \uc815\ub82c\n    *(.srodata .srodata.*)      // srodata\ub294 \uc791\uc740 \uc0c1\uc218\ub4e4\uc744 \uc704\ud55c \ubcc4\ub3c4 \uc139\uc158\n    . = ALIGN(16);\n    *(.rodata .rodata.*)\n  }\n\n  .data : {                     // \ucd08\uae30\ud654\ub41c \uc804\uc5ed\ubcc0\uc218\n    . = ALIGN(16);\n    *(.sdata .sdata.*)          // sdata\ub294 \uc791\uc740 \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218\n    . = ALIGN(16);\n    *(.data .data.*)\n  }\n\n  .bss : {                      // \ucd08\uae30\ud654 \uc548\ub41c \uc804\uc5ed\ubcc0\uc218(\ucd08\uae30\uac12x)\n    . = ALIGN(16);\n    *(.sbss .sbss.*)            // \uc791\uc740\n    . = ALIGN(16);\n    *(.bss .bss.*)\n  }\n\n  PROVIDE(end = .);             // end\ub77c\ub294 \uc2ec\ubcfc\ub85c \ud604\uc7ac \uc8fc\uc18c \ucee4\uc11c \uc800\uc7a5. \ucee4\ub110\uc758 \ub05d \uc8fc\uc18c\ub97c \uc54c \uc218 \uc788\uac8c. \uc774 \uc774\ud6c4\ubd80\ud134 heap, user memory, alloc \ub4f1 \uc2dc\uc791.\n}\n</code></pre> <pre><code>\uc8fc\uc18c \u2193 \ub192\uc740 \uc8fc\uc18c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n|                                            |\n|                \uc0ac\uc6a9\uc790 \uacf5\uac04 (user)         | \u2190 \ud504\ub85c\uc138\uc2a4 \uba54\ubaa8\ub9ac\n|                                            |\n|--------------------------------------------| \u2190 \uc0ac\uc6a9\uc790\uac00 \uc0ac\uc6a9\ud558\ub294 \ub9c8\uc9c0\ub9c9 \uc8fc\uc18c (~0xFFFFFFFF?)\n|                \ucee4\ub110 heap                  | \u2190 `end[]` \uc774\ud6c4 \ub3d9\uc801 \ud560\ub2f9\n|                                            |\n|--------------------------------------------| \u2190 end (PROVIDE(end = .))\n|                .bss \uc139\uc158                  | \u2190 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed \ubcc0\uc218\n|                                            |\n|--------------------------------------------|\n|                .data \uc139\uc158                 | \u2190 \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218\n|                                            |\n|--------------------------------------------|\n|                .rodata \uc139\uc158               | \u2190 const \ubb38\uc790\uc5f4 \ub4f1\n|                                            |\n|--------------------------------------------|\n|                .text \uc139\uc158                 | \u2190 C/ASM \ucf54\ub4dc, \ud568\uc218\ub4e4\n|                                            |\n|        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \n|        \u2502 trampoline   \u2502 \u2190 trap \uc9c4\uc785\uc6a9 \ucf54\ub4dc (\ud55c \ud398\uc774\uc9c0)\n|        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \n|                                            |\n|--------------------------------------------| \u2190 0x80000000\n|              entry point (_entry)         | \u2190 QEMU\uac00 jump \ud558\ub294 \uc2dc\uc791 \uc8fc\uc18c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\uc8fc\uc18c \u2191 \ub0ae\uc740 \uc8fc\uc18c\n</code></pre> \uac01 \uc139\uc158\ub4e4\uc740 \ub9c1\ucee4\uac00 .o\ub4e4\uc744 \ubaa8\uc544 \ud558\ub098\uc758 elf\ub97c \uc0dd\uc131\ud558\uba70 \uadf8\ub54c \ud06c\uae30\uac00 \uacb0\uc815\ub41c\ub2e4. \ucee4\ub110 heap\uc740 \ub7f0\ud0c0\uc784 \uacf5\uac04\uc774\ub77c \uc139\uc158\uc774 \uc544\ub2d8. \uc800\uc8fc\uc18c\ubd80\ud130 \uc99d\uac00\ud558\uba70 \uc694\uccad \uc2dc \ud06c\uae30\ub9cc\ud07c \ub3d9\uc801\uc73c\ub85c \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud55c\ub2e4. c\uc5b8\uc5b4 \ud568\uc218\ub4e4\uc744 \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 stack0\uc740 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc558\uc73c\ubbc0\ub85c .bss \uc139\uc158\uc5d0 \ud3ec\ud568</p>"},{"location":"xv6-riscv/#m-kernelentrys","title":"&gt; M\ubaa8\ub4dc \ubc0f \uc2a4\ud0dd \uc124\uc815 kernel/entry.S","text":"<p>cpu\uac00 \uc81c\uc77c \uba3c\uc800 \uc77d\ub294 \ud30c\uc77c\uc740? _entry \ub77c\ubca8.</p> <p><pre><code>        # qemu\ub294 \ucee4\ub110\uc744 0x80000000\uc5d0 \ub85c\ub4dc\n        # \uac01 \ud558\ud2b8(CPU)\uac00 \ud574\ub2f9 \uc704\uce58\ub85c \uc810\ud504\ud558\ub3c4\ub85d \ud568.\n        # kernel.ld\ub85c \uc778\ud574 \ub2e4\uc74c \ucf54\ub4dc\uac00 0x8000000\uc704\uce58\uc5d0 \ubc30\uce58\ub428.\n.section .text\n.global _entry\n_entry:\n        # C \ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc2a4\ud0dd \uc124\uc815.\n        # stack0\uc740 start.c\uc5d0\uc11c \uc815\uc758.\n        # \uac01 CPU\ub9c8\ub2e4 4096Byte \uc2a4\ud0dd.\n        # sp = \uc2a4\ud0dd\ud3ec\uc778\ud130 = stack0 + (hartid * 4096)\n        la sp, stack0                   # sp = stack0\n        li a0, 1024*4                   # a0 = 4096\n        csrr a1, mhartid                # \ud604\uc7ac \ud558\ud2b8 ID \uc77d\uc5b4\uc624\uae30(0,1,2)\n        addi a1, a1, 1                  # +1 (\uc65c\ub0d0\ud558\uba74 stack0[0]\uc740 \uc4f0\uc9c0 \uc54a\uc74c)\n        mul a0, a0, a1                  # hartid * 4096\n        add sp, sp, a0                  # sp = stack0 + (hartid * 4096)\n        # start.c\uc5d0 \uc788\ub294 start()\ub85c \uc810\ud504\n        call start\nspin:\n        j spin                          # start()\ub294 \uc808\ub300 \ub9ac\ud134\ud558\uba74 \uc548\ub418\ubbc0\ub85c \ud639\uc2dc \ub9ac\ud134\ud588\uc744\ub54c cpu\uac00 \uba48\ucd94\uc9c0 \uc54a\ub3c4\ub85d \ubb34\ud55c \ub8e8\ud504\ub97c \ub454\uac83.\n</code></pre> <pre><code>stack0:  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2190 \uc2a4\ud0dd \ubc14\ub2e5\n         \u2502                    \u2502\n         \u2502      \uc2a4\ud0dd           \u2502\n         \u2502                    \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2190 sp \uc124\uc815 (\ucd5c\uc0c1\ub2e8 = stack0 + STACK_SIZE)\n</code></pre></p>"},{"location":"xv6-riscv/#m-s-timer-kernelstartc","title":"&gt; M-&gt;S \uc804\ud658, timer \uc138\ud305 kernel/start.c","text":"<p><pre><code>#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"defs.h\"\n\nvoid main();\nvoid timerinit();\n\n// entry.S\ub294 \uac01 CPU\ub9c8\ub2e4 \ud558\ub098\uc758 \uc2a4\ud0dd \ud544\uc694.\n__attribute__ ((aligned (16))) char stack0[4096 * NCPU];\n\n// entry.S\ub294 \uc5ec\uae30 stack0\uc758 M \ubaa8\ub4dc\ub85c \uc810\ud504\ud568.\nvoid\nstart()\n{\n  // RISC-V\uc5d0\uc11c\ub294 U(\uc720\uc800) S(\ucee4\ub110) M(\ucd5c\uc0c1\uc704)\uac00 \uc788\ub2e4\ub294\uac70 \uae30\uc5b5\ud560\uac70\uc784.\n  // \uc9c0\uae08\uc774 \uadf8 machine mode.\n\n\n  // mret(machine mode return) \ud6c4 S \ubaa8\ub4dc\ub85c \uc810\ud504\ud560 \uc218 \uc788\uac8c \uc900\ube44.\n  // MPP(machine previous privilege mode)\ube44\ud2b8 = \uadf8 \uc774\uc804 \ubaa8\ub4dc\uac00 \uc5b4\ub514\ub0d0 \uc800\uc7a5. 00\uc740 U, 01\uc740 S, 11\uc740 M\n  unsigned long x = r_mstatus();        // \ud604\uc7ac\uc758 mstatus \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 \uc77d\uc5b4\uc11c x\uc5d0 \uc800\uc7a5. r\uc740 read\n                                        // x = 0x 0000 000a bc12 3800 (\uc608\uc2dc)\n  x &amp;= ~MSTATUS_MPP_MASK;               // MSTATUS_MPP_MASK = MPP \ubd80\ubd84\uc778 11,12\ube44\ud2b8 \ub9c8\uc2a4\ud06c\n                                        // 11\uc744 11\ube44\ud2b8\uc5d0 \uc124\uc815, \ub530\ub77c\uc11c 0x 0000 0000 0000 1800\n                                        // ~MSTATUS_MPP_MASK\ub294 0x FFFF FFFF FFFF E7FF\n                                        // \uc989 \uc774\uac74 MPP \ube44\ud2b8(11,12)\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud574\ub77c\n  x |= MSTATUS_MPP_S;                   // MSTATUS_MPP_S = S\ubaa8\ub4dc\ub97c \uc758\ubbf8\ud558\ub294 \uac12.\n                                        // 01\uc744 11\ube44\ud2b8\uc5d0 \uc124\uc815, \ub530\ub77c\uc11c 0x 0000 0000 0000 0800\n                                        // \uc989 \uc774\uac74 MPP \ube44\ud2b8\ub97c 01(S\ubaa8\ub4dc)\ub85c \uc124\uc815\ud574\ub77c\n  w_mstatus(x);                         // \uc870\uc791\ud55c \uac12\uc744 \ub2e4\uc2dc mstatus\uc5d0 \uae30\ub85d. w\ub294 write\n\n  // MEPC \ub808\uc9c0\uc2a4\ud130 = mret\uc2dc \ubcf5\uadc0\ud560 pc\ub97c \ub2f4\uc74c(\uc8fc\ub85c main. S \ubaa8\ub4dc\uc758 \ucee4\ub110 \uc9c4\uc784\uc810)\n  w_mepc((uint64)main);\n\n  // \uc9c0\uae08\uc740 MMU(\uac00\uc0c1 \uba54\ubaa8\ub9ac) \ub044\uace0 \ubb3c\ub9ac \uc8fc\uc18c \ubaa8\ub4dc\ub85c \uc791\ub3d9\n  w_satp(0);\n\n  // 16\uac1c\uc758 \uc608\uc678 \ub808\uc9c0\uc2a4\ud130, 16\uac1c\uc758 \uc778\ud130\ub7fd\ud2b8 \ub808\uc9c0\uc2a4\ud130\ub97c \ubaa8\ub450 S \ubaa8\ub4dc\ub85c \ub118\uae30\uae30 \uc704\ud55c \ud568\uc218.\n  // 1111 1111 1111 1111 16\uac1c\uc758 \ube44\ud2b8\uc5d0 \ub300\ud574 \uc804\ubd80.\n  w_medeleg(0xffff);\n  w_mideleg(0xffff);\n  // S \ubaa8\ub4dc\uc5d0\uc11c \ud5c8\uc6a9\ud560 \uc778\ud130\ub7fd\ud2b8 \uc885\ub958 \uc124\uc815.\n  // supervisor interrupt enable \ub808\uc9c0\uc2a4\ud130 \ud604\uc7ac \uac12\uc744 \uc77d\uace0 or \uc5f0\uc0b0\uc73c\ub85c 3\uac1c \uc778\ud130\ub7fd\ud2b8 \ucd94\uac00.\n  // SEIE: \uc678\ubd80 \uc778\ud130\ub7fd\ud2b8, STIE: \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8, SSIE: \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\n  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);      // \ud604\uc7ac \uc124\uc815\uac12\uc744 \uc77d\uace0 \uac01 \ube44\ud2b8\ub97c 1\ub85c \ub9cc\ub4e4\uc5b4 \uc800\uc7a5\n\n  // S \ubaa8\ub4dc\uac00 \uba54\ubaa8\ub9ac \uc811\uadfc \uac00\ub2a5\ud558\ub3c4\ub85d PMP(physical memory protection) \uc124\uc815\n  w_pmpaddr0(0x3fffffffffffffull);      // \ucd5c\ub300 \uba54\ubaa8\ub9ac \uc8fc\uc18c 0x 3f ffff ffff ffff * \ud558\ub098\ub2f9 4\ubc14\uc774\ud2b8\n  w_pmpcfg0(0xf);                       // \ubaa8\ub4e0 \uad8c\ud55c(RWX)\uc744 \ubd80\uc5ec\n\n  // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \uc124\uc815\n  timerinit();\n\n  // tp \ub808\uc9c0\uc2a4\ud130\uc5d0 hartid \uc800\uc7a5. cpuid()\ud568\uc218\uac00 \uc774\ub97c \ucc38\uc870\ud568.\n  int id = r_mhartid();\n  w_tp(id);\n\n  // mret \uba85\ub839\uc5b4\ub85c S\ubaa8\ub4dc\ub85c \uc804\ud658\ud558\uace0 main\uc73c\ub85c \uc810\ud504\n  asm volatile(\"mret\");\n}\n\n\nvoid\ntimerinit()\n{\n  // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud65c\uc131\ud654\n  // machine interrupt enable register\n  // STIE(spuervisor timer interrupt enable): \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\n  w_mie(r_mie() | MIE_STIE);            // \ud604\uc7ac \uc124\uc815\uac12\uc744 \uc77d\uace0 5\ubc88 \ube44\ud2b8\ub97c 1\ub85c \ub9cc\ub4e4\uc5b4 \uc800\uc7a5\n\n  // sstc \ud655\uc7a5 \ud65c\uc131\ud654\n  // \uae30\uc874\uc5d0\ub294 M \ubaa8\ub4dc\uc5d0\uc11c\ub9cc mtimecmp\ub97c \uc124\uc815\ud560 \uc218 \uc788\uc5c8\uc9c0\ub9cc sstc\uac00 \ud65c\uc131\ud654\ub418\uba74 S\ubaa8\ub4dc\ub3c4 stimecpm \uc0ac\uc6a9\uac00\ub2a5\n  w_menvcfg(r_menvcfg() | (1L &lt;&lt; 63));  // 1L &lt;&lt; 63\uc774 sstc\ub97c \ud65c\uc131\ud654\ud568\n\n  // mcounteren \ub808\uc9c0\uc2a4\ud130\ub294 \uc5b4\ub5a4 \uce74\uc6b4\ud130\ub97c s\ubaa8\ub4dc\uc5d0\uc11c \uc77d\uc744 \uc218 \uc788\uac8c \ud5c8\uc6a9\ud560\uc9c0 \uacb0\uc815\n  // 0\ubc88\uc9f8 \ube44\ud2b8\ub294 \uc0ac\uc774\ud074 \uc218 \uad00\ub828, 1\ube44\ud2b8\ub294 \uc2dc\uac04 \uce74\uc6b4\ud130, 2\ube44\ud2b8\ub294 \uba85\ub839\uc5b4 \uc2e4\ud589 \uc218\ub97c \uc758\ubbf8.\n  w_mcounteren(r_mcounteren() | 2);     // 1\ubc88\uc9f8 \ube44\ud2b8\ub97c \ud0b4 -&gt; \uc2dc\uac04 \uce74\uc6b4\ud130 \ud5c8\uc6a9\n\n  // S\ubaa8\ub4dc timecompare \ud0c0\uc774\uba38 \ube44\uad50 \ub808\uc9c0\uc2a4\ud130\n  // stimecmp\ubcf4\ub2e4 \ucee4\uc9c0\uba74 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\n  w_stimecmp(r_time() + 1000000);       // \ud604\uc7ac \uc2dc\uac04+100\ub9cc tick(1\ucd08)\uc73c\ub85c stimecmp \uc124\uc815\n}\n</code></pre> \ucc38\uace0\ub85c \ud0c0\uc774\uba38\ub294 \uc720\uc77c\ud558\uac8c cpu \uc548\uc5d0 \uc788\ub294 \uc21c\uc218 \ud558\ub4dc\uc6e8\uc5b4 \ud0c0\uc774\uba38\ub85c, M\ubaa8\ub4dc \uc18c\uc18d \uc790\uc6d0\uc774\uc790 \ubaa8\ub4e0 \uc2a4\ucf00\uc904\ub9c1\uc758 \uae30\ubc18\uc774\uae30\uc5d0 \uc5ec\uae30\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4.</p>"},{"location":"xv6-riscv/#kernelmainc","title":"&gt; \ucee4\ub110 \ucd08\uae30\ud654 \ub8e8\ud2f4 kernel/main.c","text":"<pre><code>#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"defs.h\"\n\nvolatile static int started = 0;        // \ubd80\ud2b8 hart\uac00 \ucd08\uae30\ud654 \ub05d\ub0ac\ub294\uc9c0 \ud45c\uc2dc\ud558\ub294 \ud50c\ub798\uadf8\n                                        // volatile: \ucef4\ud30c\uc77c\ub7ec\uac00 \ucd5c\uc801\ud654\ub85c \uc0dd\ub7b5\ud558\uc9c0 \ub9d0\uace0 \uaf2d \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc77d\uac8c \ud568\n\nvoid\nmain()\n{\n  if(cpuid() == 0){                     // cpu0 = \ubd80\ud2b8 hart\ub9cc\uc774 \uc804\uccb4 \uc2dc\uc2a4\ud15c \ucd08\uae30\ud654\ub97c \ub9e1\uc74c\n    consoleinit();                      // UART, printf, getc \ub4f1 \ucf58\uc194 \uc785\ucd9c\ub825 \ucd08\uae30\ud654\n    printfinit();                       // printf \ub0b4\ubd80 \ubc84\ud37c \ucd08\uae30\ud654\n    printf(\"\\n\");\n    printf(\"xv6 kernel is booting\\n\");\n    printf(\"\\n\");\n    kinit();                            // \ubb3c\ub9ac \uba54\ubaa8\ub9ac \ud398\uc774\uc9c0 \ud560\ub2f9\uae30 \ucd08\uae30\ud654\n    kvminit();                          // \ucee4\ub110 \uc804\uc6a9 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc0dd\uc131\n    kvminithart();                      // \ud604\uc7ac \ud558\ud2b8\uc5d0 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc801\uc6a9. MMU \ud65c\uc131\ud654\n    procinit();                         // \ud504\ub85c\uc138\uc2a4 \ud14c\uc774\ube14 \ucd08\uae30\ud654\n    trapinit();                         // trap \uad00\ub828 \uc804\uc5ed \uc124\uc815. \ud2b8\ub7a9 \ud578\ub4e4\ub7ec vector table \uc900\ube44\n    trapinithart();                     // \ud574\ub2f9 hart\uc5d0 \ud2b8\ub7a9 \ud578\ub4e4\ub7ec \ubca1\ud130 \uc8fc\uc18c \ub4f1\ub85d\n    plicinit();                         // \ud50c\ub7ab\ud3fc \ub808\ubca8 interrupt controller \ucd08\uae30\ud654\n    plicinithart();                     // \ud604\uc7ac \ud558\ud2b8\uc5d0 \uc5f0\uacb0\ub41c \uc778\ud130\ub7fd\ud2b8\ub97c \ud65c\uc131\ud654\n    binit();                            // \ube14\ub85d \ubc84\ud37c \uce90\uc2dc \ucd08\uae30\ud654\n    iinit();                            // inode \ud14c\uc774\ube14 \ucd08\uae30\ud654\n    fileinit();                         // \uc804\uc5ed \ud30c\uc77c \ub514\uc2a4\ud06c\ub9bd\ud130 \ud14c\uc774\ube14 \ucd08\uae30\ud654\n    virtio_disk_init();                 // qemu \uac00\uc0c1 \ub514\uc2a4\ud06c \uc7a5\uce58 \ucd08\uae30\ud654\n    userinit();                         // \ucd5c\ucd08 \uc720\uc800 \ud504\ub85c\uc138\uc2a4\ub97c \uc0dd\uc131\n    __sync_synchronize();               // \uba54\ubaa8\ub9ac \uc21c\uc11c\ub97c \uac15\uc81c \uc815\ub82c\n    started = 1;                        // \ud50c\ub798\uadf8 1\ub85c\n  } else {                              // \ub098\uba38\uc9c0 \ud558\ud2b8\ub294\n    while(started == 0)                 // \ubd80\ud2b8 \ud558\ud2b8\uac00 started = 1 \ud574\uc8fc\uae30\uae4c\uc9c0 \ub300\uae30\ud558\ub294 \ub8e8\ud504\n      ;\n    __sync_synchronize();               // \uba54\ubaa8\ub9ac \uc21c\uc11c\ub97c \uac15\uc81c \uc815\ub82c\n    printf(\"hart %d starting\\n\", cpuid());\n    kvminithart();                      // \ud604\uc7ac \ud558\ud2b8\uc5d0 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc801\uc6a9. MMU \ud65c\uc131\ud654\n    trapinithart();                     // \ud574\ub2f9 hart\uc5d0 \ud2b8\ub7a9 \ud578\ub4e4\ub7ec \ubca1\ud130 \uc8fc\uc18c \ub4f1\ub85d\n    plicinithart();                     // \ud604\uc7ac \ud558\ud2b8\uc5d0 \uc5f0\uacb0\ub41c \uc778\ud130\ub7fd\ud2b8\ub97c \ud65c\uc131\ud654\n  }\n\n  scheduler();                          // \ubaa8\ub4e0 cpu\uac00 \uc2a4\ucf00\uc904\ub7ec\uc5d0 \uc9c4\uc785\ud558\uc5ec \ud504\ub85c\uc138\uc2a4 \ub8e8\ud504  \n}\n</code></pre>"},{"location":"xv6-riscv/#_2","title":"&gt; \ubaa8\ub4dc \uc804\ud658","text":"<p>mret : M-&gt;S mstatus.MPP\ub97c \ubcf4\uace0 \ub2e4\uc74c \ubaa8\ub4dc\ub97c \uacb0\uc815 MPP=00(U\ubaa8\ub4dc) MPP=01(S\ubaa8\ub4dc) MPP=11(M\ubaa8\ub4dc) mepc\uc5d0 \uc800\uc7a5\ub41c \uc8fc\uc18c(main)\ub85c \uc810\ud504</p> <p>sret : S-&gt;U sstatus.SPP\uc744 \ubcf4\uace0 \ub2e4\uc74c \ubaa8\ub4dc\ub97c \uacb0\uc815 SPP=0(U\ubaa8\ub4dc) SPP=1(S\ubaa8\ub4dc) sepc\uc5d0 \uc800\uc7a5\ub41c \uc8fc\uc18c(\uc720\uc800 \uc571)\ub85c \uc810\ud504 \uc720\uc800 \uc571 \uc2e4\ud589 \uc2dc SPP=0, sepc=\uc720\uc800\ucf54\ub4dc, sret();</p> <p>trap : U-&gt;S \uc9c1\uc811\uc801\uc73c\ub85c \uc0c1\uc704 \ubaa8\ub4dc\ub85c \ubabb\uc62c\ub77c\uac00\uc9c0\ub9cc \uc608\uc678 \ubc1c\uc0dd\uc2dc.(ecall) stvec\uc5d0 \ub4f1\ub85d\ub41c trap handler\ub85c \uc810\ud504. SPP=U\ubaa8\ub4dc. sepc\uc5d0 \ubcf5\uadc0 \uc8fc\uc18c \uc800\uc7a5\ub428</p> <p>trap\uc774 \uc5b8\uc81c \ubc1c\uc0dd\ud558\ub098\uc694? \uc608\uc678 : ecall, \uc798\ubabb\ub41c \uc8fc\uc18c \uc811\uadfc \uc778\ud130\ub7fd\ud2b8 : \ud0c0\uc774\uba38, \uc7a5\uce58I/O</p> <pre><code>[U \ubaa8\ub4dc] \uc720\uc800 \ucf54\ub4dc \uc2e4\ud589 \uc911\n    \u2193\n  trap \ubc1c\uc0dd (ex. ecall, timer)\n    \u2193\n[\ud558\ub4dc\uc6e8\uc5b4]\n  sepc \u2190 \ubcf5\uadc0 \uc8fc\uc18c \uc800\uc7a5\n  sstatus \u2190 \ud604\uc7ac \ubaa8\ub4dc \uc800\uc7a5\n  PC \u2190 stvec \uc5d0 \ub4f1\ub85d\ub41c handler\ub85c \uc810\ud504\n    \u2193\n[S \ubaa8\ub4dc] \ucee4\ub110\uc758 trap handler \ub3d9\uc791\n</code></pre>"},{"location":"xv6-riscv/#makefile","title":"&gt; makefile","text":""},{"location":"xv6-riscv/#kerneltrapc","title":"&gt; kernel/trap.c","text":"<p>trap handler : trap(\uc778\ud130\ub7fd\ud2b8/\uc608\uc678/\uc2dc\uc2a4\ud15c\ucf5c)\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c \uc2e4\ud589\ub418\ub294 C \ud568\uc218 trampoline : \uc720\uc800 &lt;-&gt; \ucee4\ub110 \ubaa8\ub4dc \uc804\ud658 \uc2dc \uc0ac\uc6a9\ub418\ub294 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \ube14\ub85d stvec : trap \ubc1c\uc0dd \uc2dc jump \ud560 \uc8fc\uc18c\ub97c \uc800\uc7a5\ud558\ub294 CSR \ub808\uc9c0\uc2a4\ud130</p> <pre><code>#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"spinlock.h\"\n#include \"proc.h\"\n#include \"defs.h\"\n\nstruct spinlock tickslock;              // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ubcf4\ud638\uc6a9 \uc2a4\ud540\ub77d\nuint ticks;                             // \uc2dc\uc2a4\ud15c \ud2f1 \uc218(\uc2dc\uacc4 \ub2e8\uc704)\n\nextern char trampoline[], uservec[], userret[]; // trampline \uc8fc\uc18c \uc2ec\ubcfc\n\nvoid kernelvec();                             // \ucee4\ub110 \ubca1\ud130 \uc5b4\uc148\ube14\ub9ac \ub8e8\ud2f4\n\nextern int devintr();                         // \ub514\ubc14\uc774\uc2a4 \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac \ud568\uc218\n\n// S \ubaa8\ub4dc\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac \ub8e8\ud2f4\nvoid\ntrapinit(void)\n{\n  initlock(&amp;tickslock, \"time\");         // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\uc6a9 ticks \uac12\uc744 \ubcf4\ud638\ud558\uae30 \uc704\ud55c \ub77d \ucd08\uae30\ud654\n}\n\nvoid\ntrapinithart(void)\n{\n  w_stvec((uint64)kernelvec);           // \ud604\uc7ac \ucf54\uc5b4\uc758 stvec\uc5d0 kernelvec\ub77c\ub294 c\ud568\uc218 \uc8fc\uc18c\ub97c \uc368\ub123\uc74c\n                                        // stvec = supervisor trap vector base address register.\n                                        // s \ubaa8\ub4dc\uc5d0\uc11c trap\uc774 \ubc1c\uc0dd\ud588\uc744\ub54c \uc5b4\ub514\uc11c\ubd80\ud130 \ucc98\ub9ac\ub97c \uc2dc\uc791\ud560\uc9c0 \uc8fc\uc18c\ub97c \ub2f4\ub294 \ub808\uc9c0\uc2a4\ud130\n}\n\n\n// \uc720\uc800 \ud504\ub85c\uadf8\ub7a8\uc774 trap \uac78\ub9b4\ub54c\nvoid\nusertrap(void)\n{\n  int which_dev = 0;                    // \ub514\ubc14\uc774\uc2a4 \uc778\ud130\ub7fd\ud2b8 \uc2dd\ubcc4\uc6a9 \ubcc0\uc218\n\n  if((r_sstatus() &amp; SSTATUS_SPP) != 0)      // \uc9c4\uc9dc \uc720\uc800 \ubaa8\ub4dc\uc5d0\uc11c \uc628\uac8c \ub9de\ub294\uc9c0 \ud655\uc778\n    panic(\"usertrap: not from user mode\");\n\n  w_stvec((uint64)kernelvec);               // trap\uc774 \ub4e4\uc5b4\uc654\uc73c\ub2c8 stvec\uc744 \ucee4\ub110\ubaa8\ub4dc\ub85c \uc804\ud658\n\n  struct proc *p = myproc();                // \ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4 \ud3ec\uc778\ud130\n\n  p-&gt;trapframe-&gt;epc = r_sepc();             // \uc720\uc800\uc758 pc\ub97c \uc800\uc7a5 (\ubcf5\uadc0 \uc2dc \ud544\uc694)\n\n  if(r_scause() == 8){                      // 8\ubc88\uc740 \uc2dc\uc2a4\ud15c \ucf5c(ecall)\n\n    if(killed(p))\n      exit(-1);                             // \uc774\ubbf8 \uc8fd\uc740 \ud504\ub85c\uc138\uc2a4\uba74 \uc989\uc2dc \uc885\ub8cc\n\n    p-&gt;trapframe-&gt;epc += 4;                 // pc+4 (\ub2e4\uc74c \uba85\ub839\uc5b4)\n\n    intr_on();                              // syscall \ub3c4\uc911 \uc778\ud130\ub7fd\ud2b8 \ud5c8\uc6a9\n\n    syscall();                              // \uc2dc\uc2a4\ud15c \ucf5c \ud578\ub4e4\ub9c1\n  } else if((which_dev = devintr()) != 0){\n\n  } else {                                  // \uc54c \uc218 \uc5c6\ub294 \uc608\uc678 \ubc1c\uc0dd\n    printf(\"usertrap(): unexpected scause 0x%lx pid=%d\\n\", r_scause(), p-&gt;pid);\n    printf(\"            sepc=0x%lx stval=0x%lx\\n\", r_sepc(), r_stval());\n    setkilled(p);                           // \ud504\ub85c\uc138\uc2a4 \uc885\ub8cc \uc608\uc57d\n  }\n\n  if(killed(p))\n    exit(-1);\n\n  if(which_dev == 2)                        // 2\ubc88\uc740 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\n    yield();                                // CPU\ub97c \uc591\ubcf4\ud568\n\n  usertrapret();                            // \uc720\uc800 \uacf5\uac04 \ubcf5\uadc0 \uc900\ube44\n}\n\n// \uc720\uc800 \ubaa8\ub4dc\ub85c \ubcf5\uadc0\ud560 \uc900\ube44\nvoid\nusertrapret(void)\n{\n  struct proc *p = myproc();\n\n  intr_off();                                 // \ubcf5\uadc0 \ub3c4\uc911 trap \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \uc778\ud130\ub7fd\ud2b8 \ube44\ud65c\uc131\ud654\n\n  // stvec\uc744 \ub2e4\uc2dc \ub2e4\uc2dc trampoline\uc758 uservec\uc73c\ub85c \uc124\uc815\n  uint64 trampoline_uservec = TRAMPOLINE + (uservec - trampoline);\n  w_stvec(trampoline_uservec);\n\n  // uservec\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc815\ubcf4\ub4e4\uc744 trapframe\uc5d0 \uc138\ud305\n  p-&gt;trapframe-&gt;kernel_satp = r_satp();         // \ucee4\ub110 \ud398\uc774\uc9c0 \ud14c\uc774\ube14\n  p-&gt;trapframe-&gt;kernel_sp = p-&gt;kstack + PGSIZE; // \ucee4\ub110 \uc2a4\ud0dd \ucd5c\uc0c1\ub2e8\n  p-&gt;trapframe-&gt;kernel_trap = (uint64)usertrap; // \ub2e4\uc2dc trap \ub4e4\uc5b4\uc62c \ub54c \uc2e4\ud589\ud560 \ud568\uc218\n  p-&gt;trapframe-&gt;kernel_hartid = r_tp();         // \ud558\ud2b8 \ubc88\ud638\n\n\n  // \uc720\uc800 \ubaa8\ub4dc \ubcf5\uadc0\ub97c \uc704\ud55c sstatus \uc124\uc815\n  unsigned long x = r_sstatus();\n  x &amp;= ~SSTATUS_SPP; // SPP=0(U)\ub85c\n  x |= SSTATUS_SPIE; // SPIE=1 \uc720\uc800 \ubaa8\ub4dc\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ud5c8\uc6a9\n  w_sstatus(x);\n\n  // \uc2e4\ud589 \uc7ac\uac1c \uc704\uce58 \uc124\uc815\n  w_sepc(p-&gt;trapframe-&gt;epc);\n\n  // \uc720\uc800 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc124\uc815\n  uint64 satp = MAKE_SATP(p-&gt;pagetable);\n\n  // trampoline \uc0c1\ub2e8\uc5d0 \uc788\ub294 userret()\uc744 \ud638\ucd9c\ud558\uc5ec \uc2e4\uc81c \ubcf5\uadc0 \uc218\ud589\n  uint64 trampoline_userret = TRAMPOLINE + (userret - trampoline);\n  ((void (*)(uint64))trampoline_userret)(satp);\n}\n\n// \ucee4\ub110 \ubaa8\ub4dc\uc5d0\uc11c trap \ubc1c\uc0dd \uc2dc \ud638\ucd9c\nvoid \nkerneltrap()\n{\n  int which_dev = 0;\n  uint64 sepc = r_sepc();\n  uint64 sstatus = r_sstatus();\n  uint64 scause = r_scause();\n\n  if((sstatus &amp; SSTATUS_SPP) == 0)\n    panic(\"kerneltrap: not from supervisor mode\");\n  if(intr_get() != 0)\n    panic(\"kerneltrap: interrupts enabled\");\n\n  if((which_dev = devintr()) == 0){\n    // \uc6d0\uc778\uc744 \uc54c \uc218 \uc5c6\ub294 \uc778\ud130\ub7fd\ud2b8\n    printf(\"scause=0x%lx sepc=0x%lx stval=0x%lx\\n\", scause, r_sepc(), r_stval());\n    panic(\"kerneltrap\");\n  }\n\n  if(which_dev == 2 &amp;&amp; myproc() != 0)       // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\uba74 CPU \uc591\ubcf4\n    yield();\n\n  // trap \uc804 \ub808\uc9c0\uc2a4\ud130 \ubcf5\uc6d0\n  w_sepc(sepc);\n  w_sstatus(sstatus);\n}\n\n// \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\nvoid\nclockintr()\n{\n  if(cpuid() == 0){                     // 0\ubc88 \ud558\ud2b8\ub9cc ticks \uc99d\uac00 \ubc0f wakeup. 0\ubc88 \ud558\ud2b8\ub294 \ucd08\uae30\ud654 \ub2f4\ub2f9\uc778 \ub3d9\uc2dc\uc5d0 \uc804\uc5ed \uc2dc\uacc4(ticks) \uae30\uc900 \ud558\ud2b8\uc784.\n    acquire(&amp;tickslock);\n    ticks++;\n    wakeup(&amp;ticks);\n    release(&amp;tickslock);\n  }\n\n  // 100\ub9cc cpu \uc0ac\uc774\ud074 \ub4a4\uc5d0 \ub610 \uae68\uc6cc\uc918, \uc989 1 tick = 1 timer interrupt = 100Hz = \uc57d  10ms\n  w_stimecmp(r_time() + 1000000);\n}\n\n// \ub2e4\ub978 \ub514\ubc14\uc774\uc2a4\uba74 1, \ubaa8\ub974\uba74 0, \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\uba74 2\nint\ndevintr()\n{\n  uint64 scause = r_scause();       // scause \ub808\uc9c0\uc2a4\ud130. \ud604\uc7ac trap\uc758 \uc6d0\uc778\uc744 \ub098\ud0c0\ub0c4\n\n  // \uc678\ubd80 \uc778\ud130\ub7fd\ud2b8 (PLIC\uc744 \ud1b5\ud574 \ub4e4\uc5b4\uc624\ub294 \ub514\ubc14\uc774\uc2a4 \uc778\ud130\ub7fd\ud2b8)\n  if(scause == 0x8000000000000009L){      // \uc774 \uac12\uc774\uba74 Supervisor external interrupt\n\n    // \uc5b4\ub5a4 \uc7a5\uce58\uac00 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1c\uc0dd\uc2dc\ucf30\ub294\uc9c0 \ud655\uc778.\n    int irq = plic_claim();               // PLIC\uc5d0\uc11c IRQ \ubc88\ud638 \ud655\uc778\n\n    if(irq == UART0_IRQ){                 // UART(\uc2dc\ub9ac\uc5bc \ud1b5\uc2e0 \uc7a5\uce58)\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\n      uartintr();                         // UART \uad00\ub828 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \uc2e4\ud589\n    } else if(irq == VIRTIO0_IRQ){        // VirtIO \ub514\uc2a4\ud06c\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\n      virtio_disk_intr();                 // \ub514\uc2a4\ud06c \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \uc2e4\ud589\n    } else if(irq){                       // \uc54c \uc218 \uc5c6\ub294 \uc7a5\uce58\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\n      printf(\"unexpected interrupt irq=%d\\n\", irq);\n    }\n\n    if(irq)                               // \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac\uac00 \ub05d\ub0ac\uc74c\uc744 PLIC\uc5d0 \uc54c\ub9bc\n      plic_complete(irq);\n\n    return 1;                             // \uc7a5\uce58 \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac \uc644\ub8cc\n  } else if(scause == 0x8000000000000005L){   // \uc774 \uac12\uc774\uba74 Supervisor timer interrupt\n    clockintr();                           // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \uc2e4\ud589\n    return 2;                         // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac \uc644\ub8cc\n  } else {\n    return 0;                   // \uc54c \uc218 \uc5c6\ub294 \uc778\ud130\ub7fd\ud2b8\n  }\n}\n</code></pre>"}]}