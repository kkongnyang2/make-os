{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"\ud83d\udcda \ubaa9\ucc28","text":"<ul> <li>0. vm</li> <li>1. hardware</li> <li>2. kernel</li> <li>3. MMU</li> <li>4. trap</li> <li>5. PCB</li> <li>6. uart</li> <li>7. mkfs</li> <li>8. mini-os</li> <li>9. build</li> </ul>"},{"location":"0-vm/","title":"vm","text":""},{"location":"0-vm/#qemu","title":"qemu\uc758 \uad6c\uc870\ub97c \uc54c\uc544\ubcf4\uc790","text":""},{"location":"0-vm/#_1","title":"\ubaa9\ud45c: \uac00\uc0c1\uba38\uc2e0 \uc774\ud574","text":"<p>\uc791\uc131\uc790: kkongnyang2 \uc791\uc131\uc77c: 2025-06-20</p>"},{"location":"0-vm/#0","title":"0&gt; \uac1c\ub150 \uc815\ub9ac","text":"<p>\uac00\uc0c1\uba38\uc2e0? \ubb3c\ub9ac\uc801 \ucef4\ud4e8\ud130 \uc704\uc5d0\uc11c \ub3cc\uc544\uac00\ub294 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \ucef4\ud4e8\ud130</p> <p>\ud558\uc774\ud37c\ubc14\uc774\uc800 -&gt; \uadf8 \uac00\uc9dc \ucef4\ud4e8\ud130\ub97c \uad00\ub9ac\ud558\ub294 \uad00\ub9ac\uc790</p>"},{"location":"0-vm/#1","title":"1&gt; \ubd84\ub958","text":"<p>\ud558\uc774\ud37c\ubc14\uc774\uc800 \uc704\uce58</p> <p>type 1. bare-metal \ud558\ub4dc\uc6e8\uc5b4 \ubc14\ub85c \uc704\uc5d0 \ud558\uc774\ud37c\ubc14\uc774\uc800\uac00 \ub3d9\uc791. os \uc124\uce58 \uc5c6\uc774 \ubc14\ub85c vm \uc2e4\ud589 \uac00\ub2a5</p> <p>[\ubb3c\ub9ac \ucef4\ud4e8\ud130]  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502        Hypervisor          \u2502  \u2190 \ud558\uc774\ud37c\ubc14\uc774\uc800 (Xen, VMware ESXi, Hyper-V)  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502  \u2502 VM #1      \u2502 \u2502 VM #2 \u2502 \u2502  \u2502  \u2502 Ubuntu     \u2502 \u2502 Win10 \u2502 \u2502  \u2190 \uac00\uc0c1\uba38\uc2e0 (\uac8c\uc2a4\ud2b8 OS + \ucee4\ub110)  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>type 2. hosted \uc77c\ubc18 os \uc704\uc5d0\uc11c \ud504\ub85c\uadf8\ub7a8\ucc98\ub7fc \uc2e4\ud589\ub418\ub294 \ud558\uc774\ud37c\ubc14\uc774\uc800</p> <p>[\ubb3c\ub9ac \ucef4\ud4e8\ud130]  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502       Host OS              \u2502  \u2190 \uc77c\ubc18 \ub370\uc2a4\ud06c\ud0d1 OS  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502  \u2502 Hypervisor           \u2502  \u2502  \u2190 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uae30\ubc18 (QEMU, VirtualBox)  \u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502  \u2502  \u2502  \u2502  \u2502 VM #1      \u2502      \u2502  \u2502  \u2502  \u2502  \u2502 Fedora     \u2502      \u2502  \u2502  \u2190 \uac8c\uc2a4\ud2b8 OS  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502  \u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>\ubcc4\ucca8. \ucee8\ud14c\uc774\ub108 \ubaa8\ub450 \ud638\uc2a4\ud2b8 \ucee4\ub110 \uacf5\uc720</p> <p>[\ubb3c\ub9ac \ucef4\ud4e8\ud130]  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502     Host OS (\ub9ac\ub205\uc2a4)        \u2502  \u2190 \ucee4\ub110 \uacf5\uc720  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502  \u2502 \ucee8\ud14c\uc774\ub108 \ub7f0\ud0c0\uc784       \u2502  \u2502  \u2190 Docker  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502     \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510  \u2502     \u2502 Container\u2502 \u2502 Container\u2502  \u2190 \uac00\ubcbc\uc6b4 \uaca9\ub9ac \ud658\uacbd  \u2502     \u2502  Nginx   \u2502 \u2502  Python  \u2502  \u2190 rootfs + \ub77c\uc774\ube0c\ub7ec\ub9ac + \uc571  \u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>cpu \uac00\uc0c1\ud654 \uae30\ubc95</p> <p>trap-and-emulate \ud2b9\uad8c \uba85\ub839 -&gt; \ud2b8\ub7a9 \ubc1c\uc0dd -&gt; \ud558\uc774\ud37c\ubc14\uc774\uc800\uac00 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub85c \uc5d0\ubbac\ub808\uc774\uc158. \uc27d\uac8c \ub9d0\ud574 \uc6b8\uba74 \uc5b4\ub978\uc774 \ub300\uc2e0 \ucc98\ub9ac.</p> <p>binary translation \uc2e4\ud589 \ucf54\ub4dc\ub97c \ub3d9\uc801 \uc7ac\uc791\uc131. \uc27d\uac8c \ub9d0\ud574 \uc548\uc6b8\ub3c4\ub85d \ubbf8\ub9ac \uc0ac\uc804 \uc791\uc5c5.</p> <p>HW-assist intel VT-x, AMD-V \ub4f1 \ud558\ub4dc\uc6e8\uc5b4\uac00 \uba85\ub839-\ud398\uc774\uc9c0\ud14c\uc774\ube14 \uac00\uc0c1\ud654 \uc9c0\uc6d0. \uc27d\uac8c \ub9d0\ud574 \uc544\uc774 \uc804\uc6a9\ubc29\uc774 \ub530\ub85c \uc788\uc74c.</p> <p>\uc7a5\uce58 \uac00\uc0c1\ud654</p> <p>\ud480 \uc5d0\ubbac\ub808\uc774\uc158 qemu\uac00 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub85c \uac00\uc0c1 \ud558\ub4dc\uc6e8\uc5b4 \uad6c\ud604. \uc27d\uac8c \ub9d0\ud574 \uac00\uc9dc \uc218\ucde8\ud568</p> <p>\ud30c\ub77c\uac00\uc0c1\ud654 \uac8c\uc2a4\ud2b8\uac00 virtio \ud1b5\uc2e0. \uc804\uc6a9 \uace0\uc18d \ud0dd\ubc30 \uc804\uc6a9</p> <p>\ud328\uc2a4-\uc2a4\ub8e8 \uc2e4\uc81c \uc7a5\uce58 \uae30\ub2a5 \uc9c1\uc811 \ub118\uae40. \uc9d1 \uc5f4\uc1e0\ub97c \ud1b5\uc9f8\ub85c \uc90c.</p>"},{"location":"0-vm/#2","title":"2&gt; \uad6c\uc131\uc694\uc18c","text":"<p>vcpu \uc2e4\uc81c cpu \ucf54\uc5b4\uc640 \ub17c\ub9ac \ucf54\uc5b4 \ub9e4\ud551. \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce58, \ud0c0\ubbf8\uc5b4 \uc778\ud130\ub7fd\ud2b8, TLB flush \ub4f1. \u250c\u2500 Host CPU Core \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2026\uc2e4\ud589 \uc911\u2026                               \u2502 \u2502  (\ud638\uc2a4\ud2b8 \ucf54\ub4dc)                           \u2502 \u2502  \u2199 \u300cWorld-switch\u300d \u2198                   \u2502 \u2502  \uac8c\uc2a4\ud2b8 \ub808\uc9c0\uc2a4\ud130 \uc138\ud2b8 \ub85c\ub4dc              \u2502 \u2502  \uac8c\uc2a4\ud2b8 \ucf54\ub4dc \uc2e4\ud589 (user \u2192 kernel \u2192 \u2026)   \u2502 \u2502  VM-Exit (\ud2b8\ub7a9 \ubc1c\uc0dd)                    \u2502 \u2502  \u2026\ub2e4\uc2dc \ud638\uc2a4\ud2b8 \ucf54\ub4dc\u2026                     \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 world-switch= \ub808\uc9c0\uc2a4\ud130,TLB\ub97c \uc2f9 \ubc14\uafd4 \ub07c\uc6b0\ub294 \uc21c\uac04 \uc2a4\ucf00\uc904\ub7ec\uac00 \uc774\ubc88 \ud0c0\uc784\uc2ac\ub77c\uc774\uc2a4\ub294 vCPU #2\ub77c\uace0 \uacb0\uc815\ud558\uc5ec \uc2e4 cpu\uc5d0 \ud0dc\uc6b0\ub294 \ud615\uc2dd</p> <p>\uac00\uc0c1 \uba54\ubaa8\ub9ac nested page table</p> <p>\uac8c\uc2a4\ud2b8 \uac00\uc0c1 addr 0x7fff_1234    \u2502 (\uac8c\uc2a4\ud2b8 \ud398\uc774\uc9c0 \ud14c\uc774\ube14)          \u2190 xv6\uac00 \uc544\ub294 \uc138\uacc4    \u25bc \uac8c\uc2a4\ud2b8-\ubb3c\ub9ac addr 0x8010_1234    \u2502 (Nested page table / EPT)      \u2190 \ud558\uc774\ud37c\ubc14\uc774\uc800\uac00 \uc18d\uc784    \u25bc \ud638\uc2a4\ud2b8-\ubb3c\ub9ac addr 0x3c20_51234    \u2502 (MMU \uc2e4\uc81c DRAM)                \u2190 \uc9c4\uc9dc \ud558\ub4dc\uc6e8\uc5b4</p> <p>i/o \uac00\uc0c1\ud654 mmio \ud2b8\ub7a9, DMA \ub9ac\ub9f5, virtio ring buffer 1. \uac8c\uc2a4\ud2b8 \ucee4\ub110\uc774 store 0x10001014 &lt;- 0x1 (virtio \ub514\uc2a4\ud06c \ud050 \ub4f1\ub85d) 2. MMIO \uc8fc\uc18c\uc774\ubbc0\ub85c VM-Exit -&gt; QEMU\uc5d0\uac8c \ub514\uc2a4\ud06c \uc4f0\uc790 \uc694\uccad 3. QEMU\uac00 \ud638\uc2a4\ud2b8 \ud30c\uc77c(fs.img)\uc5d0 write -&gt; \uc644\ub8cc \ud6c4 \uac00\uc9dc \uc778\ud130\ub7fd\ud2b8 \uc7ac\uc8fc\uc785 4. \uac8c\uc2a4\ud2b8\uc5d0\uc11c ISR \uc2e4\ud589 -&gt; \uc2dc\uc2a4\ud15c\ucf5c\ub85c \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc4f0\uae30 \uc644\ub8cc \uc54c\ub9bc</p> <p>\uc774\ub54c virtio\ub294 2,3\ub2e8\uacc4\uc5d0\uc11c \ub9c1 \ubc84\ud37c/IOVRING\uc744 \uc368\uc11c \ud2b8\ub7a9 \ud69f\uc218\ub97c \ud655 \uc904\uc774\ub294 \ucd5c\uc801\ud654</p> <p>\uc2a4\ud1a0\ub9ac\uc9c0 \ub124\ud2b8\uc6cc\ud0b9 QCOW2\uac19\uc740 \uc774\ubbf8\uc9c0 \ud615\uc2dd</p>"},{"location":"0-vm/#3-qemu-kvm","title":"3&gt; QEMU-KVM \ud750\ub984","text":"<p>qemu? type2 \ud480 \uc5d0\ubbac\ub808\uc774\uc158 \ud558\uc774\ud37c\ubc14\uc774\uc800 kvm? HW-assist \ubc29\uc2dd \uc804\uc6a9 \ucee4\ub110 \ubaa8\ub4c8(type 1) \ud070 \ud2c0\uc740 qemu\ub97c \uc4f0\uace0 cpu \uac00\uc0c1\ud654\ub97c \ucd94\uac00\ub85c \uc9c4\ud589\ud558\uc5ec qemu+kvm \ubc29\uc2dd\uc73c\ub85c \ub9ce\uc774 \uc500.</p> <p>A. \ubd80\ud305 \uc804 <code>make qemu</code> qemu\uac00 risc-v virt \uba38\uc2e0\uc744 \uc0dd\uc131 -&gt; /dev/kvm\uc5d0 vCPU 3\uac1c \uc694\uccad B. vCPU \uc9c4\uc785 <code>hart 2 starting</code> kvm \ubaa8\ub4c8\uc774 KVM_RUN \uc9c4\uc785 -&gt; mepc=0x80000000 \ub85c\ub4dc. \uac8c\uc2a4\ud2b8 \uccab \uba85\ub839 \uc2e4\ud589 C. \uc2dc\uacc4 \uc778\ud130\ub7fd\ud2b8 <code>tick</code> RISC-V mtimecmp \ub9cc\ub8cc -&gt; \ud558\ub4dc\uc6e8\uc5b4\uac00 'supervisor timer interrupt' -&gt; VM-Exit -&gt; KVM\uac00 \uc778\ud130\ub7fd\ud2b8 \uc7ac\uc8fc\uc785 D. \uc2dc\uc2a4\ud15c\ucf5c <code>read</code> \uc0ac\uc6a9\uc790 \ud504\ub85c\uadf8\ub7a8\uc774 ecall -&gt; trap -&gt; xv6-kernel sys_open -&gt; I/O \uc694\uccad \uc0dd\uc131 E. \ub514\uc2a4\ud06c I/O virtio-blk MMIO \uc811\uadfc -&gt; VM-Exit -&gt; QEMU\uac00 fs.img\uc5d0 \ube14\ub85d read -&gt; \uc885\ub8cc IRQ \uc7ac\uc8fc\uc785 F. \ucf58\uc194 \ucd9c\ub825 <code>$ls</code> \uac8c\uc2a4\ud2b8\uac00 UART MMIO(0x10000000) write -&gt; QEMU\uac00 \ud638\uc2a4\ud2b8 stderr\ub85c \ubc14\ub85c \ud504\ub9b0\ud2b8 G. \ud638\uc2a4\ud2b8\ub85c \ubcf5\uadc0 \ub2e8\ucd95\ud0a4 Ctrl-a x \ub204\ub974\uba74 QEMU \uc885\ub8cc -&gt; vCPU context \uc800\uc7a5, \ud30c\uc77c flush \ud6c4 make \uc885\ub8cc</p> <p>cpu \uad8c\ud55c \ub808\ubca8</p> <p>x86\uc5d0\uc11c\ub294 Ring0(\ucee4\ub110) Ring3(\uc720\uc800) ARM\uc5d0\uc11c\ub294 EL0(\uc720\uc800) EL1(\ucee4\ub110) EL2(\ud558\uc774\ud37c\ubc14\uc774\uc800) EL3(\ubcf4\uc548) RISC-V\uc5d0\uc11c\ub294 U(\uc720\uc800) S(\ucee4\ub110) M(\ucd5c\uc0c1\uc704)</p> <p>\uac8c\uc2a4\ud2b8 OS -&gt; \uc9c1\uc811 CPU\uc5d0\uc11c \uc2e4\ud589 (EL1) \ud2b9\uad8c \uba85\ub839\uc5b4 -&gt; trap -&gt; EL2 -&gt; KVM -&gt; \uacb0\uacfc\ucc98\ub9ac -&gt; \ubcf5\uadc0</p>"},{"location":"1-hardware/","title":"h/w","text":""},{"location":"1-hardware/#xv6-riscv","title":"xv6-riscv\uc758 \ud558\ub4dc\uc6e8\uc5b4 \uad6c\uc870\ub97c \uc54c\uc544\ubcf4\uc790","text":""},{"location":"1-hardware/#soc","title":"\ubaa9\ud45c: SoC\uce69 \uc774\ud574","text":"<p>\uc791\uc131\uc790: kkongnyang2 \uc791\uc131\uc77c: 2025-06-25</p>"},{"location":"1-hardware/#0","title":"0&gt; \uad6c\uc870","text":"<p>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502                               SoC / \uce69 \uc804\uccb4                                \u2502 \u2502                                                                            \u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 CPU Core \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502         \u2502 \u2502  \u2502 \u2502L1 I$ \u2502\u2500\u2500\u25b6\u2502Fetch / BP \u2502\u2500\u2500\u25b6\u2502 Decode \u2502\u2500\u2500\u25b6\u2502 Rename \u2502\u2500\u2500\u2510         \u2502         \u2502 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502         \u2502         \u2502 \u2502  \u2502                                                   \u250c\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502         \u2502 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Reorder   \u2502         \u2502 \u2502  \u2502 \u2502L1 D$ \u2502\u25c0\u2500\u2500\u2502Load/Store \u2502\u25c0\u2500\u2500\u2502  TLB   \u2502\u2500\u2500\u25b6\u2502 MMU  \u2502 \u2502  Buffer   \u2502         \u2502 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502         \u2502 \u2502  \u2502              \u25b2           \u25b2             \u25b2            \u2502         \u2502         \u2502 \u2502  \u2502              \u2502           \u2502             \u2502            \u2502         \u2502         \u2502 \u2502  \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2534\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2510     \u2502         \u2502 \u2502  \u2502 \u2502 Int  \u2502   \u2502 SIMD \u2502   \u2502  FPU  \u2502   \u2502  ALU  \u2502   \u2502Branch   \u2502     \u2502         \u2502 \u2502  \u2502 \u2502 ALU  \u2502   \u2502/Vec  \u2502   \u2502        \u2502   \u2502 (INT) \u2502   \u2502Exec/Pred\u2502     \u2502         \u2502 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502         \u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502 \u2502            \u2502              \u2502                              \u2502                  \u2502 \u2502            \u2502              \u2502                      \uc778\ud130\ub7fd\ud2b8 \ub77c\uc778              \u2502 \u2502            \u2502              \u25bc                              \u2502                  \u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 System Interconnect / \ubc84\uc2a4 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502  \u2502   L2/L3 Cache   \u2502   DRAM Controller   \u2502   Coherent / Non-coherent NoC   \u2502\u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2502            \u2502                                                                \u2502 \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Memory-Mapped I/O (MMIO) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502  \u2502  UART \u2502 GPIO \u2502 SPI \u2502 I2C \u2502 Timer \u2502 Interrupt Ctrl \u2502 PCIe \u2502 \u2026            \u2502\u2502 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Legend:   I$ / D$ : Instruction / Data Cache   BP      : Branch Predictor   TLB     : Translation Lookaside Buffer   MMU     : Memory Management Unit</p>"},{"location":"1-hardware/#1-cpu-csr","title":"1&gt; CPU \ub0b4\ubd80 \uc720\ub2db(CSR)","text":"<p>\uc5f0\uc0b0\ube14\ub85d ALU, FPU /\ubaa8\ub4e0 \ubaa8\ub4dc \uc81c\uc5b4\ube14\ub85d MMU /M\ubaa8\ub4dc\uac00 \uaed0\ub2e4\ud0b4. S\ub098 U\ub294 \uc124\uc815\ub41c \ud14c\uc774\ube14 \ud558\uc5d0\uc11c \uc0ac\uc6a9 \uce90\uc2dc\ube14\ub85d L1/L2 Cache  \ud0c0\uc774\uba38\ube14\ub85d timer CSR /\uc6d0\ub798\ub294 M\ubaa8\ub4dc\ub9cc\uc774\uc9c0\ub9cc S\ub85c \ud655\uc7a5\ub428 \uc778\ud130\ub7fd\ud2b8\ube14\ub85d CLINT /M S \ubaa8\ub450</p> <p>\uc774\uac78 \ub3d9\uc791\ud558\ub294 \ubc29\ubc95. CSR\ub4e4 \ud65c\uc6a9. cpu \ucf54\uc5b4 \uc548\uc5d0 \ud558\ub4dc\uc6e8\uc5b4\ub85c \uc874\uc7ac\ud558\ub294 \ud2b9\uc218 \ub808\uc9c0\uc2a4\ud130\ub4e4 csrr rd, \ub85c \uc77d\uace0 \uc500 mstatus, sstatus : \ud2b9\uad8c \ubaa8\ub4dc, \uc778\ud130\ub7fd\ud2b8 \ud65c\uc131 \ud50c\ub798\uadf8 stvec, mtvec : trap/interrupt \ubca1\ud130 \uc8fc\uc18c satp : MMU \ub8e8\ud2b8 \ud398\uc774\uc9c0\ud14c\uc774\ube14 mtime, stimecmp : \uc0ac\uc774\ud074, \uce74\uc6b4\ud130, \ud0c0\uc774\uba38 \ube44\uad50 scause, sepc, stval : trap \uc6d0\uc778, \ubcf5\uadc0 pc, \uc624\ub958 \uac12"},{"location":"1-hardware/#2-cpu-mmio","title":"2&gt; CPU \uc678\ubd80 \uc720\ub2db(MMIO)","text":"<p>MMIO\ub4e4\uc740 \uadf8\ub0e5 \uc8fc\uc18c\ub97c \uc77d\uc73c\uba74 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \ub3d9\uc791 \uac00\ub2a5 lw rd, 0(xaddr) (\uc77c\ubc18 \uba54\ubaa8\ub9ac Load/Store) CPU \u2500\u2500(AXI/AHB/TileLink \ubc84\uc2a4)\u2500\u2500\u25ba        \u251c\u2500 DRAM \ucee8\ud2b8\ub864\ub7ec (0x8000_0000\u2026)        \u251c\u2500 UART0 (0x1000_0000) : \uc2dc\ub9ac\uc5bc \ucf58\uc194\uc774\ub77c\ub294 \ub2e8\uc21c I/O        \u251c\u2500 VirtIO \ube14\ub85d (0x1000_1000) : paravirtual \uc7a5\uce58 \ud45c\uc900        \u2514\u2500 PLIC(\uc678\ubd80 \uc778\ud130\ub7fd\ud2b8) (0x0C00_0000)</p>"},{"location":"1-hardware/#3-clint-vs-plic","title":"3&gt; CLINT vs PLIC","text":"<p>CLINT\ub294 MSIP/SSIP/MTIP/STIP \uc18c\ud504\ud2b8\uc6e8\uc5b4\uc640 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\ub97c \ucc98\ub9ac\ud558\uace0, \ucf54\uc5b4 \ub0b4\ubd80\uc758 0x02000000\uc5d0 \uc788\ub2e4. PLIC\ub294 \uc678\ubd80 \ub514\ubc14\uc774\uc2a4 IRQ (UART, VirtIO) \ub97c \ucc98\ub9ac\ud558\uace0, 0x0C000000\uc5d0 \uc788\ub2e4.</p>"},{"location":"1-hardware/#4-mmu","title":"4&gt; MMU","text":"<p>\ubb3c\ub9ac \uc8fc\uc18c = DRAM \uce69, MMIO \ub808\uc9c0\uc2a4\ud130\ub97c \uc804\uc120 \ubc88\ud638\ub85c \uc9c1\uc811 \uac00\ub9ac\ud0a4\ub294 \uac12 \uac00\uc0c1 \uc8fc\uc18c = CPU\uc5d0\uc11c \uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uadf8\ub7a8\uc774 \ubcf4\ub294 \uc8fc\uc18c MMU = CPU \uc548\uc5d0 \ubd99\uc5b4 \uc788\ub294 \uc720\ub2db. \uc8fc\uc18c \ub9e4\ud551 \ubc0f \uad8c\ud55c \uccb4\ud06c.</p> <p>\uc65c \uac00\uc0c1 \uc8fc\uc18c\uac00 \ud544\uc694\ud560\uae4c? \uc2e4\ud589 \ud30c\uc77c\uc744 \ud56d\uc0c1 \uac00\uc0c1\uc8fc\uc18c 0x400000\uc5d0 \ubc30\uce58\ud55c\ub2e4 \ud574\ub3c4 \uc2e4\uc81c \ubb3c\ub9ac\ub294 RAM \ube48\uacf3\uc73c\ub85c \ub9e4\ud551\ub9cc \ud558\uba74 \ub05d</p> <p>risc-v 64\ube44\ud2b8 \uc608 Sv39 = \uac00\uc0c1\uc8fc\uc18c 39bit(9+9+9+12) \uad6c\uc870 \ub098\uba38\uc9c0 [64:39] \ube44\ud2b8\ub294 sign-extension(\ucd5c\uc0c1\uc704 \ube44\ud2b8 \ubcf5\uc81c) [38:30] \uc740 vpn[2] level2(\ub8e8\ud2b8) PTE \uc778\ub371\uc2a4 [29:21] \uc740 vpn[1] level1 PTE \uc778\ub371\uc2a4 [20:12] \uc740 vpn[0] level0 PTE \uc778\ub371\uc2a4 [11:0] \uc740 page offset \ud398\uc774\uc9c0(4KB) \ub0b4\ubd80 \ubc14\uc774\ud2b8 \uc704\uce58</p> <p>\ub530\ub77c\uc11c 256TB \uc8fc\uc18c\uacf5\uac04.</p> <p>\ucee4\ub110\uc744 \ub85c\ub4dc\ud558\ub294 0x80000000\uc740 \ubb3c\ub9ac \uc8fc\uc18c, \ud504\ub85c\uc138\uc2a4\ub97c \uc2e4\ud589\ud558\ub294 0x00000000\uc740 \uac00\uc0c1 \uc8fc\uc18c\uc774\ub2e4.</p>"},{"location":"2-kernel/","title":"kernel","text":""},{"location":"2-kernel/#xv6-riscv","title":"xv6-riscv\uc758 \uc2dc\uc791 \ud30c\uc77c\uc744 \uc77d\uc5b4\ubcf4\uc790","text":""},{"location":"2-kernel/#_1","title":"\ubaa9\ud45c: \ucee4\ub110\uc758 \uc774\ud574","text":"<p>\uc791\uc131\uc790: kkongnyang2 \uc791\uc131\uc77c: 2025-06-21</p>"},{"location":"2-kernel/#0","title":"0&gt; \ud30c\uc77c \uad6c\uc870","text":"<p>[1] \ubd80\ud2b8 \uc9c4\uc785 [2] \ucee4\ub110 \ucd08\uae30\ud654 [3] \ud2b8\ub7a9 \ud578\ub4e4\ub7ec \ub4f1\ub85d [4] \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud65c\uc131\ud654 [5] init \ud504\ub85c\uc138\uc2a4 \uc2dc\uc791 [6] \uc720\uc800 \uc2a4\ud398\uc774\uc2a4 \u2192 \uc2dc\uc2a4\ud15c \ucf5c \u2192 \ucee4\ub110 \uc9c4\uc785</p> <p>xv6-riscv/ \u251c\u2500\u2500 Makefile           \u2190 \ube4c\ub4dc \uba85\ub839 \uc815\uc758 \u251c\u2500\u2500 kernel/            \u2190 \ucee4\ub110 \ucf54\ub4dc\uac00 \ub2f4\uae34 \ub514\ub809\ud1a0\ub9ac \u2502   \u251c\u2500\u2500 entry.S        \u2190 \ucee4\ub110 \uc9c4\uc785\uc810 (Assembly) \u2502   \u251c\u2500\u2500 start.c        \u2190 \ucd08\uae30\ud654 \ub8e8\ud2f4 \u2502   \u251c\u2500\u2500 main.c         \u2190 \ucee4\ub110 main \ud568\uc218 \u2502   \u251c\u2500\u2500 trap.c         \u2190 \ud2b8\ub7a9/\uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac \u2502   \u251c\u2500\u2500 syscall.c      \u2190 \uc2dc\uc2a4\ud15c \ucf5c \ub514\uc2a4\ud328\uce58 \u2502   \u251c\u2500\u2500 proc.c         \u2190 \ud504\ub85c\uc138\uc2a4 \uc0dd\uc131/\uc2a4\ucf00\uc904\ub9c1 \u2502   \u251c\u2500\u2500 vm.c           \u2190 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \ubc0f \uba54\ubaa8\ub9ac \uad00\ub9ac \u2502   \u251c\u2500\u2500 kalloc.c       \u2190 \ubb3c\ub9ac \uba54\ubaa8\ub9ac \ud560\ub2f9\uc790 \u2502   \u251c\u2500\u2500 file.c, fs.c   \u2190 \ud30c\uc77c \uc2dc\uc2a4\ud15c \u2502   \u251c\u2500\u2500 uart.c         \u2190 UART \ub4dc\ub77c\uc774\ubc84 \u2502   \u251c\u2500\u2500 spinlock.c     \u2190 \uc2a4\ud540\ub77d \u2502   \u2514\u2500\u2500 ...            \u2190 \ub2e4\uc591\ud55c \ucee4\ub110 \uc11c\ube0c\uc2dc\uc2a4\ud15c \u251c\u2500\u2500 user/              \u2190 \uc0ac\uc6a9\uc790 \uc601\uc5ed \ud504\ub85c\uadf8\ub7a8 \u2502   \u251c\u2500\u2500 init.c         \u2190 \ucd5c\ucd08 \uc720\uc800 \ud504\ub85c\uadf8\ub7a8 \u2502   \u251c\u2500\u2500 sh.c           \u2190 \uc178 \u2502   \u2514\u2500\u2500 ...            \u2190 ls, cat, echo \ub4f1 \uc720\ud2f8\ub4e4 \u251c\u2500\u2500 fs/                \u2190 \ud30c\uc77c \uc2dc\uc2a4\ud15c \u2502   \u2514\u2500\u2500 fs.img         \u2190 \ucd08\uae30 \ud30c\uc77c \uc2dc\uc2a4\ud15c \uc774\ubbf8\uc9c0 \u251c\u2500\u2500 mkfs/              \u2190 \ud30c\uc77c \uc2dc\uc2a4\ud15c \uc774\ubbf8\uc9c0 \uc0dd\uc131 \ub3c4\uad6c \u2502   \u2514\u2500\u2500 mkfs.c \u251c\u2500\u2500 include/           \u2190 \ucee4\ub110/\uc720\uc800 \uacf5\uc6a9 \ud5e4\ub354 \u2502   \u2514\u2500\u2500 *.h \u251c\u2500\u2500 .gdbinit           \u2190 GDB \ucd08\uae30\ud654 \uc124\uc815 \u2514\u2500\u2500 README.md</p>"},{"location":"2-kernel/#1-kernelkernelld","title":"1&gt; \uba54\ubaa8\ub9ac \ubc30\uce58 kernel/kernel.ld","text":"<p>\ub9c1\ucee4 \uc2a4\ud06c\ub9bd\ud2b8\ub780? .o \ub4e4\uc744 \ud558\ub098\ub85c \ubb36\uc5b4 \uc2e4\ud589 \uac00\ub2a5\ud55c .elf \ubc14\uc774\ub108\ub9ac\ub97c \ub9cc\ub4e4\ub54c, \uc5b4\ub5a4 \uc139\uc158\uc744 \uc5b4\ub514\uc5d0 \ubc30\uce58\ud560\uc9c0 \uacb0\uc815\ud558\ub294 \ubc30\uce58\ub3c4 \uc5ed\ud560\uc744 \ud55c\ub2e4. <pre><code>OUTPUT_ARCH( \"riscv\" )\nENTRY( _entry )\n\nSECTIONS\n{\n  /*\n   * ensure that entry.S / _entry is at 0x80000000,\n   * where qemu's -kernel jumps.\n   */\n  . = 0x80000000;\n\n  .text : {                     // \uc2e4\ud589 \uac00\ub2a5\ud55c \ucf54\ub4dc\ub4e4\uc744 \uc774 \uc139\uc158\uc5d0 \ubc30\uce58\n    *(.text .text.*)            // \uc77c\ubc18 C/\uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\n    . = ALIGN(0x1000);          // 4KB \uc815\ub82c (\ud398\uc774\uc9c0 \ub2e8\uc704)\n    _trampoline = .;            // \ud2b8\ub7a8\ud3f4\ub9b0 \uc2dc\uc791 \uc704\uce58 \uc800\uc7a5\n                                // \ud2b8\ub7a8\ud3f4\ub9b0\uc774\ub780 \uc720\uc800 \ubaa8\ub4dc\uc5d0\uc11c \ucee4\ub110 \ubaa8\ub4dc\ub85c \ub3cc\uc544\uc62c \ub54c \ud544\uc694\ud55c \uc784\uc2dc \ucf54\ub4dc \uacf5\uac04. \uac01 \ud504\ub85c\uc138\uc2a4\uc758 trap handler\uac00 \uc810\ud504\ud558\ub294 \uc7a5\uc18c\n    *(trampsec)                 // \ud2b8\ub7a8\ud3f4\ub9b0 \ucf54\ub4dc \uc0bd\uc785\n    . = ALIGN(0x1000);          // \ub2e4\uc2dc 4KB \uc815\ub82c\n    ASSERT(. - _trampoline == 0x1000, \"error: trampoline larger than one page\");\n    //\ud06c\uae30 \uccb4\ud06c. \ud639\uc5ec\ub77c\ub3c4 1\ud398\uc774\uc9c0(4KB)\ub85c \uc815\ub82c \uc548\ub410\uc744\uae4c\ubd10.\n    PROVIDE(etext = .);         // etext\ub77c\ub294 \uc2ec\ubcfc\ub85c \ud604\uc7ac \uc8fc\uc18c \ucee4\uc11c \uc800\uc7a5. \ud14d\uc2a4\ud2b8 \ub05d \uc8fc\uc18c\ub97c \uc54c \uc218 \uc788\uac8c.\n  }\n\n  .rodata : {                   // \uc77d\uae30 \uc804\uc6a9 \ub370\uc774\ud130\ub4e4(const)\n    . = ALIGN(16);              // 16\ubc14\uc774\ud2b8 \uc815\ub82c\n    *(.srodata .srodata.*)      // srodata\ub294 \uc791\uc740 \uc0c1\uc218\ub4e4\uc744 \uc704\ud55c \ubcc4\ub3c4 \uc139\uc158\n    . = ALIGN(16);\n    *(.rodata .rodata.*)\n  }\n\n  .data : {                     // \ucd08\uae30\ud654\ub41c \uc804\uc5ed\ubcc0\uc218\n    . = ALIGN(16);\n    *(.sdata .sdata.*)          // sdata\ub294 \uc791\uc740 \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218\n    . = ALIGN(16);\n    *(.data .data.*)\n  }\n\n  .bss : {                      // \ucd08\uae30\ud654 \uc548\ub41c \uc804\uc5ed\ubcc0\uc218(\ucd08\uae30\uac12x)\n    . = ALIGN(16);\n    *(.sbss .sbss.*)            // \uc791\uc740\n    . = ALIGN(16);\n    *(.bss .bss.*)\n  }\n\n  PROVIDE(end = .);             // end\ub77c\ub294 \uc2ec\ubcfc\ub85c \ud604\uc7ac \uc8fc\uc18c \ucee4\uc11c \uc800\uc7a5. \ucee4\ub110\uc758 \ub05d \uc8fc\uc18c\ub97c \uc54c \uc218 \uc788\uac8c. \uc774 \uc774\ud6c4\ubd80\ud134 heap, user memory, alloc \ub4f1 \uc2dc\uc791.\n}\n</code></pre> <pre><code>\uc8fc\uc18c \u2193 \ub192\uc740 \uc8fc\uc18c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n|                                            |\n|                \uc0ac\uc6a9\uc790 \uacf5\uac04 (user)         | \u2190 \ud504\ub85c\uc138\uc2a4 \uba54\ubaa8\ub9ac\n|                                            |\n|--------------------------------------------| \u2190 \uc0ac\uc6a9\uc790\uac00 \uc0ac\uc6a9\ud558\ub294 \ub9c8\uc9c0\ub9c9 \uc8fc\uc18c (~0xFFFFFFFF?)\n|                \ucee4\ub110 heap                  | \u2190 `end[]` \uc774\ud6c4 \ub3d9\uc801 \ud560\ub2f9\n|                                            |\n|--------------------------------------------| \u2190 end (PROVIDE(end = .))\n|                .bss \uc139\uc158                  | \u2190 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uc804\uc5ed \ubcc0\uc218\n|                                            |\n|--------------------------------------------|\n|                .data \uc139\uc158                 | \u2190 \ucd08\uae30\ud654\ub41c \uc804\uc5ed \ubcc0\uc218\n|                                            |\n|--------------------------------------------|\n|                .rodata \uc139\uc158               | \u2190 const \ubb38\uc790\uc5f4 \ub4f1\n|                                            |\n|--------------------------------------------|\n|                .text \uc139\uc158                 | \u2190 C/ASM \ucf54\ub4dc, \ud568\uc218\ub4e4\n|                                            |\n|        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \n|        \u2502 trampoline   \u2502 \u2190 trap \uc9c4\uc785\uc6a9 \ucf54\ub4dc (\ud55c \ud398\uc774\uc9c0)\n|        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \n|                                            |\n|--------------------------------------------| \u2190 0x80000000\n|              entry point (_entry)         | \u2190 QEMU\uac00 jump \ud558\ub294 \uc2dc\uc791 \uc8fc\uc18c\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\uc8fc\uc18c \u2191 \ub0ae\uc740 \uc8fc\uc18c\n</code></pre> \uac01 \uc139\uc158\ub4e4\uc740 \ub9c1\ucee4\uac00 .o\ub4e4\uc744 \ubaa8\uc544 \ud558\ub098\uc758 elf\ub97c \uc0dd\uc131\ud558\uba70 \uadf8\ub54c \ud06c\uae30\uac00 \uacb0\uc815\ub41c\ub2e4. \ucee4\ub110 heap\uc740 \ub7f0\ud0c0\uc784 \uacf5\uac04\uc774\ub77c \uc139\uc158\uc774 \uc544\ub2d8. \uc800\uc8fc\uc18c\ubd80\ud130 \uc99d\uac00\ud558\uba70 \uc694\uccad \uc2dc \ud06c\uae30\ub9cc\ud07c \ub3d9\uc801\uc73c\ub85c \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud55c\ub2e4. c\uc5b8\uc5b4 \ud568\uc218\ub4e4\uc744 \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 stack0\uc740 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc558\uc73c\ubbc0\ub85c .bss \uc139\uc158\uc5d0 \ud3ec\ud568</p>"},{"location":"2-kernel/#2-m-kernelentrys","title":"2&gt; M\ubaa8\ub4dc \ubc0f \uc2a4\ud0dd \uc124\uc815 kernel/entry.S","text":"<p>cpu\uac00 \uc81c\uc77c \uba3c\uc800 \uc77d\ub294 \ud30c\uc77c\uc740? _entry \ub77c\ubca8.</p> <p><pre><code>        # qemu\ub294 \ucee4\ub110\uc744 0x80000000\uc5d0 \ub85c\ub4dc\n        # \uac01 \ud558\ud2b8(CPU)\uac00 \ud574\ub2f9 \uc704\uce58\ub85c \uc810\ud504\ud558\ub3c4\ub85d \ud568.\n        # kernel.ld\ub85c \uc778\ud574 \ub2e4\uc74c \ucf54\ub4dc\uac00 0x8000000\uc704\uce58\uc5d0 \ubc30\uce58\ub428.\n.section .text\n.global _entry\n_entry:\n        # C \ud568\uc218\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc2a4\ud0dd \uc124\uc815.\n        # stack0\uc740 start.c\uc5d0\uc11c \uc815\uc758.\n        # \uac01 CPU\ub9c8\ub2e4 4096Byte \uc2a4\ud0dd.\n        # sp = \uc2a4\ud0dd\ud3ec\uc778\ud130 = stack0 + (hartid * 4096)\n        la sp, stack0                   # sp = stack0\n        li a0, 1024*4                   # a0 = 4096\n        csrr a1, mhartid                # \ud604\uc7ac \ud558\ud2b8 ID \uc77d\uc5b4\uc624\uae30(0,1,2)\n        addi a1, a1, 1                  # +1 (\uc65c\ub0d0\ud558\uba74 stack0[0]\uc740 \uc4f0\uc9c0 \uc54a\uc74c)\n        mul a0, a0, a1                  # hartid * 4096\n        add sp, sp, a0                  # sp = stack0 + (hartid * 4096)\n        # start.c\uc5d0 \uc788\ub294 start()\ub85c \uc810\ud504\n        call start\nspin:\n        j spin                          # start()\ub294 \uc808\ub300 \ub9ac\ud134\ud558\uba74 \uc548\ub418\ubbc0\ub85c \ud639\uc2dc \ub9ac\ud134\ud588\uc744\ub54c cpu\uac00 \uba48\ucd94\uc9c0 \uc54a\ub3c4\ub85d \ubb34\ud55c \ub8e8\ud504\ub97c \ub454\uac83.\n</code></pre> <pre><code>stack0:  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2190 \uc2a4\ud0dd \ubc14\ub2e5\n         \u2502                    \u2502\n         \u2502      \uc2a4\ud0dd           \u2502\n         \u2502                    \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2190 sp \uc124\uc815 (\ucd5c\uc0c1\ub2e8 = stack0 + STACK_SIZE)\n</code></pre></p>"},{"location":"2-kernel/#3-m-s-timer-kernelstartc","title":"3&gt; M-&gt;S \uc804\ud658, timer \uc138\ud305 kernel/start.c","text":"<p><pre><code>#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"defs.h\"\n\nvoid main();\nvoid timerinit();\n\n// entry.S\ub294 \uac01 CPU\ub9c8\ub2e4 \ud558\ub098\uc758 \uc2a4\ud0dd \ud544\uc694.\n__attribute__ ((aligned (16))) char stack0[4096 * NCPU];\n\n// entry.S\ub294 \uc5ec\uae30 stack0\uc758 M \ubaa8\ub4dc\ub85c \uc810\ud504\ud568.\nvoid\nstart()\n{\n  // RISC-V\uc5d0\uc11c\ub294 U(\uc720\uc800) S(\ucee4\ub110) M(\ucd5c\uc0c1\uc704)\uac00 \uc788\ub2e4\ub294\uac70 \uae30\uc5b5\ud560\uac70\uc784.\n  // \uc9c0\uae08\uc774 \uadf8 machine mode.\n\n\n  // mret(machine mode return) \ud6c4 S \ubaa8\ub4dc\ub85c \uc810\ud504\ud560 \uc218 \uc788\uac8c \uc900\ube44.\n  // MPP(machine previous privilege mode)\ube44\ud2b8 = \uadf8 \uc774\uc804 \ubaa8\ub4dc\uac00 \uc5b4\ub514\ub0d0 \uc800\uc7a5. 00\uc740 U, 01\uc740 S, 11\uc740 M\n  unsigned long x = r_mstatus();        // \ud604\uc7ac\uc758 mstatus \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 \uc77d\uc5b4\uc11c x\uc5d0 \uc800\uc7a5. r\uc740 read\n                                        // x = 0x 0000 000a bc12 3800 (\uc608\uc2dc)\n  x &amp;= ~MSTATUS_MPP_MASK;               // MSTATUS_MPP_MASK = MPP \ubd80\ubd84\uc778 11,12\ube44\ud2b8 \ub9c8\uc2a4\ud06c\n                                        // 11\uc744 11\ube44\ud2b8\uc5d0 \uc124\uc815, \ub530\ub77c\uc11c 0x 0000 0000 0000 1800\n                                        // ~MSTATUS_MPP_MASK\ub294 0x FFFF FFFF FFFF E7FF\n                                        // \uc989 \uc774\uac74 MPP \ube44\ud2b8(11,12)\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud574\ub77c\n  x |= MSTATUS_MPP_S;                   // MSTATUS_MPP_S = S\ubaa8\ub4dc\ub97c \uc758\ubbf8\ud558\ub294 \uac12.\n                                        // 01\uc744 11\ube44\ud2b8\uc5d0 \uc124\uc815, \ub530\ub77c\uc11c 0x 0000 0000 0000 0800\n                                        // \uc989 \uc774\uac74 MPP \ube44\ud2b8\ub97c 01(S\ubaa8\ub4dc)\ub85c \uc124\uc815\ud574\ub77c\n  w_mstatus(x);                         // \uc870\uc791\ud55c \uac12\uc744 \ub2e4\uc2dc mstatus\uc5d0 \uae30\ub85d. w\ub294 write\n\n  // MEPC \ub808\uc9c0\uc2a4\ud130 = mret\uc2dc \ubcf5\uadc0\ud560 pc\ub97c \ub2f4\uc74c(\uc8fc\ub85c main. S \ubaa8\ub4dc\uc758 \ucee4\ub110 \uc9c4\uc784\uc810)\n  w_mepc((uint64)main);\n\n  // \uc9c0\uae08\uc740 MMU(\uac00\uc0c1 \uba54\ubaa8\ub9ac) \ub044\uace0 \ubb3c\ub9ac \uc8fc\uc18c \ubaa8\ub4dc\ub85c \uc791\ub3d9\n  w_satp(0);\n\n  // 16\uac1c\uc758 \uc608\uc678 \ub808\uc9c0\uc2a4\ud130, 16\uac1c\uc758 \uc778\ud130\ub7fd\ud2b8 \ub808\uc9c0\uc2a4\ud130\ub97c \ubaa8\ub450 S \ubaa8\ub4dc\ub85c \ub118\uae30\uae30 \uc704\ud55c \ud568\uc218.\n  // 1111 1111 1111 1111 16\uac1c\uc758 \ube44\ud2b8\uc5d0 \ub300\ud574 \uc804\ubd80.\n  w_medeleg(0xffff);\n  w_mideleg(0xffff);\n  // S \ubaa8\ub4dc\uc5d0\uc11c \ud5c8\uc6a9\ud560 \uc778\ud130\ub7fd\ud2b8 \uc885\ub958 \uc124\uc815.\n  // supervisor interrupt enable \ub808\uc9c0\uc2a4\ud130 \ud604\uc7ac \uac12\uc744 \uc77d\uace0 or \uc5f0\uc0b0\uc73c\ub85c 3\uac1c \uc778\ud130\ub7fd\ud2b8 \ucd94\uac00.\n  // SEIE: \uc678\ubd80 \uc778\ud130\ub7fd\ud2b8, STIE: \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8, SSIE: \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\n  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);      // \ud604\uc7ac \uc124\uc815\uac12\uc744 \uc77d\uace0 \uac01 \ube44\ud2b8\ub97c 1\ub85c \ub9cc\ub4e4\uc5b4 \uc800\uc7a5\n\n  // S \ubaa8\ub4dc\uac00 \uba54\ubaa8\ub9ac \uc811\uadfc \uac00\ub2a5\ud558\ub3c4\ub85d PMP(physical memory protection) \uc124\uc815\n  w_pmpaddr0(0x3fffffffffffffull);      // \ucd5c\ub300 \uba54\ubaa8\ub9ac \uc8fc\uc18c 0x 3f ffff ffff ffff * \ud558\ub098\ub2f9 4\ubc14\uc774\ud2b8\n  w_pmpcfg0(0xf);                       // \ubaa8\ub4e0 \uad8c\ud55c(RWX)\uc744 \ubd80\uc5ec\n\n  // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \uc124\uc815\n  timerinit();\n\n  // tp \ub808\uc9c0\uc2a4\ud130\uc5d0 hartid \uc800\uc7a5. cpuid()\ud568\uc218\uac00 \uc774\ub97c \ucc38\uc870\ud568.\n  int id = r_mhartid();\n  w_tp(id);\n\n  // mret \uba85\ub839\uc5b4\ub85c S\ubaa8\ub4dc\ub85c \uc804\ud658\ud558\uace0 main\uc73c\ub85c \uc810\ud504\n  asm volatile(\"mret\");\n}\n\n\nvoid\ntimerinit()\n{\n  // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud65c\uc131\ud654\n  // machine interrupt enable register\n  // STIE(spuervisor timer interrupt enable): \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\n  w_mie(r_mie() | MIE_STIE);            // \ud604\uc7ac \uc124\uc815\uac12\uc744 \uc77d\uace0 5\ubc88 \ube44\ud2b8\ub97c 1\ub85c \ub9cc\ub4e4\uc5b4 \uc800\uc7a5\n\n  // sstc \ud655\uc7a5 \ud65c\uc131\ud654\n  // \uae30\uc874\uc5d0\ub294 M \ubaa8\ub4dc\uc5d0\uc11c\ub9cc mtimecmp\ub97c \uc124\uc815\ud560 \uc218 \uc788\uc5c8\uc9c0\ub9cc sstc\uac00 \ud65c\uc131\ud654\ub418\uba74 S\ubaa8\ub4dc\ub3c4 stimecpm \uc0ac\uc6a9\uac00\ub2a5\n  w_menvcfg(r_menvcfg() | (1L &lt;&lt; 63));  // 1L &lt;&lt; 63\uc774 sstc\ub97c \ud65c\uc131\ud654\ud568\n\n  // mcounteren \ub808\uc9c0\uc2a4\ud130\ub294 \uc5b4\ub5a4 \uce74\uc6b4\ud130\ub97c s\ubaa8\ub4dc\uc5d0\uc11c \uc77d\uc744 \uc218 \uc788\uac8c \ud5c8\uc6a9\ud560\uc9c0 \uacb0\uc815\n  // 0\ubc88\uc9f8 \ube44\ud2b8\ub294 \uc0ac\uc774\ud074 \uc218 \uad00\ub828, 1\ube44\ud2b8\ub294 \uc2dc\uac04 \uce74\uc6b4\ud130, 2\ube44\ud2b8\ub294 \uba85\ub839\uc5b4 \uc2e4\ud589 \uc218\ub97c \uc758\ubbf8.\n  w_mcounteren(r_mcounteren() | 2);     // 1\ubc88\uc9f8 \ube44\ud2b8\ub97c \ud0b4 -&gt; \uc2dc\uac04 \uce74\uc6b4\ud130 \ud5c8\uc6a9\n\n  // S\ubaa8\ub4dc timecompare \ud0c0\uc774\uba38 \ube44\uad50 \ub808\uc9c0\uc2a4\ud130\n  // stimecmp\ubcf4\ub2e4 \ucee4\uc9c0\uba74 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\n  w_stimecmp(r_time() + 1000000);       // \ud604\uc7ac \uc2dc\uac04+100\ub9cc tick(1\ucd08)\uc73c\ub85c stimecmp \uc124\uc815\n}\n</code></pre> \ucc38\uace0\ub85c \ud0c0\uc774\uba38\ub294 \uc720\uc77c\ud558\uac8c cpu \uc548\uc5d0 \uc788\ub294 \uc21c\uc218 \ud558\ub4dc\uc6e8\uc5b4 \ud0c0\uc774\uba38\ub85c, M\ubaa8\ub4dc \uc18c\uc18d \uc790\uc6d0\uc774\uc790 \ubaa8\ub4e0 \uc2a4\ucf00\uc904\ub9c1\uc758 \uae30\ubc18\uc774\uae30\uc5d0 \uc5ec\uae30\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4.</p>"},{"location":"2-kernel/#4-kernelmainc","title":"4&gt; \ucee4\ub110 \ucd08\uae30\ud654 \ub8e8\ud2f4 kernel/main.c","text":"<pre><code>#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"defs.h\"\n\nvolatile static int started = 0;        // \ubd80\ud2b8 hart\uac00 \ucd08\uae30\ud654 \ub05d\ub0ac\ub294\uc9c0 \ud45c\uc2dc\ud558\ub294 \ud50c\ub798\uadf8\n                                        // volatile: \ucef4\ud30c\uc77c\ub7ec\uac00 \ucd5c\uc801\ud654\ub85c \uc0dd\ub7b5\ud558\uc9c0 \ub9d0\uace0 \uaf2d \uba54\ubaa8\ub9ac\uc5d0\uc11c \uc77d\uac8c \ud568\n\nvoid\nmain()\n{\n  if(cpuid() == 0){                     // cpu0 = \ubd80\ud2b8 hart\ub9cc\uc774 \uc804\uccb4 \uc2dc\uc2a4\ud15c \ucd08\uae30\ud654\ub97c \ub9e1\uc74c\n    consoleinit();                      // UART, printf, getc \ub4f1 \ucf58\uc194 \uc785\ucd9c\ub825 \ucd08\uae30\ud654\n    printfinit();                       // printf \ub0b4\ubd80 \ubc84\ud37c \ucd08\uae30\ud654\n    printf(\"\\n\");\n    printf(\"xv6 kernel is booting\\n\");\n    printf(\"\\n\");\n    kinit();                            // \ubb3c\ub9ac \uba54\ubaa8\ub9ac \ud398\uc774\uc9c0 \ud560\ub2f9\uae30 \ucd08\uae30\ud654\n    kvminit();                          // \ucee4\ub110 \uc804\uc6a9 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc0dd\uc131\n    kvminithart();                      // \ud604\uc7ac \ud558\ud2b8\uc5d0 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc801\uc6a9. MMU \ud65c\uc131\ud654\n    procinit();                         // \ud504\ub85c\uc138\uc2a4 \ud14c\uc774\ube14 \ucd08\uae30\ud654\n    trapinit();                         // trap \uad00\ub828 \uc804\uc5ed \uc124\uc815. \ud2b8\ub7a9 \ud578\ub4e4\ub7ec vector table \uc900\ube44\n    trapinithart();                     // \ud574\ub2f9 hart\uc5d0 \ud2b8\ub7a9 \ud578\ub4e4\ub7ec \ubca1\ud130 \uc8fc\uc18c \ub4f1\ub85d\n    plicinit();                         // \ud50c\ub7ab\ud3fc \ub808\ubca8 interrupt controller \ucd08\uae30\ud654\n    plicinithart();                     // \ud604\uc7ac \ud558\ud2b8\uc5d0 \uc5f0\uacb0\ub41c \uc778\ud130\ub7fd\ud2b8\ub97c \ud65c\uc131\ud654\n    binit();                            // \ube14\ub85d \ubc84\ud37c \uce90\uc2dc \ucd08\uae30\ud654\n    iinit();                            // inode \ud14c\uc774\ube14 \ucd08\uae30\ud654\n    fileinit();                         // \uc804\uc5ed \ud30c\uc77c \ub514\uc2a4\ud06c\ub9bd\ud130 \ud14c\uc774\ube14 \ucd08\uae30\ud654\n    virtio_disk_init();                 // qemu \uac00\uc0c1 \ub514\uc2a4\ud06c \uc7a5\uce58 \ucd08\uae30\ud654\n    userinit();                         // \ucd5c\ucd08 \uc720\uc800 \ud504\ub85c\uc138\uc2a4\ub97c \uc0dd\uc131\n    __sync_synchronize();               // \uba54\ubaa8\ub9ac \uc21c\uc11c\ub97c \uac15\uc81c \uc815\ub82c\n    started = 1;                        // \ud50c\ub798\uadf8 1\ub85c\n  } else {                              // \ub098\uba38\uc9c0 \ud558\ud2b8\ub294\n    while(started == 0)                 // \ubd80\ud2b8 \ud558\ud2b8\uac00 started = 1 \ud574\uc8fc\uae30\uae4c\uc9c0 \ub300\uae30\ud558\ub294 \ub8e8\ud504\n      ;\n    __sync_synchronize();               // \uba54\ubaa8\ub9ac \uc21c\uc11c\ub97c \uac15\uc81c \uc815\ub82c\n    printf(\"hart %d starting\\n\", cpuid());\n    kvminithart();                      // \ud604\uc7ac \ud558\ud2b8\uc5d0 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc801\uc6a9. MMU \ud65c\uc131\ud654\n    trapinithart();                     // \ud574\ub2f9 hart\uc5d0 \ud2b8\ub7a9 \ud578\ub4e4\ub7ec \ubca1\ud130 \uc8fc\uc18c \ub4f1\ub85d\n    plicinithart();                     // \ud604\uc7ac \ud558\ud2b8\uc5d0 \uc5f0\uacb0\ub41c \uc778\ud130\ub7fd\ud2b8\ub97c \ud65c\uc131\ud654\n  }\n\n  scheduler();                          // \ubaa8\ub4e0 cpu\uac00 \uc2a4\ucf00\uc904\ub7ec\uc5d0 \uc9c4\uc785\ud558\uc5ec \ud504\ub85c\uc138\uc2a4 \ub8e8\ud504  \n}\n</code></pre>"},{"location":"2-kernel/#5","title":"5&gt; \ubaa8\ub4dc \uc804\ud658","text":"<p>mret : M-&gt;S mstatus.MPP\ub97c \ubcf4\uace0 \ub2e4\uc74c \ubaa8\ub4dc\ub97c \uacb0\uc815 MPP=00(U\ubaa8\ub4dc) MPP=01(S\ubaa8\ub4dc) MPP=11(M\ubaa8\ub4dc) mepc\uc5d0 \uc800\uc7a5\ub41c \uc8fc\uc18c(main)\ub85c \uc810\ud504</p> <p>sret : S-&gt;U sstatus.SPP\uc744 \ubcf4\uace0 \ub2e4\uc74c \ubaa8\ub4dc\ub97c \uacb0\uc815 SPP=0(U\ubaa8\ub4dc) SPP=1(S\ubaa8\ub4dc) sepc\uc5d0 \uc800\uc7a5\ub41c \uc8fc\uc18c(\uc720\uc800 \uc571)\ub85c \uc810\ud504 \uc720\uc800 \uc571 \uc2e4\ud589 \uc2dc SPP=0, sepc=\uc720\uc800\ucf54\ub4dc, sret();</p> <p>trap : U-&gt;S \uc9c1\uc811\uc801\uc73c\ub85c \uc0c1\uc704 \ubaa8\ub4dc\ub85c \ubabb\uc62c\ub77c\uac00\uc9c0\ub9cc \uc608\uc678 \ubc1c\uc0dd\uc2dc.(ecall) stvec\uc5d0 \ub4f1\ub85d\ub41c trap handler\ub85c \uc810\ud504. SPP=U\ubaa8\ub4dc. sepc\uc5d0 \ubcf5\uadc0 \uc8fc\uc18c \uc800\uc7a5\ub428</p> <p>trap\uc774 \uc5b8\uc81c \ubc1c\uc0dd\ud558\ub098\uc694? \uc608\uc678 : ecall, \uc798\ubabb\ub41c \uc8fc\uc18c \uc811\uadfc \uc778\ud130\ub7fd\ud2b8 : \ud0c0\uc774\uba38, \uc7a5\uce58I/O</p> <pre><code>[U \ubaa8\ub4dc] \uc720\uc800 \ucf54\ub4dc \uc2e4\ud589 \uc911\n    \u2193\n  trap \ubc1c\uc0dd (ex. ecall, timer)\n    \u2193\n[\ud558\ub4dc\uc6e8\uc5b4]\n  sepc \u2190 \ubcf5\uadc0 \uc8fc\uc18c \uc800\uc7a5\n  sstatus \u2190 \ud604\uc7ac \ubaa8\ub4dc \uc800\uc7a5\n  PC \u2190 stvec \uc5d0 \ub4f1\ub85d\ub41c handler\ub85c \uc810\ud504\n    \u2193\n[S \ubaa8\ub4dc] \ucee4\ub110\uc758 trap handler \ub3d9\uc791\n</code></pre>"},{"location":"2-kernel/#makefile","title":"&gt; makefile","text":"<p>[ test.S ] --(\uc5b4\uc148\ube14\ub7ec)--&gt; [ test.o ] --(\ub9c1\ucee4)--&gt; [ kernel.elf ] --(objcopy)--&gt; [ kernel.img ] \uc5b4\uc148\ube14\ub9ac \u2192 \uc624\ube0c\uc81d\ud2b8 : CPU\uac00 \uc774\ud574\ud560 \uc218 \uc788\ub294 \uae30\uacc4\uc5b4(.o)\ub85c \ubcc0\ud658 \uc624\ube0c\uc81d\ud2b8 \u2192 ELF \uc2e4\ud589\ud30c\uc77c : \ucf54\ub4dc\uc640 \ub370\uc774\ud130(\uc139\uc158)\ub4e4\uc744 \uc8fc\uc18c\uc5d0 \ub9de\uac8c \ubc30\uce58 ELF \u2192 \ubc14\uc774\ub108\ub9ac \uc774\ubbf8\uc9c0 : ELF \ud5e4\ub354 \uc81c\uac70, \ubd80\ud2b8\ub85c\ub354/\uc5d0\ubbac\ub808\uc774\ud130\uac00 \ubc14\ub85c \uc77d\uc744 \uc218 \uc788\uac8c</p> <p>\ud234\uccb4\uc778\uc774\ub780 \ucef4\ud30c\uc77c \uc804 \uacfc\uc815\uc744 \ub2f4\ub2f9\ud558\ub294 \ub3c4\uad6c \uc138\ud2b8\uc774\ub2e4. (gcc / as / ld / objdump / gdb \u2026) gcc : .c -&gt; \uc911\uac04 IR -&gt; \uc5b4\uc148\ube14\ub9ac -&gt; .o \uc774\ub54c -c \uc635\uc158\uc744 \uc8fc\uba74 \uc5ec\uae30\uae4c\uc9c0\ub9cc \ud558\uace0 \ub9c1\ud06c\ub294 \ud558\uc9c0 \uc54a\uc74c as : .S -&gt; .o ld : \uc5ec\ub7ec \uac1c\uc758 .o\uc640 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud558\ub098\uc758 \uc2e4\ud589\uac00\ub2a5 elf\ub85c \ubb36\uc74c. \ub9c1\ucee4 \uc2a4\ud06c\ub9bd\ud2b8\uc5d0 \ub530\ub77c \uc8fc\uc18c, \uc139\uc158 \ubc30\uce58 \uacb0\uc815 objcopy : \ubd88\ud544\uc694\ud55c \uc139\uc158 \uc81c\uac70 \ubc0f elf\ub97c \uc21c\uc218 \ubc14\uc774\ub108\ub9ac\ub85c \ubc14\uafb8\uae30 objdump : \ud569\uccd0\uc9c4 elf\ud30c\uc77c\uc744 \uc6b0\ub9ac\uac00 \ubcfc \uc218 \uc788\ub3c4\ub85d \ub2e4\uc2dc \uc5b4\uc148\ube14\ub9ac\uc5b4\ub85c \ubf51\uc544\uc900 \ucc38\uace0\uc6a9 \ud574\uc124\uc11c. -S \uc635\uc158\uc740 \uc5b4\uc148\ube14\ub9ac, -t \uc635\uc158\uc740 \uc2ec\ubcfc \ud14c\uc774\ube14 \ub4f1. gdb : \uc2e4\ud589 \ud30c\uc77c \uc870\uc0ac \ub514\ubc84\uae45</p> <p>\ud06c\ub85c\uc2a4 \ucef4\ud30c\uc77c\uc774\ub780 x86-64 \ub178\ud2b8\ubd81\uc5d0\uc11c RISC-V\uc6a9 \ucee4\ub110\uc744 \ube4c\ub4dc\ud558\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4. \ub3d9\uc77c \uc544\ud0a4\ud14d\ud2b8\uba74 \ub124\uc774\ud2f0\ube0c \ucef4\ud30c\uc77c.</p> <p>\ub530\ub77c\uc11c \ud06c\ub85c\uc2a4 \ucef4\ud30c\uc77c\uc6a9 \ud234\uccb4\uc778\uc740 \uc774\ub984\uc73c\ub85c CPU\uc640 OS \ub300\uc0c1\uc744 \ud45c\uc2dc\ud55c\ub2e4. (\ub124\uc774\ud2f0\ube0c \ucef4\ud30c\uc77c \ud234\uccb4\uc778 \uc774\ub984\uacfc \uad6c\ubd84) -- vendor? \ud234\uccb4\uc778 \uc81c\uc791\uc0ac. \uc5c6\uc73c\uba74 unknown OS/ABI? C \ub77c\uc774\ube0c\ub7ec\ub9ac \uaddc\uc57d. \uc989 \uc5b4\ub5a4 \uc0c1\ud669\uc5d0\uc11c \ub7f0 \uc2dc\ud0ac\uac74\uc9c0 \ubbf8\ub9ac \ub300\ube44\ud574 \uadf8\uc5d0 \ub9de\ucdb0 \ucee4\ub110 \uc774\ubbf8\uc9c0\ub97c \uc900\ube44\ud568.(elf \ud658\uacbd\uc778\uc9c0, glibc\uac00 \uc874\uc7ac\ud558\ub294 \ud658\uacbd\uc778\uc9c0) <p>riscv64-unknown-elf\ub294 RISC-V\uc6a9 \ubca0\uc5b4\uba54\ud0c8 elf \uc2e4\ud589\ud3ec\ub9f7 \ud658\uacbd \ud06c\ub85c\uc2a4 \ucef4\ud30c\uc77c \ud234\uccb4\uc778. \uc989 \ud38c\uc6e8\uc5b4, \ucee4\ub110, \uc784\ubca0\ub514\ub4dc \ub300\uc0c1. OS \uc5c6\uc74c \u2192 \uc9c1\uc811 MMIO\u00b7\ud3f4\ub9c1\u00b7trap \uad6c\ud604 riscv64-linux-gnu\ub294 \ub9ac\ub205\uc2a4\uc5d0\uc11c \ub9cc\ub4e0 RISC-V\uc6a9 GNU libc \ud658\uacbd \ud06c\ub85c\uc2a4 \ucef4\ud30c\uc77c \ud234\uccb4\uc778. \uc989 \uc720\uc800 \uacf5\uac04 \ud504\ub85c\uadf8\ub7a8 \ub300\uc0c1.</p> <p>\uc774\ub54c xv6\uc740 os\uac00 \ub9ac\ub205\uc2a4\uac00 \uc544\ub2c8\uae30\uc5d0 gnu libc\ub098 \uc2dc\uc2a4\ud15c \ucf5c\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uace0, qemu\uac00 \ucee4\ub110 elf\ub97c 0x80000000\uc5d0 \ubc14\ub85c \ub85c\ub4dc\ud558\uae30\uc5d0 \ubd80\ud2b8\ub85c\ub354 \ub610\ud55c \ud544\uc694\ud558\uc9c0 \uc54a\uace0, \ucee4\ub110 \uc548\uc5d0\uc11c \uc790\uccb4 printf\uc640 memcpy\ub97c \uad6c\ud604\ud558\uae30\uc5d0 libc \ub610\ud55c \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4. riscv64-unknown-elf\ub85c \ucda9\ubd84\ud558\ub2e4. \uadf8 \ub3c4\uad6c\ub9cc \uc788\uc5b4\ub3c4 \ucef4\ud30c\uc77c(.o \uc0dd\uc131), \ub9c1\ud06c(\ucee4\ub110.ld\ub85c elf \ub9cc\ub4e4\uae30), \uc2e4\ud589(qemu\uac00 elf\ub97c \uba54\ubaa8\ub9ac\uc5d0 \ubc30\uce58)\uac00 \ubaa8\ub450 \uac00\ub2a5\ud558\ub2e4.</p> <p>\ucef4\ud30c\uc77c \ub2e8\uacc4 \u2013 Host PC\uc5d0 RISC-V \ud06c\ub85c\uc2a4-\ud234\uccb4\uc778\uc774 \uc788\uc5b4\uc57c Makefile\uc774 \ud1b5\uacfc. \uc2e4\ud589 \ub2e8\uacc4 \u2013 \uc0dd\uc131\ub41c kernel\u00b7fs.img \ub4f1\uc744 QEMU\uac00 \ubd80\ud305. \ub9cc\uc57d \ucef4\ud30c\uc77c\ud55c kernel elf\ub97c qemu\uac00 \uc544\ub2cc \uc2e4\uc81c \ud558\ub4dc\uc6e8\uc5b4 \uae30\uae30\uc5d0\uc11c \ubd80\ud305\uc2dc\ud0a4\uace0 \uc2f6\ub2e4\uba74 openSBI \ub4f1\uc744 \ud65c\uc6a9\ud574\ub77c. \uac54\uac00 \ucee4\ub110 elf\ub97c 0x80000000\uc73c\ub85c \ub370\ub824\uac00\ub294 \ubd80\ud2b8\ub85c\ub354 \uc5ed\ud560\uc744 \ud55c\ub2e4.</p> <pre><code># \uc5ec\uae30\ubd80\ud130 \ubcc4\uce6d \uba85\uba85\uacfc \uc18c\uc2a4\ud30c\uc77c\uacfc \ud234 \uc900\ube44\n\n# \ubcc4\uce6d\n# GNU make\uc5d0\uc11c =\ub294 \uc7ac\uadc0\ud655\uc7a5 \ubcc0\uc218(\ub9e4\ubc88 \ubcc0\uc218\ub97c \ucc38\ucd08), :=\ub294 \ub2e8\uc21c\ud655\uc7a5 \ubcc0\uc218(\ub300\uc785\uc21c\uac04 \ub2e8 \ud55c\ubc88 \uadf8\ub4a4\ub85c \uc0c1\uc218)\nK=kernel\nU=user\n\n# \ucee4\ub110 \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c \ubaa9\ub85d\n# .c -&gt; .o\ub294 \uba85\ub839\uc5b4\ub85c \uc801\uc5b4\uc8fc\uc9c0 \uc54a\uc544\ub3c4 \ub0b4\uc7a5 \uaddc\uce59\uc73c\ub85c \uc218\ud589\nOBJS = \\\n  $K/entry.o \\\n  $K/start.o \\\n  $K/console.o \\\n  $K/printf.o \\\n  $K/uart.o \\\n  $K/kalloc.o \\\n  $K/spinlock.o \\\n  $K/string.o \\\n  $K/main.o \\\n  $K/vm.o \\\n  $K/proc.o \\\n  $K/swtch.o \\\n  $K/trampoline.o \\\n  $K/trap.o \\\n  $K/syscall.o \\\n  $K/sysproc.o \\\n  $K/bio.o \\\n  $K/fs.o \\\n  $K/log.o \\\n  $K/sleeplock.o \\\n  $K/file.o \\\n  $K/pipe.o \\\n  $K/exec.o \\\n  $K/sysfile.o \\\n  $K/kernelvec.o \\\n  $K/plic.o \\\n  $K/virtio_disk.o\n\n# riscv64-unknown-elf-\ub098 riscv64-linux-gnu-\ub294 /opt/riscv/bin\uc5d0 \uc788\uc744 \uac70\uc784\n# TOOLPREFIX = \ub85c \ub530\ub85c \uc124\uc815\ub3c4 \uac00\ub2a5\n# make toolprefix\ub85c \ub530\ub85c \uba85\uba85\ud558\uc9c0 \uc54a\uc558\uc744\ub54c \uc790\ub3d9 \ud0d0\uc0c9\n# objdump = \uc124\uba85\uc11c. \uc5ec\uae30\uc120 \ud5e4\ub354 \ud655\uc778\ud55c\uac70\uc784\n# -i\ub294 \uc9c0\uc6d0 \ud3ec\ub9f7 \ubaa9\ub85d\uc744 \ucd9c\ub825\n# 2&gt;&amp;1 = \ub9ac\ub2e4\uc774\ub809\uc158 \uba85\ub839\uc5b4. stderr\ub97c stdout\uc73c\ub85c \ud569\uccd0\ub77c\n# &gt;/dev/null = \ucd9c\ub825\uc740 \ud3d0\uae30\ud558\uace0 \uc131\uacf5 \uc2e4\ud328 \uc5ec\ubd80\ub9cc \ub0a8\uae40\n# \ud0d0\uc0c9\uc5d0 \uc131\uacf5\ud558\uba74 \ucd9c\ub825\ud558\uc5ec shell\uc758 \ubc18\ud658\uac12\uc774 \ub428\n# \uc138 \ud6c4\ubcf4\uac00 \ubaa8\ub450 \uc2e4\ud328\ud588\uc73c\uba74 exit 1\ub85c make \uc790\uccb4\ub97c \uc911\ub2e8\n# 1&gt;&amp;2 = stdout\uc744 stderr\ub85c \ud569\uccd0\uc11c \ube68\uac04 \uae00\uc528\ub85c \ub208\uc5d0 \uc798\ub744\uac8c.\nifndef TOOLPREFIX\nTOOLPREFIX := $(shell \\\n  if riscv64-unknown-elf-objdump -i 2&gt;&amp;1 | grep 'elf64-big' &gt;/dev/null 2&gt;&amp;1; \\\n    then echo 'riscv64-unknown-elf-'; \\\n    elif riscv64-linux-gnu-objdump -i 2&gt;&amp;1 | grep 'elf64-big' &gt;/dev/null 2&gt;&amp;1; \\\n    then echo 'riscv64-linux-gnu-'; \\\n    elif riscv64-unknown-linux-gnu-objdump -i 2&gt;&amp;1 | grep 'elf64-big' &gt;/dev/null 2&gt;&amp;1; \\\n    then echo 'riscv64-unknown-linux-gnu-'; \\\n    else echo \"***\" 1&gt;&amp;2; \\\n    echo \"*** Error: Couldn't find a riscv64 version of GCC/binutils.\" 1&gt;&amp;2; \\\n    echo \"*** To turn off this error, run 'gmake TOOLPREFIX= ...'.\" 1&gt;&amp;2; \\\n    echo \"***\" 1&gt;&amp;2; exit 1; fi)\nendif\n\nQEMU = qemu-system-riscv64\n\n# as vs gas \u2015 \uc774\ub984\ub9cc \ub2e4\ub974\uace0 \uc2e4\uccb4\ub294 \uac19\ub2e4\nCC = $(TOOLPREFIX)gcc\nAS = $(TOOLPREFIX)gas\nLD = $(TOOLPREFIX)ld\nOBJCOPY = $(TOOLPREFIX)objcopy\nOBJDUMP = $(TOOLPREFIX)objdump\n\n\n\n# \uc5ec\uae30\ubd80\ud130 c compiler flags\uc640 linker flags \uc124\uc815\n\n# -Wall \ubaa8\ub4e0 \uacbd\uace0 \ucf1c\uae30 -Werror \uacbd\uace0\ub97c \uc624\ub958\ub85c \ucde8\uae09 -O \uae30\ubcf8 \ucd5c\uc801\ud654(O1)\n# -fno~ \ud504\ub808\uc784 \ud3ec\uc778\ud130 \uc720\uc9c0 -ggdb~ dwarf-2 \ub514\ubc84\uadf8 \uc2ec\ubcfc \uc0bd\uc785\n# -MD .c \ud0c0\ud0b7\uacfc \ud5e4\ub354 \uc5f0\uacb0\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uc758\uc874\uc131 .d \ud30c\uc77c. \ud5e4\ub354\ub97c \uc218\uc815\ud558\uba74 \ud574\ub2f9 .o\ub9cc \uc7ac\ucef4\ud30c\uc77c\ud558\ub3c4\ub85d \ud558\uae30 \uc704\ud568.\n# -mcmodel medlow \ubaa8\ub378\uc774\uba74 \ud14d\uc2a4\ud2b8 \uc139\uc158\ub3c4 \ub370\uc774\ud130 \uc139\uc158\ub3c4 2GB(31bit) \uc774\ub0b4\uc5d0 \uc788\uc5b4\uc57c\ud568(\uc791\uc740 \ud38c\uc6e8\uc5b4). medany \ubaa8\ub378\uc774\uba74 \ud14d\uc2a4\ud2b8\ub294 \ud604\uc7ac pc\uc5d0\uc11c 2GB, \ub370\uc774\ud130\ub294 \uc5b4\ub514\ub4e0 32bit\uc774\uc5b4\uc57c \ud568. large \ubaa8\ub378\uc774\uba74 64bit \uc808\ub300\uc8fc\uc18c\ub97c \uc989\uc2dc\uac12\uc73c\ub85c \ub123\uc74c\n# \uc608\ub97c \ub4e4\uc5b4 0x80004000(\ud14d\uc2a4\ud2b8 \uc139\uc158) pc \uc9c0\uc810\uc5d0\uc11c \uc804\uc5ed\ubcc0\uc218 0x80011234(\ub370\uc774\ud130 \uc139\uc158)\ub97c \ucc3e\uc73c\ub824 \ud558\uba74 \uc774\ub294 0x0000D234 \uc989 52KB \ucc28\uc774\uc774\ub2e4. auipc t0, hi20(+0x0d000)\uacfc addi t0, t0, lo12(0x234)\ub85c \ub3c4\ub2ec\uac00\ub2a5.\n# \uc8fc\uc11d \ubd80\ubd84\uc740 \uc644\uc804 bare-metal \uc635\uc158 \uc138\ud2b8. -ffreestanding \ud45c\uc900 C \ub77c\uc774\ube0c\ub7ec\ub9ac \uc874\uc7ac\ub97c \uac00\uc815\ud558\uc9c0 \ub9d0\ub77c -mno-relax \ub9b4\ub799\uc2a4 \ucd5c\uc801\ud654\ub97c \ub054\n# \uadf8 \uc911 \ub450\uac1c\ub9cc \uc5f4\uc5b4\ub193\uc74c -fno-common \uc911\ubcf5 \uc804\uc5ed \uc2ec\ubcfc\uc744 \uc624\ub958 \ucc98\ub9ac -nostdlib \ucee4\ub110\uc774\ub2c8 crt0/libc \ub9c1\ud06c \uc548\ud568\n# -fno-buildtin-17\uc885 \ucef4\ud30c\uc77c\ub7ec \uc790\uccb4 \ucd5c\uc801\ud654 \ub300\uc0c1\uc5d0\uc11c \uc81c\uc678(\ucee4\ub110\uc774 \uad6c\ud604\ud55c \ud568\uc218\uc640 \ucda9\ub3ccx)\n# -Wno-main main \ubc18\ud658\uac12 \uc5c6\ub2e4\uace0 \uacbd\uace0x\n# -I \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac\ub97c include \ud0d0\uc0c9 \uacbd\ub85c\uc5d0 \ucd94\uac00(include \ud30c\uc77c\uc774 \uc5b4\ub514\uc5d0 \uc788\ub4e0 \ucc3e\uae30 \uac00\ub2a5)\n# \ub9c8\uc9c0\ub9c9 \uc904\uc740 cc\uac00 \uc2a4\ud0dd \ubcf4\ud638\uae30\ub97c \uc778\uc2dd(-E\ub85c \ucef4\ud30c\uc77c \uc5c6\uc774 \uc804\ucc98\ub9ac \ud588\uc744 \ub54c \uc885\ub8cc\ucf54\ub4dc 0)\ud558\uba74 \ucd94\uac00\ud558\ub77c. \uc2e4\ud328\ud558\uba74 \uc870\uc6a9\ud788 \ub118\uc5b4\uac00\ub77c.\n# \uc989 \ucee4\ub110\uc740 \uc790\uae09\uc790\uc871 \ucf54\ub4dc\ub77c libc/\uc2dc\uc791\ud30c\uc77c\uc774 \ud544\uc694 \uc5c6\uace0, \ucef4\ud30c\uc77c\ub7ec \ub0b4\uc7a5 builtin/\uc2a4\ud0dd\ubcf4\ud638/PIE\ub97c \uaebc\ub454\ub2e4\nCFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2\nCFLAGS += -MD\nCFLAGS += -mcmodel=medany\n# CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax\nCFLAGS += -fno-common -nostdlib\nCFLAGS += -fno-builtin-strncpy -fno-builtin-strncmp -fno-builtin-strlen -fno-builtin-memset\nCFLAGS += -fno-builtin-memmove -fno-builtin-memcmp -fno-builtin-log -fno-builtin-bzero\nCFLAGS += -fno-builtin-strchr -fno-builtin-exit -fno-builtin-malloc -fno-builtin-putc\nCFLAGS += -fno-builtin-free\nCFLAGS += -fno-builtin-memcpy -Wno-main\nCFLAGS += -fno-builtin-printf -fno-builtin-fprintf -fno-builtin-vprintf\nCFLAGS += -I.\nCFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo -fno-stack-protector)\n\n# PIE(\ud3ec\uc9c0\uc158 \ub3c5\ub9bd \uc2e4\ud589\uac00\ub2a5) \ub044\uae30 -\uc6b0\ubd84\ud22c 16.10 \ud234\uccb4\uc778\uc5d0\uc11c \uae30\ubcf8\uc73c\ub85c \ucf1c\uc9c8 \uc218 \uc788\uc74c\n# ifnoteq \uac19\uc9c0 \uc54a\uc73c\uba74 \uc2e4\ud589\ud558\ub77c\ub294 \ub73b. , \ub2e4\uc74c\uc774 \ube48\uce78\uc774\ub2c8\uae4c \uc55e\uc758 \uacb0\uacfc\uac00 \ucd9c\ub825\ubb3c\uc774 \uc874\uc7ac\ud558\uba74 \uc2e4\ud589\ud558\ub77c\ub294\uac8c \ub428.\n# cc\uc758 \uc2a4\ud399 \ud30c\uc77c \uc804\uccb4\ub97c \ucd9c\ub825\ud558\uc5ec \uadf8 \uc911 'f'\uac00 \uc544\ub2cc no-pie\ub97c \ucc3e\uc544\ub77c\n# \uadf8\ub798\uc11c \uc874\uc7ac\ud558\uba74 -no-pie \uc635\uc158\uc744 \ucf1c PIE \ub044\uae30\nifneq ($(shell $(CC) -dumpspecs 2&gt;/dev/null | grep -e '[^f]no-pie'),)\nCFLAGS += -fno-pie -no-pie\nendif\nifneq ($(shell $(CC) -dumpspecs 2&gt;/dev/null | grep -e '[^f]nopie'),)\nCFLAGS += -fno-pie -nopie\nendif\n\n# ELF \uc139\uc158 \uc815\ub82c \uc2dc \ud398\uc774\uc9c0 \ud06c\uae30 4KB\ub85c \uace0\uc815\nLDFLAGS = -z max-page-size=4096\n\n\n\n# \uc5ec\uae30\ubd80\ud130 \ud0c0\uae43 \uc124\uc815\n\n# kernel = .o\ub4e4 + \ub9c1\ucee4\ud30c\uc77c  + initcode\n# \uc124\uc815\ud50c\ub798\uadf8 + \ub9c1\ucee4\ud30c\uc77c\uacfc + .o\ub4e4 -&gt; \ucee4\ub110.elf \ub9cc\ub4e4\uae30\n# \ub514\uc2a4\uc5b4\uc148\ube14\ub85c \uc124\uba85\uc11c \ub9cc\ub4e4\uae30\n# \ubd88\ud544\uc694 \ud5e4\ub354 \uc0ad\uc81c\ud558\uace0 \uc2ec\ubcfc \ud14c\uc774\ube14 \ucd94\ucd9c\n$K/kernel: $(OBJS) $K/kernel.ld $U/initcode\n    $(LD) $(LDFLAGS) -T $K/kernel.ld -o $K/kernel $(OBJS) \n    $(OBJDUMP) -S $K/kernel &gt; $K/kernel.asm\n    $(OBJDUMP) -t $K/kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' &gt; $K/kernel.sym\n\n# initcode\ub780 xv6\uac00 \ubd80\ud305\uc9c1\ud6c4 userinit()\uc5d0\uc11c \uba54\ubaa8\ub9ac\uc5d0 \ubcf5\uc0ac \uc2e4\ud589\ud558\ub294 \ucd5c\ucd08 \uc0ac\uc6a9\uc790 \uacf5\uac04 \ucf54\ub4dc\n# \ucee4\ub110\uc740 \uc55e\uc5d0\uc11c \ub9cc\ub4e0\uac70\uace0 \uc774\uac74 \ud504\ub85c\uc138\uc2a4\ub2e4. \uc720\uc77c\ud558\uac8c \uc774\uac83\ub9cc \ucee4\ub110\uc5d0\ub3c4 \ub123\uc5b4\uc90c\n# \uc124\uc815\ud50c\ub798\uadf8 + .S -&gt; .o \ub9cc\ub4e4\uae30\n# -march-rv64g \ubaa8\ub4e0 \ud45c\uc900 \ud655\uc7a5 \uc0ac\uc6a9 -nostdinc \uc2dc\uc2a4\ud15c \ud5e4\ub354 \ubb34\uc2dc\n# .o -&gt; .out \ub9cc\ub4e4\uae30\n# -N .text(RX)/.data(RW)\ub97c \ubaa8\ub450 \ud558\ub098\uc758 RWX \ub369\uc5b4\ub9ac\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uc7ac\ubc30\uce58 \uc5c6\uc74c\n# -e start \uc5d4\ud2b8\ub9ac\ud3ec\uc778\ud2b8 \uc2ec\ubcfc\uc744 start\ub85c \uc124\uc815\n# -Ttext 0 \uac00\uc0c1\uc8fc\uc18c 0\ubd80\ud130 \ubc30\uce58\ud558\uc5ec xv6\ucee4\ub110\uc774 \uc720\uc800 \uacf5\uac04\uc5d0 \ub85c\ub4dc\ud558\uae30 \ud3b8\ud568\n# \uc21c\uc218 \ubc14\uc774\ub108\ub9ac \ud30c\uc77c \ub9cc\ub4e4\uace0 \uc124\uba85\uc11c \ub9cc\ub4e4\uae30\n$U/initcode: $U/initcode.S\n    $(CC) $(CFLAGS) -march=rv64g -nostdinc -I. -Ikernel -c $U/initcode.S -o $U/initcode.o\n    $(LD) $(LDFLAGS) -N -e start -Ttext 0 -o $U/initcode.out $U/initcode.o\n    $(OBJCOPY) -S -O binary $U/initcode.out $U/initcode\n    $(OBJDUMP) -S $U/initcode.o &gt; $U/initcode.asm\n\n# \ubaa8\ub4e0 c\uc640 S\uc5d0 \ub300\ud574 \uc2ec\ubcfc \uc0c9\uc778 \ud30c\uc77c \uc0dd\uc131. \uc804\ubd80 \ud0d0\uc0c9\ud558\ub3c4\ub85d \ube4c\ub4dc \uc0b0\ucd9c\ubb3c \uc758\uc874\uc744 \uac78\uc5b4\ub460.\ntags: $(OBJS) _init\n    etags *.S *.c\n\n\n\n# \uc5ec\uae30\ubd80\ud130 \uc720\uc800 \ud504\ub85c\uc138\uc2a4 \uc124\uc815\n\n# \uc720\uc800 \ud504\ub85c\uadf8\ub7a8\uc6a9 \uc815\uc801 \ub77c\uc774\ube0c\ub7ec\ub9ac \ubb36\uc74c\nULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o\n\n# \ub77c\uc774\ube0c\ub7ec\ub9ac \ucc38\uc870\ud574 \uc720\uc800 \ud504\ub85c\uadf8\ub7a8 _cat\uac19\uc740 \uc2e4\ud589\ud30c\uc77c \ub9cc\ub4e4\uae30\n# _%\ub294 \ud328\ud134 \uaddc\uce59\uc5d0 \uc758\ud574 \uc54c\uc544\uc11c _cat\uc744 \ub9cc\ub4e4\uc5b4\uc57c\uaca0\ub124? \ud558\uace0 \ud0c0\uae43 \ubc1c\ub3d9\n# $@\uc740 \uc815\ud574\uc9c4 \ud0c0\uae43\uc774\ub984 \ucc38\uc870 $^\ub294 \ubaa8\ub4e0 \uc758\uc874 \ubaa9\ub85d\n_%: %.o $(ULIB)\n    $(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^\n    $(OBJDUMP) -S $@ &gt; $*.asm\n    $(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' &gt; $*.sym\n\n# perl \uc2a4\ud06c\ub9bd\ud2b8 usys.pl\uc744 .o\ub85c \ub9cc\ub4e4\uae30\n$U/usys.S : $U/usys.pl\n    perl $U/usys.pl &gt; $U/usys.S\n\n$U/usys.o : $U/usys.S\n    $(CC) $(CFLAGS) -c -o $U/usys.o $U/usys.S\n\n# \ud504\ub85c\uc138\uc2a4 \ud14c\uc774\ube14\uc744 \ucc44\uc6b0\ub294 \ud14c\uc2a4\ud2b8 \uc2e4\ud589\ud30c\uc77c \ub9cc\ub4e4\uae30\n# -N .text/.data\ub97c \ud55c \ub369\uc5b4\ub9ac RWX\uc5d0\n# -e main \uc5d4\ud2b8\ub9ac \uc2ec\ubcfc\uc744 main\uc73c\ub85c\n# -Ttext 0 \uac00\uc0c1\uc8fc\uc18c 0\uc73c\ub85c \ub9c1\ud06c\n$U/_forktest: $U/forktest.o $(ULIB)\n    $(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $U/_forktest $U/forktest.o $U/ulib.o $U/usys.o\n    $(OBJDUMP) -S $U/_forktest &gt; $U/forktest.asm\n\n# \ud638\uc2a4\ud2b8(\ub0b4pc)\uc6a9 \uc2e4\ud589\ud30c\uc77c mkfs \ub9cc\ub4e4\uae30\n# \ucee4\ub110\uacfc mkfs\uac04 \uad6c\uc870\uccb4\uc640 \uc0c1\uc218\uac00 \uac19\ub3c4\ub85d \ucee4\ub110\uc5d0\uc11c fs.h \ud30c\uc77c\uc2dc\uc2a4\ud15c \uc815\uc758 param.h \uc0c1\uc218 \uc815\uc758 \uac00\uc838\uc634\n# \ub124\uc774\ud2f0\ube0c gcc\nmkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h\n    gcc -Werror -Wall -I. -o mkfs/mkfs mkfs/mkfs.c\n\n# GNU make\uc5d0\uc11c\ub294 \uc911\uac04 \ud30c\uc77c .o\ub97c \ub514\ud3f4\ud2b8\ub85c \uc0ad\uc81c\ud558\uc9c0\ub9cc, \uacf5\uc720\ud558\uac70\ub098 fs.img \uc7ac\uc0dd\uc131\uc744 \ub9c9\uae30 \uc704\ud574 \ub0a8\uaca8\ub460\n.PRECIOUS: %.o\n\n# \uc0ac\uc6a9\ud560 \uc720\uc800 \ud504\ub85c\uadf8\ub7a8 \ubaa9\ub85d\nUPROGS=\\\n    $U/_cat\\\n    $U/_echo\\\n    $U/_forktest\\\n    $U/_grep\\\n    $U/_init\\\n    $U/_kill\\\n    $U/_ln\\\n    $U/_ls\\\n    $U/_mkdir\\\n    $U/_rm\\\n    $U/_sh\\\n    $U/_stressfs\\\n    $U/_usertests\\\n    $U/_grind\\\n    $U/_wc\\\n    $U/_zombie\\\n\n# \uc720\uc800 \ud504\ub85c\uadf8\ub7a8 \uc774\ubbf8\uc9c0 \ud30c\uc77c \uc0dd\uc131(\ud638\uc2a4\ud2b8\uc5d0\uc11c)\nfs.img: mkfs/mkfs README $(UPROGS)\n    mkfs/mkfs fs.img README $(UPROGS)\n\n# \ud30c\uc77c\uc774 \uc544\uc9c1 \uc5c6\ub354\ub77c\ub3c4(\uccab\ube4c\ub4dc) \ub118\uc5b4\uac00\ub294 \uc7a5\uce58\n-include kernel/*.d user/*.d\n\n\n\n# \uc5ec\uae30\ubd80\ud130 \ucd94\uac00 \uae30\ub2a5\n\nclean: \n    rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \\\n    */*.o */*.d */*.asm */*.sym \\\n    $U/initcode $U/initcode.out $K/kernel fs.img \\\n    mkfs/mkfs .gdbinit \\\n        $U/usys.S \\\n    $(UPROGS)\n\n# \ud638\uc2a4\ud2b8 UID\ub85c\ubd80\ud130 \uace0\uc720\ud55c GDB TCP \ud3ec\ud2b8 \uacc4\uc0b0. \ubab0\ub9ac\uc9c0 \uc54a\uac8c.\nGDBPORT = $(shell expr `id -u` % 5000 + 25000)\n# qemu \ub3c4\uc6c0\ub9d0\uc5d0 -gdb \uc635\uc158\uc774 \uc788\uc73c\uba74 -gdb tcp port \ud615\uc2dd \uc0ac\uc6a9, \uc5c6\uc73c\uba74 \uad6c\ubc84\uc804 -s -p port \uc0ac\uc6a9\nQEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\\n    then echo \"-gdb tcp::$(GDBPORT)\"; \\\n    else echo \"-s -p $(GDBPORT)\"; fi)\n# \ud558\ud2b8\uc218\nifndef CPUS\nCPUS := 3\nendif\n\n# -bios none: OpenSBI\uac19\uc740 \ud38c\uc6e8\uc5b4 \uac74\ub108\ub700 -kernel: \ucee4\ub110 elf \uc9c1\uc811 \ub85c\ub4dc\n# -m 128M: RAM 128MB -smp $(CPUS): \ud558\ud2b8\uc218 -nographic: \ucf58\uc194\ub9cc\n# virtio-mmio \ucd94\uac00. fs.img \ub123\uae30.\nQEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic\nQEMUOPTS += -global virtio-mmio.force-legacy=false\nQEMUOPTS += -drive file=fs.img,if=none,format=raw,id=x0\nQEMUOPTS += -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0\n\nqemu: $K/kernel fs.img\n    $(QEMU) $(QEMUOPTS)\n\n# GDBPORT\ub97c \ub85c\uceec\uc5d0\uc120 1234\ub85c \uce58\ud658. \uadf8\ub9ac\uace0 \uc790\ub3d9\uc2e4\ud589.\n.gdbinit: .gdbinit.tmpl-riscv\n    sed \"s/:1234/:$(GDBPORT)/\" &lt; $^ &gt; $@\n\n# -S: qemu\ub97c \ub9ac\uc14b \uc9c1\ud6c4 \uc815\uc9c0. \ub2e4\ub978 \ucc3d\uc5d0\uc11c gdb \uc2e4\ud589\ud558\uba74 \ub428\nqemu-gdb: $K/kernel .gdbinit fs.img\n    @echo \"*** Now run 'gdb' in another window.\" 1&gt;&amp;2\n    $(QEMU) $(QEMUOPTS) -S $(QEMUGDB)\n</code></pre> <pre><code>           \u250c\u2500 kernel (S-mode) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n           \u2502 main() \u2192 userinit()                         \u2502\n           \u2502            \u2502                                \u2502\n</code></pre> <ol> <li>\ubd80\ud305 \uc644\ub8cc \u2500\u2500\u2518            \u25bc                                \u2502</li> <li>initproc \uc0dd\uc131          (\ucee4\ub110 \ub0b4\uc7a5)                         \u2502       \u2192 <code>p-&gt;pagetable</code>   +--------------------------------+  \u2502       \u2192 <code>memmove()</code>      |   RAW   initcode   binary      |  \u2502       \u2192 <code>p-&gt;trapframe</code>   +--------------------------------+  \u2502       \u2192 <code>epc = 0</code>        ^  (VA 0x0)                       \u2502                \u2502         \u2502  4 KiB  |R/W/X|                 \u2502                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                          \u2193 sret (U-mode \uc9c4\uc785)</li> <li>initcode \uc2e4\ud589 (U-mode) \uac04\ub2e8\ud55c hand-written \uc5b4\uc148\ube14\ub9ac    ```asm    li  a0, 0        # argv=0    auipc a1, init   # \"init\" \ubb38\uc790\uc5f4    ecall SYS_exec   # exec(\"/init\")    ecall SYS_exit   # \ub9cc\uc57d \uc2e4\ud328\ud558\uba74 \uc885\ub8cc</li> </ol>"},{"location":"3-MMU/","title":"MMU","text":""},{"location":"3-MMU/#xv6-riscv-vmc","title":"xv6-riscv\uc758 vm.c \ud30c\uc77c\uc744 \uc77d\uc5b4\ubcf4\uc790","text":""},{"location":"3-MMU/#mmu","title":"\ubaa9\ud45c: MMU \uc774\ud574","text":"<p>\uc791\uc131\uc790: kkongnyang2 \uc791\uc131\uc77c: 2025-06-25</p>"},{"location":"3-MMU/#0","title":"0&gt; \uac1c\ub150 \uc815\ub9ac","text":"<p>\ud398\uc774\uc9c0? \uacf5\uac04\uc744 \uc5f0\uc18d\uc801\uc73c\ub85c \ud560\ub2f9\ud558\uc9c0 \uc54a\uace0 \ud398\uc774\uc9c0\ub77c\ub294 \ub2e8\uc704\ub85c \ucabc\uac1c\uc11c \uc0ac\uc6a9\ud55c\ub2e4. \ud504\ub85c\uc138\uc2a4\uc758 \uba54\ubaa8\ub9ac\ub3c4, \uc2e4\uc81c physical \uba54\ubaa8\ub9ac\ub3c4 \ud398\uc774\uc9c0 4KB \ub2e8\uc704\ub85c \ucabc\uac20\ub2e4.</p> <p>\uadf8\ub9ac\uace0 \uc774\ub7ec\ud55c VPN(virtual page number)\uacfc PEN(physical frame number)\ub85c \ub9e4\ud551\ud574\uc8fc\ub294 \ud45c\uac00 page table\uc774\ub2e4.(\uc6d0\uc18c\ub294 PTE) \ud55c \ud504\ub85c\uc138\uc2a4\uc5d0 \ub300\ud574 page table \uc808\ubc18\uc740 \ud504\ub85c\uc138\uc2a4 PTE, \uc808\ubc18\uc740 \uacf5\ud1b5\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \ucee4\ub110 PTE \uc774\ub2e4.</p> <p>\uadf8\ub7fc \uc774 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc2e4\uccb4\ub294 \uc5b4\ub514\uc5d0 \uc800\uc7a5\ub418\ub0d0? \uacf5\ud1b5 \ucee4\ub110 PTE\ub294 \ubd80\ud305\uc2dc .text, .data \ubc16 kalloc() \ub3d9\uc801\ud560\ub2f9\uc5d0 \uc874\uc7ac\ud558\uace0 satp CSR\uc744 \ud1b5\ud574 \ubd80\ub978\ub2e4. \uac01 \ud504\ub85c\uc138\uc2a4 PTE\ub294 \uc5ed\uc2dc kalloc() \ub3d9\uc801\ud560\ub2f9\uc5d0 \uc800\uc7a5\ub418\uace0, \uac1c\ubcc4 root PT \uc8fc\uc18c\ub97c \uc800\uc7a5\ud55c\ub2e4.</p> <p>\uadf8\ub7fc \ud398\uc774\uc9c0 \ud14c\uc774\ube14\uc5d0\uc11c \uac01 PTE\ub97c \uc5b4\ub5bb\uac8c \ucc3e\ub290\ub0d0? VA\ub97c 4\uc870\uac01\uc73c\ub85c \ub04a\uc5b4 3\uac1c\uc758 index\uc640 page offset\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. \uc774 \ubaa9\ucc28\ub85c \ud398\uc774\uc9c0 \ud14c\uc774\ube14\uc744 \uad6c\uc131\ud558\uae30\uc5d0 \ud55c\uc601\uc0ac\uc804 \ucc98\ub7fc \ucc3e\uc744\uc218 \uc788\ub294 \uac83\uc774\ub2e4.</p> <p>\ucc38\uace0\ub85c \ub514\uc2a4\ud06c\uc5d0\uc11c\ub294 \ube14\ub85d\uc774\ub77c\ub294 \ub2e8\uc704\ub97c \uc4f0\uace0, inode \uba54\ud0c0\ub370\uc774\ud130\ub97c \ud1b5\ud574 \ube14\ub85d\ub07c\ub9ac \uc5f0\uacb0\ub41c\ub2e4. \uc774 \ub514\uc2a4\ud06c\uc758 \ub370\uc774\ud130\ub97c \uba54\ubaa8\ub9ac\ub85c \uc62c\ub9b4 \ub54c xv6\uc740 \uac01 \ud398\uc774\uc9c0\ub9c8\ub2e4 VA \ud398\uc774\uc9c0\ub97c \ud560\ub2f9\ud558\uace0 memcpy\ud55c\ub2e4. </p>"},{"location":"3-MMU/#1","title":"1&gt; \uc6a9\uc5b4 \uc815\ub9ac","text":"<pre><code>\uac00\uc0c1\uc8fc\uc18c (VA, Virtual Address)        // \uc0ac\uc6a9\uc790\u00b7\ucee4\ub110 \ucf54\ub4dc\uac00 \uc4f0\ub294 \ub17c\ub9ac\uc801 \uc8fc\uc18c\n\ubb3c\ub9ac\uc8fc\uc18c (PA, Physical Address)        // \uc2e4\uc81c DRAM \uce69\uc758 \uc140 \uc704\uce58\nMMU (Memory Management Unit)           // VA\u2192PA \ubcc0\ud658\uc744 \ub2f4\ub2f9\ud558\ub294 \ud558\ub4dc\uc6e8\uc5b4\nTLB (Translation Look-aside Buffer)    // \ubcc0\ud658 \uacb0\uacfc\ub97c \uce90\uc2dc\ud574 \uc18d\ub3c4\ub97c \ub192\uc774\ub294 MMU \ub0b4\ubd80 \uce90\uc2dc\nSATP (System Address Translation &amp; Protection) // RISC-V\uac00 \ud604\uc7ac \uc0ac\uc6a9\ud560 \ucd5c\uc0c1\uc704 \ud398\uc774\uc9c0\ud14c\uc774\ube14\uc758 \ubb3c\ub9ac\uc8fc\uc18c, \ubaa8\ub4dc, ASID\ub97c \ub2f4\ub294 CSR\nPTE (Page Table Entry)                 // VA \ubc94\uc704 \ud558\ub098\uc640 \ub300\uc751\ud558\ub294 \uc124\uc815(PPN\u00b7\uad8c\ud55c \ube44\ud2b8 \ub4f1)\uc744 \ub2f4\uc740 64bit \uad6c\uc870\uccb4\nVPN (Virtual Page Number)              // VA\ub97c \ud398\uc774\uc9c0 \ud06c\uae30(4 KiB)\ub85c \ub098\ub208 \uc778\ub371\uc2a4 3\ub2e8( Sv39 )/4\ub2e8( Sv48 )\nPPN (Physical Page Number)             // \uc2e4\uc81c \ubb3c\ub9ac \ud398\uc774\uc9c0 \ud504\ub808\uc784 \ubc88\ud638\nR/W/X \ube44\ud2b8                             // Read/Write/Execute \ud5c8\uac00 \ube44\ud2b8\nU/S \ube44\ud2b8                               // U-mode(\uc720\uc800)/S-mode(\ucee4\ub110) \uc811\uadfc \ud5c8\uac00\nA/D \ube44\ud2b8                               // Accessed/Dirty \u2013 \ud398\uc774\uc9c0 \uc0ac\uc6a9\u00b7\uc4f0\uae30 \ubc1c\uc0dd \uc2dc MMU\uac00 \uc790\ub3d9 set\nsfence.vma zero,zero                   // TLB \uc804\ubd80 \ubb34\ud6a8\ud654(\ud398\uc774\uc9c0\ud14c\uc774\ube14 \ubc14\uafbc \ub4a4 \ud544\uc218)\ncsrw satp, t1                          // SATP CSR\uc5d0 \uc0c8\ub85c\uc6b4 \ud398\uc774\uc9c0\ud14c\uc774\ube14(root PPN) \ub4f1\ub85d\n</code></pre>"},{"location":"3-MMU/#2","title":"2&gt; \ud750\ub984 \uc815\ub9ac","text":"<pre><code>start.c      \u2192 kvminit()         \u2192 vm.c\n              (\ucee4\ub110\uc804\uc6a9)              \u251c\u2500 kvmmake()      // \ucee4\ub110 \uc790\uccb4 map\n                                    \u251c\u2500 kvmmap()       // \uc2e4\uc81c page \u2192 VA \ub9e4\ud551 \ud5ec\ud37c\n                                    \u251c\u2500 kvminithart()  // CSR\u00b7TLB init\n                fork(), exec() \u2193\n                                    \u251c\u2500 uvminit()      // \uc720\uc800 \ucd08\uae30 page\n                                    \u251c\u2500 uvmalloc()     // \uc720\uc800 \uc8fc\uc18c\uacf5\uac04 \uc131\uc7a5\n                                    \u2514\u2500 walk(), mappages() \ub4f1\n</code></pre> <pre><code>\ubb3c\ub9ac\uc8fc\uc18c\n0x8000_0000 \u2500\u252c\u2500 .text\n             \u2502\n             \u251c\u2500 .rodata\n             \u251c\u2500 .data                  \u2605 kernel_pagetable \ud3ec\uc778\ud130 \ubcc0\uc218\n             \u251c\u2500 .bss                   (\uac12\uc740 \uc544\uc9c1 0)\nend \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Free RAM managed by kalloc() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502                                                     \u2502\n             \u2502 0x8010_0000  \u2500\u2500 kernel_pagetable (root PT 4 KiB) \u25c0\u2500\u2510\u2502\n             \u2502 0x8010_1000  \u2500\u2500 per-process A root PT             \u2502\u2502\n             \u2502 0x8010_2000  \u2500\u2500 per-process B root PT             \u2502\u2502\n             \u2502   ...         \u2500\u2500 L1/L0 PT, kernel stacks, buffers \u2502\u2502\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n0x8800_0000 \u2500 PHYSTOP  (xv6 \uac00\uc6a9 RAM \uc0c1\ud55c)\n</code></pre> <p><pre><code> 63             39 38           30 29           21 20           12 11            0\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n|   sign-extend  |   VPN[2]     |   VPN[1]     |   VPN[0]     | page offset    |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   (25 bits)        (9 bits)       (9 bits)       (9 bits)         (12 bits)\n</code></pre> \ud398\uc774\uc9c0 \ud06c\uae30 4KB -&gt; offset 12bit \ub808\ubca8 \uc218 3\ub2e8\uacc4. root PTE -&gt; \uc911\uac04 -&gt; leaf</p> <p><pre><code>root PT (9 bits)\n\u250c\u2500\u2500\u2500\u2500\u25000         255\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500256        511\u2500\u2500\u2500\u2500\u2510\n\u2502   user area entries   \u2502  kernel area entries \u2502\n\u2502 (\uac01 \ud504\ub85c\uc138\uc2a4\ub9c8\ub2e4 \ub2ec\ub77c) \u2502 (\ubaa8\ub4e0 \ud504\ub85c\uc138\uc2a4\uac00 \ub3d9\uc77c)\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> root\uc758 \uc544\ub798 \uc601\uc5ed\uae4c\uc9c0 \ud569\uce58\uba74 38\ube44\ud2b8\ub294 user area, 38\ube44\ud2b8\ub294 kernel area\uc774\ub2e4.</p> <p><pre><code> 63          10 9    8 7 6 5 4 3 2 1 0\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n|  PPN[2:0]   | RSVD |  D A G U X W R|\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   44 bits      2      \uad8c\ud55c\u00b7\uc0c1\ud0dc \ube44\ud2b8\n</code></pre> PTE \ud615\uc2dd(64bit=8byte) </p>"},{"location":"3-MMU/#3-vmc","title":"3&gt; vm.c","text":"<pre><code>#include \"param.h\"\n#include \"types.h\"\n#include \"memlayout.h\"\n#include \"elf.h\"\n#include \"riscv.h\"\n#include \"defs.h\"\n#include \"fs.h\"\n\n// pagetable_t : \ud558\ub098\ub2f9 8byte\uc778 PTE 512\uac1c\ub97c \ub2f4\uc740 \ud14c\uc774\ube14 \ud55c \ud398\uc774\uc9c0\ub97c \uac00\ub9ac\ud0a4\ub294 \ud0c0\uc785.\n// \ucee4\ub110 \ub8e8\ud2b8 \ud398\uc774\uc9c0\ud14c\uc774\ube14 \uba85\uba85\npagetable_t kernel_pagetable;\n\nextern char etext[];  // kernel.ld\uc5d0\uc11c .text \ub05d\ub098\ub294 \ud45c\uc2dc\n\nextern char trampoline[];\n\n// \ucee4\ub110 \ud14c\uc774\ube14 \uc0dd\uc131\npagetable_t\nkvmmake(void)\n{\n  pagetable_t kpgtbl;\n\n  kpgtbl = (pagetable_t) kalloc();      // \ud398\uc774\uc9c0 \ud558\ub098 \ud560\ub2f9\n  memset(kpgtbl, 0, PGSIZE);            // PTE 512\uac1c \ubaa8\ub450 0\uc73c\ub85c \ucd08\uae30\ud654 \n\n  // MMIO \uc601\uc5ed\ub4e4 PTE \ub9cc\ub4e4\uae30. \uc77d\uae30/\uc4f0\uae30 \ud5c8\uc6a9\n  kvmmap(kpgtbl, UART0, UART0, PGSIZE, PTE_R | PTE_W);\n  kvmmap(kpgtbl, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);\n  kvmmap(kpgtbl, PLIC, PLIC, 0x4000000, PTE_R | PTE_W);\n\n  // \ucee4\ub110 .text \uc601\uc5ed\ub4e4 PTE \ub9cc\ub4e4\uae30. \uc77d\uae30/\uc2e4\ud589 \ud5c8\uc6a9\n  kvmmap(kpgtbl, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);\n\n  // \ucee4\ub110 .data \uc601\uc5ed\ub4e4 PTE \ub9cc\ub4e4\uae30. \uc77d\uae30/\uc4f0\uae30 \ud5c8\uc6a9\n  kvmmap(kpgtbl, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);\n\n  // \ucee4\ub110 .trampoline \uc601\uc5ed\ub4e4 PTE \ub9cc\ub4e4\uae30.(\ucd5c\uace0 VA) \uc77d\uae30/\uc2e4\ud589 \ud5c8\uc6a9\n  kvmmap(kpgtbl, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);\n\n  // \uac01 \ud504\ub85c\uc138\uc2a4\uc6a9 \ucee4\ub110 \uc2a4\ud0dd 2\ud398\uc774\uc9c0 \uc601\uc5ed\uc744 \uc608\uc57d \ubc0f \ub9e4\ud551\n  proc_mapstacks(kpgtbl);\n\n  return kpgtbl;\n}\n\n// \ubd80\ud305\uc2dc hart0\uc5d0\uc11c \ub2e8 \ud55c\ubc88 \ucee4\ub110 \ud14c\uc774\ube14 initialize\nvoid\nkvminit(void)\n{\n  kernel_pagetable = kvmmake();\n}\n\n// \ubd80\ud305\uc2dc \uac01 \ud558\ud2b8\ub9c8\ub2e4 \ub2e8 \ud55c\ubc88 \ucee4\ub110 \ud14c\uc774\ube14 initialize.\nvoid\nkvminithart()\n{\n  sfence_vma();                 // \ud39c\uc2a4\n\n  w_satp(MAKE_SATP(kernel_pagetable));  // satp CSR\uc5d0 kernel_pagetable \uc801\uc6a9\n\n  sfence_vma();                 // TLB \uce90\uc2dc \ubb34\ud6a8\ud654\n}\n\n// PTE \ucc3e\uae30 or \uc0dd\uc131(alloc\uc5d0 \ub530\ub77c)\npte_t *\nwalk(pagetable_t pagetable, uint64 va, int alloc)\n{\n  if(va &gt;= MAXVA)               // \uc720\uc800 \ubc94\uc704(38bit) \ucd08\uacfc \uc811\uadfc\uc740 \uc989\uc2dc \ud328\ub2c9\n    panic(\"walk\");\n\n  for(int level = 2; level &gt; 0; level--) {      // L2,L1\uae4c\uc9c0 \ud0d0\uc0c9\n    pte_t *pte = &amp;pagetable[PX(level, va)];     // va\uc5d0\uc11c \ud574\ub2f9 \ub808\ubca8 9bit \ucd94\ucd9c\ud574\uc11c \ud398\uc774\uc9c0\ud14c\uc774\ube14\uc5d0\uc11c \uadf8 \uc778\ub371\uc2a4 pte \uac00\uc838\uc624\uae30\n    if(*pte &amp; PTE_V) {                          // valid(\uc874\uc7ac)\ud558\uba74\n      pagetable = (pagetable_t)PTE2PA(*pte);    // \ud558\uc704 PT \ubb3c\ub9ac\uc8fc\uc18c \ubc18\ud658\n    } else {                                    // \uc5c6\uc73c\uba74\n      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0) // alloc\ub3c4 \uc548\ucf1c\uc84b\uc73c\uba74\n        return 0;                               // \uc2e4\ud328\n      memset(pagetable, 0, PGSIZE);             // \uc0c8 \ud558\uc704 PT set\n      *pte = PA2PTE(pagetable) | PTE_V;         // \uc0c1\uc704 PTE\uc5d0 \uae30\ub85d(V=1)\n    }\n  }\n  return &amp;pagetable[PX(0, va)];                 // L0 \uc778\ub371\uc2a4\ub791 \ub611\uac19\uc740 leaf PTE \ubb3c\ub9ac\uc8fc\uc18c \ubc18\ud658\n}\n\n// PPN \ucd94\ucd9c\nuint64\nwalkaddr(pagetable_t pagetable, uint64 va)\n{\n  pte_t *pte;\n  uint64 pa;\n\n  if(va &gt;= MAXVA)       // \uc720\uc800 \ubc94\uc704(38bit) \ucd08\uacfc\uc2dc \uac70\ubd80\n    return 0;\n\n  pte = walk(pagetable, va, 0);       // leaf PTE \ucc3e\uae30\n  if(pte == 0)                        // \uc874\uc7ac\uc548\ud558\uba74 \uc2e4\ud328\n    return 0;\n  if((*pte &amp; PTE_V) == 0)             // valid \uc548\ud558\uba74 \uc2e4\ud328\n    return 0;\n  if((*pte &amp; PTE_U) == 0)             // U \ubaa8\ub4dc \uc544\ub2c8\uba74 \uc2e4\ud328\n    return 0;\n  pa = PTE2PA(*pte);                  // PPN \ucd94\ucd9c\n  return pa;\n}\n\n// \ucee4\ub110 \uc804\uc6a9(kvmmake\uc5d0\uc11c\ub9cc \ud638\ucd9c)\nvoid\nkvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)\n{\n  // mappages\uac00 0\uc744 \ub9ac\ud134\ud558\uba74 PT \ub9cc\ub4e4\uae30\uc5d0 \uc131\uacf5\ud55c \uac83. \uc2e4\ud328\ud558\uba74 \ud328\ub2c9\n  if(mappages(kpgtbl, va, sz, pa, perm) != 0)\n    panic(\"kvmmap\");\n}\n\n// \ud14c\uc774\ube14 \ub9cc\ub4e4\uae30\nint\nmappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)\n{\n  uint64 a, last;\n  pte_t *pte;\n\n  if((va % PGSIZE) != 0)          // \ud398\uc774\uc9c0\ub2f9 \uccab VA(page offset=0)\ub9cc PTE \ub9cc\ub4e4\uc5b4\uc90c\n    panic(\"mappages: va not aligned\");\n\n  if((size % PGSIZE) != 0)        // \ub9cc\ub4e4 \ud14c\uc774\ube14 \ud06c\uae30\ub3c4 4KB \ub2e8\uc704\ub85c\n    panic(\"mappages: size not aligned\");\n\n  if(size == 0)               // \uae38\uc774 0\uc740 \uc758\ubbf8\uac00 \uc5c6\uc74c\n    panic(\"mappages: size\");\n\n  a = va;                       // \ud604\uc7ac VA\n  last = va + size - PGSIZE;    // \ub9c8\uc9c0\ub9c9 VA\n  for(;;){\n    if((pte = walk(pagetable, a, 1)) == 0)    // leaf PTE \uc0dd\uc131\n      return -1;                              // \uc2e4\ud328\uc2dc -1\n    if(*pte &amp; PTE_V)                          // \uc774\ubbf8 valid\ud558\uba74 \uc624\ub958\n      panic(\"mappages: remap\");\n    *pte = PA2PTE(pa) | perm | PTE_V;         // PTE \ub0b4\uc6a9 (PPN\uacfc \uad8c\ud55c\ube44\ud2b8) \uc138\ud305\n    if(a == last)                             // last\uba74 break\n      break;\n    a += PGSIZE;                              // \uc544\uc9c1 \uc548\ub05d\ub0ac\uc73c\uba74 \ub2e4\uc74c \ud398\uc774\uc9c0\n    pa += PGSIZE;\n  }\n  return 0;\n}\n\n// PTE \ubb34\ud6a8\ud654 \ubc0f \ud574\ub2f9 PA free\nvoid\nuvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)\n{\n  uint64 a;\n  pte_t *pte;\n\n  if((va % PGSIZE) != 0)\n    panic(\"uvmunmap: not aligned\");\n\n  for(a = va; a &lt; va + npages*PGSIZE; a += PGSIZE){\n    if((pte = walk(pagetable, a, 0)) == 0)          // leaf PTE \ucc3e\uae30\n      panic(\"uvmunmap: walk\");\n    if((*pte &amp; PTE_V) == 0)                         // valid \uc5c6\uc73c\uba74 \uc624\ub958\n      panic(\"uvmunmap: not mapped\");\n    if(PTE_FLAGS(*pte) == PTE_V)                    // leaf\uac00 \uc544\ub2c8\uba74 \uc624\ub958\n      panic(\"uvmunmap: not a leaf\");\n    if(do_free){                                    // \ud574\ub2f9 PA free\n      uint64 pa = PTE2PA(*pte);\n      kfree((void*)pa);\n    }\n    *pte = 0;                                       // PTE \ubb34\ud6a8\ud654\n  }\n}\n\n// \ube48 \uc0ac\uc6a9\uc790 \ud14c\uc774\ube14 \ub9cc\ub4e4\uae30\npagetable_t\nuvmcreate()\n{\n  pagetable_t pagetable;\n  pagetable = (pagetable_t) kalloc();     // 4KB \ud398\uc774\uc9c0 \ud55c\uc7a5 -&gt; root PT\n  if(pagetable == 0)            \n    return 0;\n  memset(pagetable, 0, PGSIZE);           // 512\uac1c PTE \uc804\ubd80 0\uc73c\ub85c \ucd08\uae30\ud654\n  return pagetable;\n}\n\n// initcode \ubb3c\ub9ac \uacf5\uac04 \ud560\ub2f9\ud558\uace0 \ud14c\uc774\ube14(\uc55e\ucabd \uc720\uc800 \ud504\ub85c\uc138\uc2a4)\ub3c4 \ub9cc\ub4e4\uae30\n// \ucee4\ub110\uc740 \ud30c\uc77c \uc2dc\uc2a4\ud15c\uc744 \ucd08\uae30\ud654\ud560\ub54c\uae4c\uc9c0 S\ubaa8\ub4dc\uc774\uc9c0\ub9cc \uc774 PT\ub294 U\ubaa8\ub4dc \uc804\uc6a9\uc73c\ub85c \uc4f8 \uc218 \uc788\uac8c\nvoid\nuvmfirst(pagetable_t pagetable, uchar *src, uint sz)\n{\n  char *mem;\n\n  if(sz &gt;= PGSIZE)                        // initcode \ud06c\uae30(\uc8fc\uc18c \ubc94\uc704) \uac80\uc0ac\n    panic(\"uvmfirst: more than a page\");\n  mem = kalloc();                         // \ubb3c\ub9ac \uacf5\uac04 mem 4KB\ub9cc\ud07c \ud560\ub2f9\n  memset(mem, 0, PGSIZE);                 // \uc804\ubd80 0\uc73c\ub85c \ucd08\uae30\ud654\n  // 0x00000000(VA) \uacfc mem(\ubb3c\ub9ac) \ub9e4\ud551\ud558\ub294 \ud14c\uc774\ube14 \ub9cc\ub4e4\uae30\n  // WRX \ud5c8\uc6a9\ud558\uace0 U \ubaa8\ub4dc\ub3c4 \uc811\uadfc \uac00\ub2a5\ud558\uac8c\n  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);\n  memmove(mem, src, sz);                // \uac00\uc9c0\uace0 \uc788\ub358 initcode \ubc14\uc774\ud2b8\ub97c \ud574\ub2f9 \ubb3c\ub9ac\ud398\uc774\uc9c0\ub85c \ubcf5\uc0ac\n}\n\n// \uc8fc\uc18c \ud655\uc7a5\nuint64\nuvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)\n{\n  char *mem;\n  uint64 a;\n\n  if(newsz &lt; oldsz)               // \uc774\uc804\ubcf4\ub2e4 \uc791\uc544\uc9c4 \uc694\uccad? -&gt; \uadf8\ub300\ub85c \ub460\n    return oldsz;\n\n  oldsz = PGROUNDUP(oldsz);       // \uc2dc\uc791\uc810\uc744 \ud398\uc774\uc9c0 \uacbd\uacc4\ub85c \uc62c\ub9bc\n  for(a = oldsz; a &lt; newsz; a += PGSIZE){   // \ud55c \ud398\uc774\uc9c0\uc529 \uc804\uc9c4\n    mem = kalloc();                         // \ubb3c\ub9ac \uacf5\uac04 \ud560\ub2f9\n    if(mem == 0){                           // \uc2e4\ud328 -&gt; \ub864\ubc31\n      uvmdealloc(pagetable, a, oldsz);      // \uc815\ub9ac \ud6c4 0 \ubc18\ud658\n      return 0;\n    }\n    memset(mem, 0, PGSIZE);                 // \uacf5\uac04 0\uc73c\ub85c \ucd08\uae30\ud654\n    // \ub9e4\ud551 \uc2e4\ud328\uc2dc\n    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){\n      kfree(mem);                           // \uacf5\uac04 \ubc18\ub0a9\n      uvmdealloc(pagetable, a, oldsz);      // \ub2e4\uc2dc oldsz\ub85c \ud14c\uc774\ube14 \ub864\ubc31\n      return 0;\n    }\n  }\n  return newsz;                             // \ub9e4\ud551 \uc131\uacf5\uc2dc \uc0c8 sz\n}\n\n// \uc8fc\uc18c \ucd95\uc18c\nuint64\nuvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)\n{\n  if(newsz &gt;= oldsz)\n    return oldsz;\n\n  // PTE \ubb34\ud6a8\ud654 \ubc0f \ud574\ub2f9 PA free\n  if(PGROUNDUP(newsz) &lt; PGROUNDUP(oldsz)){\n    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;\n    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);\n  }\n\n  return newsz;\n}\n\n// tree \uc790\uccb4\ub97c \uc7ac\uadc0\uc801 free\nvoid\nfreewalk(pagetable_t pagetable)\n{\n  // there are 2^9 = 512 PTEs in a page table.\n  for(int i = 0; i &lt; 512; i++){\n    pte_t pte = pagetable[i];\n    if((pte &amp; PTE_V) &amp;&amp; (pte &amp; (PTE_R|PTE_W|PTE_X)) == 0){\n      // this PTE points to a lower-level page table.\n      uint64 child = PTE2PA(pte);\n      freewalk((pagetable_t)child);\n      pagetable[i] = 0;\n    } else if(pte &amp; PTE_V){\n      panic(\"freewalk: leaf\");\n    }\n  }\n  kfree((void*)pagetable);\n}\n\n// \uc0ac\uc6a9\uc790 \uacf5\uac04 \uc804\uccb4 free(PTE + PA + \ud2b8\ub9ac)\nvoid\nuvmfree(pagetable_t pagetable, uint64 sz)\n{\n  if(sz &gt; 0)\n    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);\n  freewalk(pagetable);\n}\n\n// Given a parent process's page table, copy\n// its memory into a child's page table.\n// Copies both the page table and the\n// physical memory.\n// returns 0 on success, -1 on failure.\n// frees any allocated pages on failure.\nint\nuvmcopy(pagetable_t old, pagetable_t new, uint64 sz)\n{\n  pte_t *pte;\n  uint64 pa, i;\n  uint flags;\n  char *mem;\n\n  for(i = 0; i &lt; sz; i += PGSIZE){\n    if((pte = walk(old, i, 0)) == 0)\n      panic(\"uvmcopy: pte should exist\");\n    if((*pte &amp; PTE_V) == 0)\n      panic(\"uvmcopy: page not present\");\n    pa = PTE2PA(*pte);\n    flags = PTE_FLAGS(*pte);\n    if((mem = kalloc()) == 0)\n      goto err;\n    memmove(mem, (char*)pa, PGSIZE);\n    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){\n      kfree(mem);\n      goto err;\n    }\n  }\n  return 0;\n\n err:\n  uvmunmap(new, 0, i / PGSIZE, 1);\n  return -1;\n}\n\n// mark a PTE invalid for user access.\n// used by exec for the user stack guard page.\nvoid\nuvmclear(pagetable_t pagetable, uint64 va)\n{\n  pte_t *pte;\n\n  pte = walk(pagetable, va, 0);\n  if(pte == 0)\n    panic(\"uvmclear\");\n  *pte &amp;= ~PTE_U;\n}\n\n// Copy from kernel to user.\n// Copy len bytes from src to virtual address dstva in a given page table.\n// Return 0 on success, -1 on error.\nint\ncopyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)\n{\n  uint64 n, va0, pa0;\n  pte_t *pte;\n\n  while(len &gt; 0){\n    va0 = PGROUNDDOWN(dstva);\n    if(va0 &gt;= MAXVA)\n      return -1;\n    pte = walk(pagetable, va0, 0);\n    if(pte == 0 || (*pte &amp; PTE_V) == 0 || (*pte &amp; PTE_U) == 0 ||\n       (*pte &amp; PTE_W) == 0)\n      return -1;\n    pa0 = PTE2PA(*pte);\n    n = PGSIZE - (dstva - va0);\n    if(n &gt; len)\n      n = len;\n    memmove((void *)(pa0 + (dstva - va0)), src, n);\n\n    len -= n;\n    src += n;\n    dstva = va0 + PGSIZE;\n  }\n  return 0;\n}\n\n// Copy from user to kernel.\n// Copy len bytes to dst from virtual address srcva in a given page table.\n// Return 0 on success, -1 on error.\nint\ncopyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)\n{\n  uint64 n, va0, pa0;\n\n  while(len &gt; 0){\n    va0 = PGROUNDDOWN(srcva);\n    pa0 = walkaddr(pagetable, va0);\n    if(pa0 == 0)\n      return -1;\n    n = PGSIZE - (srcva - va0);\n    if(n &gt; len)\n      n = len;\n    memmove(dst, (void *)(pa0 + (srcva - va0)), n);\n\n    len -= n;\n    dst += n;\n    srcva = va0 + PGSIZE;\n  }\n  return 0;\n}\n\n// Copy a null-terminated string from user to kernel.\n// Copy bytes to dst from virtual address srcva in a given page table,\n// until a '\\0', or max.\n// Return 0 on success, -1 on error.\nint\ncopyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)\n{\n  uint64 n, va0, pa0;\n  int got_null = 0;\n\n  while(got_null == 0 &amp;&amp; max &gt; 0){\n    va0 = PGROUNDDOWN(srcva);\n    pa0 = walkaddr(pagetable, va0);\n    if(pa0 == 0)\n      return -1;\n    n = PGSIZE - (srcva - va0);\n    if(n &gt; max)\n      n = max;\n\n    char *p = (char *) (pa0 + (srcva - va0));\n    while(n &gt; 0){\n      if(*p == '\\0'){\n        *dst = '\\0';\n        got_null = 1;\n        break;\n      } else {\n        *dst = *p;\n      }\n      --n;\n      --max;\n      p++;\n      dst++;\n    }\n\n    srcva = va0 + PGSIZE;\n  }\n  if(got_null){\n    return 0;\n  } else {\n    return -1;\n  }\n}\n</code></pre>"},{"location":"4-trap/","title":"trap","text":""},{"location":"4-trap/#xv6-riscv-trapc","title":"xv6-riscv\uc758 trap.c \ud30c\uc77c\uc744 \uc77d\uc5b4\ubcf4\uc790","text":""},{"location":"4-trap/#trap","title":"\ubaa9\ud45c: trap \uc774\ud574","text":"<p>\uc791\uc131\uc790: kkongnyang2 \uc791\uc131\uc77c: 2025-06-23</p>"},{"location":"4-trap/#0","title":"0&gt; \uac1c\ub150 \uc815\ub9ac","text":"<p>\ud2b8\ub7a9? CPU\uac00 \ud604\uc7ac \ud750\ub984\uc744 \uc989\uc2dc \ub04a\uace0 \ucee4\ub110\ub85c \uc810\ud504\ud558\ub294 \ubaa8\ub4e0 \uc0ac\uac74\uc758 \ucd1d\uce6d\uc774\ub2e4. \uc885\ub958\ub294 \uc2dc\uc2a4\ud15c \ucf5c(8\ubc88), \ud398\uc774\uc9c0 \ud3f4\ud2b8(12,13,15\ubc88), 0 \ub098\ub204\uae30 \ub4f1 \uba85\ub839\uc5b4\uc5d0 \uae30\uc778\ud558\ub294 exception \uc640 \ud0c0\uc774\uba38(7\ubc88), \ub514\ubc14\uc774\uc2a4, \uc678\ubd80 \uc778\ud130\ub7fd\ud2b8(5\ubc88) \ub4f1 \uc678\ubd80\uc5d0 \uae30\uc778\ud558\ub294 interrupt \uac00 \uc788\ub2e4. RISC-V\ub294 \ub458 \ubaa8\ub450\ub97c scause \ucf54\ub4dc\ub85c \uad6c\ubd84\ud558\uace0 \uac19\uc740 \ud1b5\ub85c\ub85c \ub4e4\uc5b4\uc628\ub2e4.</p> <p>\uc720\uc800/\ucee4\ub110\uc744 U/S \ubaa8\ub4dc\ub85c \uad6c\ubd84\ud574 \uc2e4\ud589\ud558\uace0, \ud2b8\ub7a9 \uc9c4\uc785 \uc2dc PC\uc640 \ub808\uc9c0\uc2a4\ud130 \uc77c\ubd80\ub97c CSR\uc5d0 \uc7a0\uae50 \ubcf4\uad00\ud55c \ud6c4 trampoline.S(\uac00\uc7a5 \ub192\uc740 VA \ud398\uc774\uc9c0 0xFFFF..F000) \ucf54\ub4dc\uac00 \uc804\uccb4 \ub808\uc9c0\uc2a4\ud130\ub97c struct trapframe(\uadf8 \ubc14\ub85c \uc544\ub798 VA\uc774\uace0 \uc2a4\ud0dd\uad6c\uc870)\uc73c\ub85c \ud478\uc2dc\ud558\uace0 C\ud568\uc218 kernel_trap() \ud638\ucd9c. \ucee4\ub110\uc774 \uc6d0\uc778 \ucc98\ub9ac \ud6c4 usertrapret()\uc744 \uac70\uccd0 \ub2e4\uc2dc \ud2b8\ub7a8\ud384\ub9b0\uc73c\ub85c \ub3cc\uc544\uac00 \ub808\uc9c0\uc2a4\ud130\ub97c \ubcf5\uc6d0\ud558\uace0 sret\uc73c\ub85c U \ubcf5\uadc0.</p>"},{"location":"4-trap/#1","title":"1&gt; \uc6a9\uc5b4 \uc815\ub9ac","text":"<pre><code>stvec (Supervisor Trap-Vector)      // \ud2b8\ub7a9 \uc9c4\uc785 \uc2dc \uc810\ud504\ud560 VA\ub97c \ub2f4\ub294 CSR\nsepc (Supervisor Exception PC)      // \ud2b8\ub7a9 \uc9c1\uc804 PC \ubcf4\uad00 CSR\nscause(Supervisor Cause)            // \ud2b8\ub7a9 \uc6d0\uc778 \ucf54\ub4dc &amp; \uc778\ud130\ub7fd\ud2b8 \ud50c\ub798\uadf8\nsstatus.SPP/SPIE                    // \ud2b8\ub7a9 \uc804 \uc2e4\ud589 \ubaa8\ub4dc\u00b7\uc778\ud130\ub7fd\ud2b8 \uc0c1\ud0dc \ube44\ud2b8\nsscratch                            // xv6\ub294 \uc5ec\uae30\ub2e4 \ucee4\ub110 \uc2a4\ud0dd VA\ub97c \ubcf4\uad00\nSRET (Supervisor RETurn)            // sepc\u2192PC, SPP \ubaa8\ub4dc\ub85c \ubcf5\uadc0\ud558\ub294 \uba85\ub839\ntrapframe                           // \ub808\uc9c0\uc2a4\ud130 31\uac1c+\u03b1\ub97c \ub2f4\ub294 \uad6c\uc870\uccb4(\ucd5c\uace0 \ubc14\ub85c \uc544\ub798 VA)\ntrampoline.S                        // \uc9c4\uc785/\ubcf5\uadc0 1 page \uc5b4\uc148\ube14\ub9ac(\ucd5c\uace0 VA)\nkernel_trap()                       // trap.c \uacf5\ud1b5 C \ucc98\ub9ac \ud568\uc218\nusertrap()/usertrapret()            // U-mode \uc804\uc6a9 \uc608\uc678 \ucc98\ub9ac &amp; \ubcf5\uadc0 \uc900\ube44\ndevintr()                           // PLIC\u00b7CLINT \uc778\ud130\ub7fd\ud2b8 \ubc88\ud638 \ud310\ubcc4 \ud5ec\ud37c\nPLIC (Platform-Level Int. Ctrl.)    // \uc678\ubd80 \ub514\ubc14\uc774\uc2a4 \uc778\ud130\ub7fd\ud2b8 \ucee8\ud2b8\ub864\ub7ec\nCLINT (Core-Local Int. Ctrl.)       // \ud0c0\uc774\uba38\u00b7\uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8 MMIO\nSPP (Previous Privilege)            // sstatus \ub0b4 \u2018\ud2b8\ub7a9 \uc804 \ubaa8\ub4dc(U/S)\u2019 \ube44\ud2b8\nSPIE (Previous Interrupt Enable)    // sstatus \ub0b4 \u2018U-mode\uc5d0\uc11c\uc758 \uc778\ud130\ub7fd\ud2b8 \ud5c8\uc6a9\u2019 \ube44\ud2b8\n</code></pre>"},{"location":"4-trap/#2","title":"2&gt; \ud750\ub984 \uc815\ub9ac","text":"<p><pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 User space  \u2502  trap    \u2502  trampoline.S      \u2502\n\u2502   code      \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  (VA 0x...FFF000)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2502 1) sscratch \u2192 sp   \u2502\n                         \u2502 2) RA/GP\u2026  push    \u2502\n                         \u2502 3) sp = kernel_sp  \u2502\n                         \u2502 4) call kernel_trap\u2502\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                   \u2502C \ud568\uc218\n                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                         \u2502   trap.c           \u2502\n                         \u2502 kernel_trap():     \u2502\n                         \u2502  \u251c\u2500 if (U-mode) \u2192 usertrap() \u2502\n                         \u2502  \u2514\u2500 else        \u2192 kern-trap  \u2502\n                         \u251c\u2500\u2500 usertrap():              \u2502\n                         \u2502  \u00b7 \uc2dc\uc2a4\ucf5c? dev? fault?     \u2502\n                         \u2502  \u00b7 devintr()               \u2502\n                         \u2502  \u00b7 usertrapret()           \u2502\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                   \u2502\n                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                         \u2502 trampoline.S       \u2502\n                         \u2502 1) trapframe pop   \u2502\n                         \u2502 2) sstatus.SPP=U   \u2502\n                         \u2502 3) sret (PC=sepc)  \u2502\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                         \u2502 User space  \u2502  \u2190 \ubcf5\uadc0\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> uservec/kernelvec -&gt; vector\ub77c\ub294 \ub73b. stvec\uc774 \uac00\ub974\ud0a4\ub294 \uc8fc\uc18c trampoline -&gt; \ub3c4\uc57d\ud310 userret/usertrapret -&gt; return\uc774\ub77c\ub294 \ub73b.</p> <p>\ud55c\uc904\uc815\ub9ac : \uc720\uc800 \ubaa8\ub4dc\uc5d0\uc11c trap\uc774 \ubc1c\uc0dd! stvec \ubcf4\uae30! \ubcf4\ud1b5 uservec(\ucd5c\uace0 VA\uc778 trampoline \ud398\uc774\uc9c0)\uc774 \uc368\uc838\uc788\uc74c! \uac00\uc11c \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130\ub97c \ucee4\ub110\uc758 trapframe \uc2a4\ud0dd\uc5d0 \uc800\uc7a5! (a0\ub294 \uc7a0\uae50 \ub534\ub370\uc5d0 \uc800\uc7a5\ud574\ub1a8\ub2e4\uac00 \uc800\uc7a5) trapframe\uc5d0 \ub123\uc5b4\ub1a8\ub358 \ucee4\ub110\uc758 sp, tp, usertrap\uc8fc\uc18c, satp\uc744 \ubd88\ub7ec\uc640 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc800\uc7a5! \ud39c\uc2a4 \uc124\uce58\ud558\uace0 satp CSR\uc744 \ucee4\ub110 satp\ub85c \uac08\uc544\ub07c\uace0 tlb\ub97c \ube44\uc6b0\uace0 usertrap\uc73c\ub85c \uc9c4\uc785! stvec\uc744 kernelvec\ub85c \uac08\uc544\uaef4\uc11c \ub0b4\ubd80 trap \ub300\ube44! trapframe\uc5d0 \ub3cc\uc544\uac08 \uc720\uc800 pc\ub97c \uc800\uc7a5! \uc5b4\ub5a4 \ud2b8\ub7a9\uc778\uc9c0 scause\ub97c \uc77d\uc5b4\uc640 \uc9c4\uc9dc \ud578\ub4e4\ub7ec\ub97c \uc2e4\ud589\ud558\uace0 \uc774\uc81c \ub9ac\ud134\uc73c\ub85c \uc9c4\uc785! usertrapret\uc5d0\uc11c\ub294 \ub2e4\uc2dc \uc6d0\uc0c1\ud0dc\ub85c \uc138\ud305\ud574\uc8fc\ub294 \uac70! stvec\uc744 \ub2e4\uc2dc uservec\uc73c\ub85c \uc368\ub194! trapframe\uc5d0 \ucee4\ub110\uc758 satp, sp, usertrap\uc8fc\uc18c, tp\ub97c \ub123\uc5b4\uc918! sstatus\ub97c U\ub85c \ubc14\uafb8\uace0 sepc CSR\uc5d0 \uc544\uae4c trapframe\uc5d0 \ub123\uc5b4\ub454 \ud504\ub85c\uc138\uc2a4 pc\ub97c \uc368\ub123\uc5b4. \uc720\uc800 \ud398\uc774\uc9c0\ud14c\uc774\ube14\uc744 \uc778\uc790\ub85c \ub118\uae30\uba74\uc11c userret\uc744 \ud638\ucd9c\ud574. \uc544\uae4c uservec\uc5d0\uc11c \uc2a4\ud0dd\uc5d0 \ub2f4\uc544\ub480\ub358 \uac78 \ub2e4 \uaebc\ub0b4! \uadf8\ub9ac\uace0 satp CSR\uc744 \uc720\uc800 satp\ub85c \uac08\uc544\uaef4.</p> <pre><code>0   kernel_satp      // \ucee4\ub110 \ud398\uc774\uc9c0\ud14c\uc774\ube14 \uc8fc\uc18c\n8   kernel_sp        // \ucee4\ub110 \uc2a4\ud0dd \uaf2d\ub300\uae30\n16  kernel_trap      // usertrap() \uc8fc\uc18c\n24  padding\n32  kernel_hartid    // hartid\n40  ra               &lt;-- \uc5ec\uae30\uc11c\ubd80\ud130 34\uac1c \uc0ac\uc6a9\uc790 \ub808\uc9c0\uc2a4\ud130\n\n112 a0               &lt;-- \ud2b9\ubcc4\ud788 a0 \ubc31\uc5c5 \uc704\uce58\n\n280 t6\n</code></pre>"},{"location":"4-trap/#3-kerneltrampolines","title":"3&gt; kernel/trampoline.S","text":"<pre><code>#include \"riscv.h\"\n#include \"memlayout.h\"\n\n# tramsec\ub77c\ub294 \uc0c8 \uc139\uc158\uc73c\ub85c \uc804\ud658.\n# \uc774 \uc804\uccb4\ub97c trampoline \uac00\uc0c1\uc8fc\uc18c(\uac00\uc7a5 \ub192\uc740 VA \ud55c \ud398\uc774\uc9c0)\uc5d0 \uc815\ub82c\ud574 \ub123\ub3c4\ub85d.\n# \ucee4\ub110, \uc720\uc800 \ud398\uc774\uc9c0\ud14c\uc774\ube14 \ubaa8\ub450 \uac19\uc740 VA\ub85c \ub9e4\ud551\ud574 \ud398\uc774\uc9c0\ud14c\uc774\ube14 \uc2a4\uc704\uce58 \ud6c4\uc5d0\ub3c4 \ucf54\ub4dc \uc8fc\uc18c\uac00 \ubcc0\ud558\uc9c0 \uc54a\ub3c4\ub85d\n.section trampsec\n\n# \ub450\uac1c \ub2e4 \uc804\uc5ed\uc73c\ub85c \uacf5\uac1c\ud574 \ub2e4\ub978 \uc624\ube0c\uc81d\ud2b8\uc5d0\uc11c \uc774 \uc139\uc158\uc758 \uc2dc\uc791 \uc8fc\uc18c\ub97c \ucc38\uc870\ud560 \uc218 \uc788\uac8c\n.globl trampoline\n.globl usertrap\n\n# trampsec \uc139\uc158\uc758 \ub9e8 \uccab \ubc14\uc774\ud2b8\uc5d0 \uc2ec\ubcfc trampoline \uc774\ub984 \ubd80\uc5ec\ntrampoline:\n# 2^4 = 16Byte\ub85c \ub2e4\uc74c \ucf54\ub4dc \uc815\ub82c. 4\ubc14\uc774\ud2b8\ub85c \ud574\ub3c4 \ub418\uc9c0\ub9cc \ub109\ub109\ud788 \uc7a1\uc544 \uce90\uc2dc \uc131\ub2a5 \ud5a5\uc0c1\n.align 4\n.globl uservec\n\nuservec:    \n        # \uc720\uc800 -&gt; \ucee4\ub110\n\n        # sscratch\ub294 s\ubaa8\ub4dc\uc758 \uc784\uc2dc \uc800\uc7a5\uc18c, a0\ub294 \ud568\uc218 \uc778\uc790 \ub808\uc9c0\uc2a4\ud130\n        # trap \ubc1c\uc0dd \uc9c1\uc804\uc758 \uc720\uc800 \ud568\uc218 \uc778\uc790 \ub808\uc9c0\uc2a4\ud130\ub97c \uc784\uc2dc\ub85c sscratch\uc5d0 \ubcf4\uad00\n        csrw sscratch, a0\n\n        # TRAPFRAME = \ucee4\ub110\uc774 \ubaa8\ub4e0 \ud504\ub85c\uc138\uc2a4 \ud398\uc774\uc9c0\ud14c\uc774\ube14\uc5d0\uc11c \uac19\uc740 \uac00\uc0c1\uc8fc\uc18c(0xFFFFFFFFE000)\ub85c \ub9e4\ud551\ud574\ub454 \uc0c1\uc218.\n        # a0\uc5d0 TRAPFRAME \uc989\uc2dc\uac12 \ub123\uae30\n        li a0, TRAPFRAME\n\n        # 34\uac1c \ub808\uc9c0\uc2a4\ud130(ra~t6)\uac12\uc744 TRAPFRAME+40~280 \uc704\uce58\uc5d0 \uc800\uc7a5\ud558\uc5ec \uc720\uc800 \ucee8\ud14d\uc2a4\ud2b8 \ubcf4\uc874\n        sd ra, 40(a0)\n        sd sp, 48(a0)\n        sd gp, 56(a0)\n        sd tp, 64(a0)\n        sd t0, 72(a0)\n        sd t1, 80(a0)\n        sd t2, 88(a0)\n        sd s0, 96(a0)\n        sd s1, 104(a0)\n        sd a1, 120(a0)\n        sd a2, 128(a0)\n        sd a3, 136(a0)\n        sd a4, 144(a0)\n        sd a5, 152(a0)\n        sd a6, 160(a0)\n        sd a7, 168(a0)\n        sd s2, 176(a0)\n        sd s3, 184(a0)\n        sd s4, 192(a0)\n        sd s5, 200(a0)\n        sd s6, 208(a0)\n        sd s7, 216(a0)\n        sd s8, 224(a0)\n        sd s9, 232(a0)\n        sd s10, 240(a0)\n        sd s11, 248(a0)\n        sd t3, 256(a0)\n        sd t4, 264(a0)\n        sd t5, 272(a0)\n        sd t6, 280(a0)\n\n          # sscratch\ub97c \uc77d\uc5b4\uc640 t0\ub85c \ubcf5\uc0ac\ud558\uace0 \uadf8\uac78 TRAPFRAME+112\uc5d0 \uc800\uc7a5\n        csrr t0, sscratch\n        sd t0, 112(a0)\n\n        # sp\uc5d0 kernel_sp \uc800\uc7a5\n        ld sp, 8(a0)\n\n        # tp\uc5d0 kernel_hartid \uc800\uc7a5\n        ld tp, 32(a0)\n\n        # t0\uc5d0 kernel_trap(usertrap()\uc8fc\uc18c) \uc800\uc7a5\n        ld t0, 16(a0)\n\n        # t1\uc5d0 kernel_satp(\ucee4\ub110 \ud398\uc774\uc9c0\ud14c\uc774\ube14 \uc8fc\uc18c) \uc800\uc7a5\n        ld t1, 0(a0)\n\n        # satp\uac00 \uc544\uc9c1 \uc720\uc800 \ud14c\uc774\ube14\uc744 \uac00\ub9ac\ud0a4\ubbc0\ub85c \uc9c0\uae08\uae4c\uc9c0 \uc5f0\uc0b0\uc740 \ud655\uc2e4\ud788 \ub05d\ub0b4\ub77c.(\ud39c\uc2a4 \uc5ed\ud560)\n        sfence.vma zero, zero\n\n        # satp\uc5d0 \ucee4\ub110 \ud398\uc774\uc9c0\ud14c\uc774\ube14 \uc8fc\uc18c\ub97c \uc368\uc11c \uc804\ud658\ud558\ub77c\n        csrw satp, t1\n\n        # \uc720\uc800 -&gt; \ucee4\ub110 \uc804\ud658 \uc704\ud574 TLB \ube44\uc6b0\uae30.\n        # \ud2b8\ub7a8\ud3f4\ub9b0 \uadf8 \ud55c\ud398\uc774\uc9c0\ub9cc \ucee4\ub110 \uc720\uc800 VA\uac00 \ub3d9\uc77c\ud560 \ubfd0 \ub098\uba38\uc9c4 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0 \ud63c\ub3d9\uc5c6\uac8c \ube44\uc6cc\uc57c \ud568\n        # TLB\ub780? \ud398\uc774\uc9c0\ud14c\uc774\ube14 \uce90\uc2dc. \uc790\uc8fc \uc4f0\uc774\ub294 \uc804\ud654\ubc88\ud638\ubd80 \uc990\uaca8\ucc3e\uae30 \ud574\ub193\uc740\uac70.\n        sfence.vma zero, zero\n\n        # usertrap()\ub85c \uc9c4\uc785 (S\ubaa8\ub4dc)\n        jr t0\n\n        # usertrap() -&gt; \ucee4\ub110 \ucc98\ub9ac -&gt; usertrapret() -&gt; userret\n\n.globl userret\nuserret:\n        # \ucee4\ub110 -&gt; \uc720\uc800.\n\n        # a0: \uc720\uc800 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc8fc\uc18c \uc801\ud600\uc788\uc74c\n        # \ud39c\uc2a4 \uce58\uace0 satp\uc5d0 \uc720\uc800 \ud398\uc774\uc9c0\ud14c\uc774\ube14 \uc8fc\uc18c \uc368\uc11c \uc804\ud658\ud558\uace0 TLB \ube44\uc6b0\uae30\n        sfence.vma zero, zero\n        csrw satp, a0\n        sfence.vma zero, zero\n\n        # a0\uc5d0 TRAPFRAME \ubca0\uc774\uc2a4 \uac12 \ub123\uae30\n        li a0, TRAPFRAME\n\n        # \ub2e4\uc2dc \ub808\uc9c0\uc2a4\ud130 \uac12 restore\ud558\uae30\n        ld ra, 40(a0)\n        ld sp, 48(a0)\n        ld gp, 56(a0)\n        ld tp, 64(a0)\n        ld t0, 72(a0)\n        ld t1, 80(a0)\n        ld t2, 88(a0)\n        ld s0, 96(a0)\n        ld s1, 104(a0)\n        ld a1, 120(a0)\n        ld a2, 128(a0)\n        ld a3, 136(a0)\n        ld a4, 144(a0)\n        ld a5, 152(a0)\n        ld a6, 160(a0)\n        ld a7, 168(a0)\n        ld s2, 176(a0)\n        ld s3, 184(a0)\n        ld s4, 192(a0)\n        ld s5, 200(a0)\n        ld s6, 208(a0)\n        ld s7, 216(a0)\n        ld s8, 224(a0)\n        ld s9, 232(a0)\n        ld s10, 240(a0)\n        ld s11, 248(a0)\n        ld t3, 256(a0)\n        ld t4, 264(a0)\n        ld t5, 272(a0)\n        ld t6, 280(a0)\n\n          # \uc720\uc800 a0 \uac12\ub3c4 restore\n        ld a0, 112(a0)\n\n        sret\n</code></pre>"},{"location":"4-trap/#4-kerneltrapc","title":"4 &gt; kernel/trap.c","text":"<pre><code>#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"spinlock.h\"\n#include \"proc.h\"\n#include \"defs.h\"\n\nstruct spinlock tickslock;              // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ubcf4\ud638\uc6a9 \uc2a4\ud540\ub77d\nuint ticks;                             // \uc2dc\uc2a4\ud15c \ud2f1 \uc218(\uc2dc\uacc4 \ub2e8\uc704)\n\nextern char trampoline[], uservec[], userret[];\n\nvoid kernelvec();\n\nextern int devintr();\n\n// \ubd80\ud305\uc2dc hart 0\uc5d0\uc11c \ub2e8 \ud55c\ubc88 initalize\nvoid\ntrapinit(void)\n{\n  // tickslock: ticks(\ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\ub9c8\ub2e4 +1)\uc744 \ubcf4\ud638\ud558\ub294 \uc2a4\ud540\ub77d\n  // \ub77d \uad6c\uc870\uccb4 \ub0b4\ubd80 \ud544\ub4dc\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\uace0 \ub514\ubc84\uae45\uc6a9\uc73c\ub85c 'time'\uc774\ub984 \uc124\uc815\n  initlock(&amp;tickslock, \"time\");\n}\n\n// \ubd80\ud305\uc2dc \uac01 \ud558\ud2b8\ub9c8\ub2e4 \ub2e8 \ud55c\ubc88 initalize\nvoid\ntrapinithart(void)\n{\n  // trap\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c \uc5b4\ub514\uc11c \ucc98\ub9ac\ub97c \uc2dc\uc791\ud560\uc9c0 \uc54c\ub824\uc8fc\ub294 CSR \ub808\uc9c0\uc2a4\ud130\n  // \ud604\uc7ac \ucee4\ub110\uc0c1\ud0dc\uc774\uae30\uc5d0 \uc9c0\uae08 \ubc1c\uc0dd\ud558\ub294 \ubaa8\ub4e0 \ud2b8\ub7a9\uc740 kernelvec\uc73c\ub85c \uac00\uc57c\ud558\uae30 \ub54c\ubb38\n  w_stvec((uint64)kernelvec);\n}\n\n\n// \uc720\uc800 \ud504\ub85c\uadf8\ub7a8\uc774 trap \uac78\ub9b4\ub54c\nvoid\nusertrap(void)\n{\n  int which_dev = 0;                    // \ub514\ubc14\uc774\uc2a4 \uc778\ud130\ub7fd\ud2b8 \uc2dd\ubcc4\uc6a9 \ubcc0\uc218\n\n  if((r_sstatus() &amp; SSTATUS_SPP) != 0)      // \uc9c4\uc9dc \uc720\uc800 \ubaa8\ub4dc\uc5d0\uc11c \uc628\uac8c \ub9de\ub294\uc9c0 \ud655\uc778\n    panic(\"usertrap: not from user mode\");\n\n  w_stvec((uint64)kernelvec);               // trap\uc774 \ub4e4\uc5b4\uc654\uc73c\ub2c8 stvec\uc744 \ucee4\ub110\ubaa8\ub4dc\ub85c \uc804\ud658\n\n  struct proc *p = myproc();                // \ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4 \ud3ec\uc778\ud130\n\n  p-&gt;trapframe-&gt;epc = r_sepc();             // \uc720\uc800\uc758 pc\ub97c \uc800\uc7a5 (\ubcf5\uadc0 \uc2dc \ud544\uc694)\n                                            // \uc774 trapframe\uc740 \uc544\uae4c TRAPFRAME \uc0c1\uc218\ub85c \ubd88\ub800\ub358 \uac70\ud558\uace0 \uac19\uc740 \uac70\uc784.\n\n  if(r_scause() == 8){                      // 8\ubc88\uc740 \uc2dc\uc2a4\ud15c \ucf5c(ecall)\n\n    if(killed(p))\n      exit(-1);                             // \uc774\ubbf8 \uc8fd\uc740 \ud504\ub85c\uc138\uc2a4\uba74 \uc989\uc2dc \uc885\ub8cc\n\n    p-&gt;trapframe-&gt;epc += 4;                 // pc+4 (\ub2e4\uc74c \uba85\ub839\uc5b4)\n\n    intr_on();                              // syscall \ub3c4\uc911 \uc778\ud130\ub7fd\ud2b8 \ud5c8\uc6a9\n\n    syscall();                              // \uc2dc\uc2a4\ud15c \ucf5c \ud578\ub4e4\ub9c1\n  } else if((which_dev = devintr()) != 0){\n\n  } else {                                  // \uc54c \uc218 \uc5c6\ub294 \uc608\uc678 \ubc1c\uc0dd\n    printf(\"usertrap(): unexpected scause 0x%lx pid=%d\\n\", r_scause(), p-&gt;pid);\n    printf(\"            sepc=0x%lx stval=0x%lx\\n\", r_sepc(), r_stval());\n    setkilled(p);                           // \ud504\ub85c\uc138\uc2a4 \uc885\ub8cc \uc608\uc57d\n  }\n\n  if(killed(p))\n    exit(-1);\n\n  if(which_dev == 2)                        // 2\ubc88\uc740 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\n    yield();                                // CPU\ub97c \uc591\ubcf4\ud568\n\n  usertrapret();                            // \uc720\uc800 \uacf5\uac04 \ubcf5\uadc0 \uc900\ube44\n}\n\n// \uc720\uc800 \ubaa8\ub4dc\ub85c \ubcf5\uadc0\ud560 \uc900\ube44\nvoid\nusertrapret(void)\n{\n  struct proc *p = myproc();\n\n  intr_off();                                 // \ubcf5\uadc0 \ub3c4\uc911 trap \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \uc778\ud130\ub7fd\ud2b8 \ube44\ud65c\uc131\ud654\n\n  // stvec\uc744 \ub2e4\uc2dc \ub2e4\uc2dc trampoline\uc758 uservec\uc73c\ub85c \uc124\uc815\n  uint64 trampoline_uservec = TRAMPOLINE + (uservec - trampoline);\n  w_stvec(trampoline_uservec);\n\n  // uservec\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc815\ubcf4\ub4e4\uc744 trapframe\uc5d0 \uc138\ud305\n  p-&gt;trapframe-&gt;kernel_satp = r_satp();         // \ucee4\ub110 \ud398\uc774\uc9c0 \ud14c\uc774\ube14\n  p-&gt;trapframe-&gt;kernel_sp = p-&gt;kstack + PGSIZE; // \ucee4\ub110 \uc2a4\ud0dd \ucd5c\uc0c1\ub2e8\n  p-&gt;trapframe-&gt;kernel_trap = (uint64)usertrap; // \ub2e4\uc2dc trap \ub4e4\uc5b4\uc62c \ub54c \uc2e4\ud589\ud560 \ud568\uc218\n  p-&gt;trapframe-&gt;kernel_hartid = r_tp();         // \ud558\ud2b8 \ubc88\ud638\n\n\n  // \uc720\uc800 \ubaa8\ub4dc \ubcf5\uadc0\ub97c \uc704\ud55c sstatus \uc124\uc815\n  unsigned long x = r_sstatus();\n  x &amp;= ~SSTATUS_SPP; // SPP=0(U)\ub85c\n  x |= SSTATUS_SPIE; // SPIE=1 \uc720\uc800 \ubaa8\ub4dc\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ud5c8\uc6a9\n  w_sstatus(x);\n\n  // \uc2e4\ud589 \uc7ac\uac1c \uc704\uce58 \uc124\uc815\n  w_sepc(p-&gt;trapframe-&gt;epc);\n\n  // \uc720\uc800 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \uc124\uc815\n  uint64 satp = MAKE_SATP(p-&gt;pagetable);\n\n  // trampoline \uc0c1\ub2e8\uc5d0 \uc788\ub294 userret()\uc744 \ud638\ucd9c\ud558\uc5ec \uc2e4\uc81c \ubcf5\uadc0 \uc218\ud589\n  uint64 trampoline_userret = TRAMPOLINE + (userret - trampoline);\n  ((void (*)(uint64))trampoline_userret)(satp);\n}\n\n// \ucee4\ub110 \ubaa8\ub4dc\uc5d0\uc11c trap \ubc1c\uc0dd \uc2dc \ud638\ucd9c\nvoid \nkerneltrap()\n{\n  int which_dev = 0;\n  uint64 sepc = r_sepc();\n  uint64 sstatus = r_sstatus();\n  uint64 scause = r_scause();\n\n  if((sstatus &amp; SSTATUS_SPP) == 0)\n    panic(\"kerneltrap: not from supervisor mode\");\n  if(intr_get() != 0)\n    panic(\"kerneltrap: interrupts enabled\");\n\n  if((which_dev = devintr()) == 0){\n    // \uc6d0\uc778\uc744 \uc54c \uc218 \uc5c6\ub294 \uc778\ud130\ub7fd\ud2b8\n    printf(\"scause=0x%lx sepc=0x%lx stval=0x%lx\\n\", scause, r_sepc(), r_stval());\n    panic(\"kerneltrap\");\n  }\n\n  if(which_dev == 2 &amp;&amp; myproc() != 0)       // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\uba74 CPU \uc591\ubcf4\n    yield();\n\n  // trap \uc804 \ub808\uc9c0\uc2a4\ud130 \ubcf5\uc6d0\n  w_sepc(sepc);\n  w_sstatus(sstatus);\n}\n\n// \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\nvoid\nclockintr()\n{\n  if(cpuid() == 0){                     // 0\ubc88 \ud558\ud2b8\ub9cc ticks \uc99d\uac00 \ubc0f wakeup. 0\ubc88 \ud558\ud2b8\ub294 \ucd08\uae30\ud654 \ub2f4\ub2f9\uc778 \ub3d9\uc2dc\uc5d0 \uc804\uc5ed \uc2dc\uacc4(ticks) \uae30\uc900 \ud558\ud2b8\uc784.\n    acquire(&amp;tickslock);\n    ticks++;\n    wakeup(&amp;ticks);\n    release(&amp;tickslock);\n  }\n\n  // 100\ub9cc cpu \uc0ac\uc774\ud074 \ub4a4\uc5d0 \ub610 \uae68\uc6cc\uc918, \uc989 1 tick = 1 timer interrupt = 100Hz = \uc57d  10ms\n  w_stimecmp(r_time() + 1000000);\n}\n\n// \ub2e4\ub978 \ub514\ubc14\uc774\uc2a4\uba74 1, \ubaa8\ub974\uba74 0, \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\uba74 2\nint\ndevintr()\n{\n  uint64 scause = r_scause();       // scause \ub808\uc9c0\uc2a4\ud130. \ud604\uc7ac trap\uc758 \uc6d0\uc778\uc744 \ub098\ud0c0\ub0c4\n\n  // \uc678\ubd80 \uc778\ud130\ub7fd\ud2b8 (PLIC\uc744 \ud1b5\ud574 \ub4e4\uc5b4\uc624\ub294 \ub514\ubc14\uc774\uc2a4 \uc778\ud130\ub7fd\ud2b8)\n  if(scause == 0x8000000000000009L){      // \uc774 \uac12\uc774\uba74 Supervisor external interrupt\n\n    // \uc5b4\ub5a4 \uc7a5\uce58\uac00 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1c\uc0dd\uc2dc\ucf30\ub294\uc9c0 \ud655\uc778.\n    int irq = plic_claim();               // PLIC\uc5d0\uc11c IRQ \ubc88\ud638 \ud655\uc778\n\n    if(irq == UART0_IRQ){                 // UART(\uc2dc\ub9ac\uc5bc \ud1b5\uc2e0 \uc7a5\uce58)\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\n      uartintr();                         // UART \uad00\ub828 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \uc2e4\ud589\n    } else if(irq == VIRTIO0_IRQ){        // VirtIO \ub514\uc2a4\ud06c\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\n      virtio_disk_intr();                 // \ub514\uc2a4\ud06c \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \uc2e4\ud589\n    } else if(irq){                       // \uc54c \uc218 \uc5c6\ub294 \uc7a5\uce58\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\n      printf(\"unexpected interrupt irq=%d\\n\", irq);\n    }\n\n    if(irq)                               // \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac\uac00 \ub05d\ub0ac\uc74c\uc744 PLIC\uc5d0 \uc54c\ub9bc\n      plic_complete(irq);\n\n    return 1;                             // \uc7a5\uce58 \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac \uc644\ub8cc\n  } else if(scause == 0x8000000000000005L){   // \uc774 \uac12\uc774\uba74 Supervisor timer interrupt\n    clockintr();                           // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \uc2e4\ud589\n    return 2;                         // \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac \uc644\ub8cc\n  } else {\n    return 0;                   // \uc54c \uc218 \uc5c6\ub294 \uc778\ud130\ub7fd\ud2b8\n  }\n}\n</code></pre>"},{"location":"5-PCB/","title":"PCB","text":""},{"location":"5-PCB/#xv6-riscv-procc","title":"xv6-riscv\uc758 proc.c \ud30c\uc77c\uc744 \uc77d\uc5b4\ubcf4\uc790","text":""},{"location":"5-PCB/#pcb","title":"\ubaa9\ud45c: PCB \uc774\ud574","text":"<p>\uc791\uc131\uc790: kkongnyang2 \uc791\uc131\uc77c: 2025-06-26</p>"},{"location":"5-PCB/#0","title":"0&gt; \uac1c\ub150 \uc815\ub9ac","text":"<p>PCB? \ucee4\ub110\uc774 \ud55c \ud504\ub85c\uc138\uc2a4\ub97c \uc2dd\ubcc4\ud558\ub294 \uad6c\uc870\uccb4\uc774\ub2e4. pagetable, kstack, context, trapframe, state, pid \ub4f1\uc758 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub2e4.</p> <p>\uadf8\ub9ac\uace0 \uc5ec\ub7ec PCB\ub97c \ubbf8\ub9ac \uace0\uc815\ub41c \ud06c\uae30\uc758 \ubc30\uc5f4\ub85c \ud560\ub2f9\ud574 \ub454 \uacf5\uac04\uc744 PCB \ud480\uc774\ub77c\uace0 \ud55c\ub2e4. \ubd80\ud305 \uc2dc PCB\ud480 + kstack\ud480 + trapframe \ub4f1 \ud504\ub85c\uc138\uc2a4 \uc790\uc6d0\uc744 \ubd80\ud305 \uc2dc \uc804\ubd80 \uc608\uc57d\ud574\ub454\ub2e4.</p> <p>struct proc proc[NPROC]   // .bss \uc601\uc5ed\uc5d0 \ud55c\uaebc\ubc88\uc5d0 \uc790\ub9ac \uc608\uc57d \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500 \u2026 \u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 proc[0]      \u2502 proc[1]      \u2502       \u2502 proc[NPROC-1]\u2502 \u2502 state=UNUSED \u2502 state=UNUSED \u2502       \u2502 state=UNUSED \u2502 \u2502 kstack=\u2026     \u2502 kstack=\u2026     \u2502       \u2502 kstack=\u2026     \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500 \u2026 \u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>\uc2a4\ucf00\uc904\ub7ec\ub294 \uc774\ub7ec\ud55c PCB\ub97c \uc0dd\uc131/\ud30c\uad34\ud558\uace0 \uc2a4\uc704\uce58\ud558\uace0 clock \uae30\ubc18 \uc2a4\ucf00\uc904\ub9c1, sleep/wakeup\uc744 \ub9e1\ub294\ub2e4.</p>"},{"location":"5-PCB/#1","title":"1&gt; \uc6a9\uc5b4 \uc815\ub9ac","text":"<p>PCB(process control block)  // \ucee4\ub110\uc774 \ud504\ub85c\ub808\uc2a4\ub97c \uad00\ub9ac\ud558\ub294 \uad6c\uc870\uccb4 PID(process ID)             // \uace0\uc720 \uc815\uc218 ID RUNNABLE                    // cpu\ub97c \ubc1b\uc744 \uc900\ube44 \uc644\ub8cc(\ub7f0 \ud050\uc5d0 \uc874\uc7ac) SLEEPING                    // sleep\uc73c\ub85c \ube14\ub85d, chan \uc774\ubca4\ud2b8 \ub300\uae30 ZOMBIE                      // exit \ud6c4 \ubd80\ubaa8\uac00 wait \ud560\ub54c\uae4c\uc9c0 kstack(kernel stack)        // \ud558\ud2b8\uac00 S \ubaa8\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 perprocess \uc2a4\ud0dd swtch                       // \uc5b4\uc148 \uc218\uc900 \ub808\uc9c0\uc2a4\ud130 \uad50\ud658 \ub8e8\ud2f4(scheduler&lt;-&gt;proc) chan                        // \uc2ac\ub9bd \ud050 \ud0a4 - \uc784\uc758\uc758 void* \uac12 KERNBASE                    // \ucee4\ub110 \uac00\uc0c1\uc8fc\uc18c \uc2dc\uc791\uc810. 0x80000000 NPROC                       // \ub3d9\uc2dc\uc5d0 \uc874\uc7ac\ud560 \ucd5c\ub300 \ud504\ub85c\uc138\uc2a4 \uc218. 64 lock                        // \ub458 \uc774\uc0c1\uc758 CPU\uac00 \ub3d9\uc2dc\uc5d0 \uac19\uc740 \uc790\ub8cc\ub97c \uac74\ub4dc\ub824 \uae68\uc9c0\ub294 \uc0c1\ud669\uc744 \ub9c9\ub294 \ubb38\uc9c0\uae30 \uac1d\uccb4. spin_lock                   // \ub77d\uc744 \ub204\uad70\uac00 \uc4f0\uace0 \uc788\uc73c\uba74 CPU\uac00 \uc9e7\uc740 \ub8e8\ud504(spin)\ub85c \uae30\ub2e4\ub838\ub2e4\uac00 \ube48 \uc21c\uac04 \ubc14\ub85c \uc7a1\uc74c</p> <p>// PCB: \ud504\ub85c\uc138\uc2a4\uc758 \ubaa8\ub4e0 \ucee4\ub110\uce21 \uc815\ubcf4 \ubcf4\uad00 struct proc -&gt; pagetable, kstack, context, trapframe, state, pid // \ucee4\ub110 \ucee8\ud14d\uc2a4\ud2b8: switch()\uac00 \uc800\uc7a5/\ubcf5\uc6d0\ud558\ub294 \ucd5c\uc18c \ub808\uc9c0\uc2a4\ud130 \uc9d1\ud569 struct context -&gt; ra, sp, s0~11 // \uc0ac\uc6a9\uc790 &lt;-&gt; \ucee4\ub110 \uacbd\uacc4 \ub808\uc9c0\uc2a4\ud130 \ubc31\uc5c5 \ubc84\ud37c struct trapframe -&gt; 31\uac1c \uc77c\ubc18\ub808\uc9c0\uc2a4\ud130 + sepc, sstatus, satp, kernel_sp // \ud558\ud2b8 \ub2f9 \uc804\uc5ed: \ud604\uc7ac \ud504\ub85c\uc138\uc2a4, \uc911\ucca9 \uae4a\uc774 struct cpu -&gt; proc, context, noff</p>"},{"location":"5-PCB/#2","title":"2&gt; \ud750\ub984 \uc815\ub9ac","text":"<pre><code>CPU \ud558\ud2b8\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   \uc0ac\uc6a9\uc790 \ubaa8\ub4dc (U)                             \u2502\n\u2502     \u2514\u2500 Trap                                 \u2502\n\u2502   \ucee4\ub110 \ubaa8\ub4dc (S)                               \u2502\n\u2502     \u251c\u2500 \uc2a4\ucf00\uc904\ub7ec(scheduler)  \u25c0\u2500\u2510             \u2502\n\u2502     \u2502   \u2514\u2500 swtch.S          \u2502 Context     \u2502\n\u2502     \u251c\u2500 \ud504\ub85c\uc138\uc2a4 \ucf54\ub4dc(syscall)  \u2502  Switch     \u2502\n\u2502     \u2514\u2500 \ub4dc\ub77c\uc774\ubc84               \u2514\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"5-PCB/#3-procc","title":"3&gt; proc.c","text":"<pre><code>#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"spinlock.h\"\n#include \"proc.h\"\n#include \"defs.h\"\n\nstruct cpu cpus[NCPU];          // \ud558\ud2b8\ubcc4\n\nstruct proc proc[NPROC];        // PCB \ud480.\n\nstruct proc *initproc;          // PID 1(userinit())\uc744 \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\n\nint nextpid = 1;\nstruct spinlock pid_lock;\n\nextern void forkret(void);\nstatic void freeproc(struct proc *p);\n\nextern char trampoline[]; // trampoline.S\n\n// helps ensure that wakeups of wait()ing\n// parents are not lost. helps obey the\n// memory model when using p-&gt;parent.\n// must be acquired before any p-&gt;lock.\nstruct spinlock wait_lock;\n\n// \ud504\ub85c\uc138\uc2a4\uc6a9 \ucee4\ub110 \uc2a4\ud0dd 2\ud398\uc774\uc9c0 \uc601\uc5ed\uc744 \uc608\uc57d \ubc0f \ub9e4\ud551\n// xv6\uc740 \uace0\uc815 pcb \ud480\uc774\ubbc0\ub85c \ud504\ub85c\uc138\uc2a4 \uac1c\uc218\uc640 \uc2a4\ud0dd \uacf5\uac04\uc744 \uc77c\uad04 \uc608\uc57d\ud574\ub450\uba74 \ub7f0\ud0c0\uc784 kalloc \uc624\ubc84\ud5e4\ub4dc\ub97c \ud53c\ud560 \uc218 \uc788\ub2e4.\nvoid\nproc_mapstacks(pagetable_t kpgtbl)\n{\n  struct proc *p;                 // for\ubb38 \uc6a9\n\n  for(p = proc; p &lt; &amp;proc[NPROC]; p++) {  // PCB \ubcc4\ub85c\n    char *pa = kalloc();          // 4KB \ubb3c\ub9ac\ud398\uc774\uc9c0 \ud560\ub2f9\n    if(pa == 0)\n      panic(\"kalloc\");\n    uint64 va = KSTACK((int) (p - proc));     // \uadf8 \ubb3c\ub9ac\ud398\uc774\uc9c0\ub97c \uac00\ub9ac\ud0ac VA \uacc4\uc0b0. KERNBASE \uc0c1\ub2e8\ubd80\n    kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);  // \ucee4\ub110 PT\uc5d0 1:1 \ub9e4\ud551\n  }\n}\n\n// PCB \ud480 \ucd08\uae30\ud654\nvoid\nprocinit(void)\n{\n  struct proc *p;\n\n  initlock(&amp;pid_lock, \"nextpid\");     // \ucee4\ub110 \ubd80\ud2b8 \ub2e8\uacc4\uc5d0\uc11c pid \uc2a4\ud540\ub77d\uc744 0\uc73c\ub85c \ucd08\uae30\ud654\ud558\uace0 \ub514\ubc84\uadf8\uc6a9 \uc2dd\ubcc4 \uc774\ub984 \uc9c0\uc5b4\uc90c.\n  initlock(&amp;wait_lock, \"wait_lock\");  // wait/exit \ub77d\n  for(p = proc; p &lt; &amp;proc[NPROC]; p++) {\n      initlock(&amp;p-&gt;lock, \"proc\");     // \uac01 PCB \uc804\uc6a9 \uc2a4\ud540\ub77d\n      p-&gt;state = UNUSED;              // \uc544\uc9c1 \ubbf8\uc0ac\uc6a9 \uc2ac\ub86f\n      p-&gt;kstack = KSTACK((int) (p - proc)); // \ud574\ub2f9 \ud504\ub85c\uc138\uc2a4\uc758 \ucee4\ub110 \uc2a4\ud0dd VA\n  }\n}\n\n// \ud558\ud2b8 id \ubc18\ud658. \ub2e4\ub978 \ud558\ud2b8\ub85c \ud504\ub85c\uc138\uc2a4\uac00 \ub118\uc5b4\uac00\ub294 \uc778\ud130\ub7fd\ud2b8 \ube44\ud65c\uc131\ud654 \uc0c1\ud0dc\uac00 \ud544\uc694\ud558\uae30\uc5d0 \uc774\ub807\uac8c \uace0\uc815.\nint\ncpuid()\n{\n  int id = r_tp();\n  return id;\n}\n\n// \ud604\uc7ac \ud558\ud2b8\uc758 struct cpu \uc8fc\uc18c \ud655\ubcf4. \uc778\ud130\ub7fd\ud2b8 \ube44\ud65c\uc131\ud654 \uc0c1\ud0dc\uac00 \ud544\uc694\ud558\uae30\uc5d0 \uc774\ub807\uac8c \uace0\uc815.\nstruct cpu*\nmycpu(void)\n{\n  int id = cpuid();\n  struct cpu *c = &amp;cpus[id];\n  return c;\n}\n\n// \ud604\uc7ac \ud558\ud2b8\uc758 PCB \ud3ec\uc778\ud130 \ubc18\ud658\nstruct proc*\nmyproc(void)\n{\n  push_off();               // \uc778\ud130\ub7fd\ud2b8 off\n  struct cpu *c = mycpu();\n  struct proc *p = c-&gt;proc;\n  pop_off();                // \ubcf5\uc6d0\n  return p;\n}\n\n// \uc804\uc5ed PID \ubc1c\uae09\nint\nallocpid()\n{\n  int pid;\n\n  acquire(&amp;pid_lock);     // \uc2a4\ud540\ub77d\uc73c\ub85c \ub3d9\uc2dc \uc99d\uac00 \ucda9\ub3cc \ubc29\uc9c0\n  pid = nextpid;\n  nextpid = nextpid + 1;\n  release(&amp;pid_lock);\n\n  return pid;\n}\n\n// UNUSED PCB \ud55c\uce78\uc744 \ucee4\ub110\uc5d0\uc11c \uc2e4\ud589\ud560 \uc900\ube44\ub85c \uc14b\uc5c5\nstatic struct proc*\nallocproc(void)\n{\n  struct proc *p;\n\n  // USUSED \uc2ac\ub86f \ucc3e\uae30\n  for(p = proc; p &lt; &amp;proc[NPROC]; p++) {\n    acquire(&amp;p-&gt;lock);\n    if(p-&gt;state == UNUSED) {\n      goto found;\n    } else {\n      release(&amp;p-&gt;lock);\n    }\n  }\n  return 0;\n\nfound:\n  // \uc2ac\ub86f\ud655\ubcf4\n  p-&gt;pid = allocpid();\n  p-&gt;state = USED;\n\n  // trapframe \ud560\ub2f9\n  if((p-&gt;trapframe = (struct trapframe *)kalloc()) == 0){\n    freeproc(p);\n    release(&amp;p-&gt;lock);\n    return 0;\n  }\n\n  // \uc720\uc800 PT \ub9c8\ub828\n  p-&gt;pagetable = proc_pagetable(p);\n  if(p-&gt;pagetable == 0){\n    freeproc(p);\n    release(&amp;p-&gt;lock);\n    return 0;\n  }\n\n  // \ucee4\ub110 \ucee8\ud14d\uc2a4\ud2b8 \ucd08\uae30\ud654\n  memset(&amp;p-&gt;context, 0, sizeof(p-&gt;context));\n  p-&gt;context.ra = (uint64)forkret;\n  p-&gt;context.sp = p-&gt;kstack + PGSIZE;\n\n  return p;               // \uc544\uc9c1 p-&gt;lock\uc740 \uc720\uc9c0\ub41c \uc0c1\ud0dc\n}\n\n// free\nstatic void\nfreeproc(struct proc *p)\n{\n  if(p-&gt;trapframe)\n    kfree((void*)p-&gt;trapframe);   // \ub354\uc774\uc0c1 U/S \uc804\ud658 \uc548\ud558\ubbc0\ub85c 4KB \ubb3c\ub9ac\ud398\uc774\uc9c0 \ud68c\uc218\n  p-&gt;trapframe = 0;\n  if(p-&gt;pagetable)\n    proc_freepagetable(p-&gt;pagetable, p-&gt;sz);\n  p-&gt;pagetable = 0;\n  p-&gt;sz = 0;\n  p-&gt;pid = 0;\n  p-&gt;parent = 0;\n  p-&gt;name[0] = 0;\n  p-&gt;chan = 0;\n  p-&gt;killed = 0;\n  p-&gt;xstate = 0;\n  p-&gt;state = UNUSED;\n}\n\n// PCB\uc6a9 \uc0ac\uc6a9\uc790 PT \uc0dd\uc131\npagetable_t\nproc_pagetable(struct proc *p)\n{\n  pagetable_t pagetable;\n\n  pagetable = uvmcreate();      // \ub8e8\ud2b8 PT \ud655\ubcf4.\n  if(pagetable == 0)\n    return 0;\n\n  // trampoline(0xFFFF_FFFF_FFFF_F000) \ub9e4\ud551\n  if(mappages(pagetable, TRAMPOLINE, PGSIZE,\n              (uint64)trampoline, PTE_R | PTE_X) &lt; 0){\n    uvmfree(pagetable, 0);\n    return 0;\n  }\n\n  // trapframe(trampoline \uc544\ub798 1\ud398\uc774\uc9c0) \ub9e4\ud551\n  if(mappages(pagetable, TRAPFRAME, PGSIZE,\n              (uint64)(p-&gt;trapframe), PTE_R | PTE_W) &lt; 0){\n    uvmunmap(pagetable, TRAMPOLINE, 1, 0);\n    uvmfree(pagetable, 0);\n    return 0;\n  }\n\n  return pagetable;\n}\n\n// PT\uc640 \ubb3c\ub9ac\uba54\ubaa8\ub9ac free\nvoid\nproc_freepagetable(pagetable_t pagetable, uint64 sz)\n{\n  uvmunmap(pagetable, TRAMPOLINE, 1, 0);\n  uvmunmap(pagetable, TRAPFRAME, 1, 0);\n  uvmfree(pagetable, sz);\n}\n\n// \uae38\uc774 53\ubc14\uc774\ud2b8 RISC-V \uae30\uacc4\uc5b4. \ucd5c\ucd08 \uc0ac\uc6a9\uc790 \ubc14\uc774\ud2b8\ucf54\ub4dc.\n// user/initcode.S\ub97c \ud1b5\ud574 \ucee4\ub110\uc5d0 \ud3ec\ud568\ub41c\ub2e4\n// exec(\"/init\") \uc2dc\uc2a4\ud15c\ucf5c.\nuchar initcode[] = {\n  0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,\n  0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,\n  0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,\n  0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,\n  0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,\n  0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00\n};\n\n// PID 1 \ub9cc\ub4e4\uae30\nvoid\nuserinit(void)\n{\n  struct proc *p;\n\n  p = allocproc();\n  initproc = p;\n\n  // \ubb3c\ub9ac \ud398\uc774\uc9c0 \ud560\ub2f9\ud558\uace0 va 0 \uacfc \ub9e4\ud551\ud558\ub294 PT \ub9cc\ub4e4\uace0 initcode \ub123\uc5b4\uc8fc\uae30\n  uvmfirst(p-&gt;pagetable, initcode, sizeof(initcode));\n  p-&gt;sz = PGSIZE;\n\n  // \uccab U\ubaa8\ub4dc \uc9c4\uc785 \uc138\ud305\n  p-&gt;trapframe-&gt;epc = 0;      // user program counter\n  p-&gt;trapframe-&gt;sp = PGSIZE;  // user stack pointer\n\n  // \uc774\ub984, \ub514\ub809\ud130\ub9ac, state \uc124\uc815\n  safestrcpy(p-&gt;name, \"initcode\", sizeof(p-&gt;name));\n  p-&gt;cwd = namei(\"/\");\n  p-&gt;state = RUNNABLE;\n\n  release(&amp;p-&gt;lock);                // \uc774\uc81c \ub77d \ud480\uae30\n}\n\n// \uc720\uc800 \uba54\ubaa8\ub9ac \ud799 \uc99d\uac00/\uac10\uc18c\nint\ngrowproc(int n)\n{\n  uint64 sz;\n  struct proc *p = myproc();\n\n  sz = p-&gt;sz;\n  if(n &gt; 0){\n    if((sz = uvmalloc(p-&gt;pagetable, sz, sz + n, PTE_W)) == 0) {\n      return -1;\n    }\n  } else if(n &lt; 0){\n    sz = uvmdealloc(p-&gt;pagetable, sz, sz + n);\n  }\n  p-&gt;sz = sz;\n  return 0;\n}\n\n// Create a new process, copying the parent.\n// Sets up child kernel stack to return as if from fork() system call.\nint\nfork(void)\n{\n  int i, pid;\n  struct proc *np;\n  struct proc *p = myproc();\n\n  // Allocate process.\n  if((np = allocproc()) == 0){\n    return -1;\n  }\n\n  // Copy user memory from parent to child.\n  if(uvmcopy(p-&gt;pagetable, np-&gt;pagetable, p-&gt;sz) &lt; 0){\n    freeproc(np);\n    release(&amp;np-&gt;lock);\n    return -1;\n  }\n  np-&gt;sz = p-&gt;sz;\n\n  // copy saved user registers.\n  *(np-&gt;trapframe) = *(p-&gt;trapframe);\n\n  // Cause fork to return 0 in the child.\n  np-&gt;trapframe-&gt;a0 = 0;\n\n  // increment reference counts on open file descriptors.\n  for(i = 0; i &lt; NOFILE; i++)\n    if(p-&gt;ofile[i])\n      np-&gt;ofile[i] = filedup(p-&gt;ofile[i]);\n  np-&gt;cwd = idup(p-&gt;cwd);\n\n  safestrcpy(np-&gt;name, p-&gt;name, sizeof(p-&gt;name));\n\n  pid = np-&gt;pid;\n\n  release(&amp;np-&gt;lock);\n\n  acquire(&amp;wait_lock);\n  np-&gt;parent = p;\n  release(&amp;wait_lock);\n\n  acquire(&amp;np-&gt;lock);\n  np-&gt;state = RUNNABLE;\n  release(&amp;np-&gt;lock);\n\n  return pid;\n}\n\n// Pass p's abandoned children to init.\n// Caller must hold wait_lock.\nvoid\nreparent(struct proc *p)\n{\n  struct proc *pp;\n\n  for(pp = proc; pp &lt; &amp;proc[NPROC]; pp++){\n    if(pp-&gt;parent == p){\n      pp-&gt;parent = initproc;\n      wakeup(initproc);\n    }\n  }\n}\n\n// Exit the current process.  Does not return.\n// An exited process remains in the zombie state\n// until its parent calls wait().\nvoid\nexit(int status)\n{\n  struct proc *p = myproc();\n\n  if(p == initproc)\n    panic(\"init exiting\");\n\n  // Close all open files.\n  for(int fd = 0; fd &lt; NOFILE; fd++){\n    if(p-&gt;ofile[fd]){\n      struct file *f = p-&gt;ofile[fd];\n      fileclose(f);\n      p-&gt;ofile[fd] = 0;\n    }\n  }\n\n  begin_op();\n  iput(p-&gt;cwd);\n  end_op();\n  p-&gt;cwd = 0;\n\n  acquire(&amp;wait_lock);\n\n  // Give any children to init.\n  reparent(p);\n\n  // Parent might be sleeping in wait().\n  wakeup(p-&gt;parent);\n\n  acquire(&amp;p-&gt;lock);\n\n  p-&gt;xstate = status;\n  p-&gt;state = ZOMBIE;\n\n  release(&amp;wait_lock);\n\n  // Jump into the scheduler, never to return.\n  sched();\n  panic(\"zombie exit\");\n}\n\n// Wait for a child process to exit and return its pid.\n// Return -1 if this process has no children.\nint\nwait(uint64 addr)\n{\n  struct proc *pp;\n  int havekids, pid;\n  struct proc *p = myproc();\n\n  acquire(&amp;wait_lock);\n\n  for(;;){\n    // Scan through table looking for exited children.\n    havekids = 0;\n    for(pp = proc; pp &lt; &amp;proc[NPROC]; pp++){\n      if(pp-&gt;parent == p){\n        // make sure the child isn't still in exit() or swtch().\n        acquire(&amp;pp-&gt;lock);\n\n        havekids = 1;\n        if(pp-&gt;state == ZOMBIE){\n          // Found one.\n          pid = pp-&gt;pid;\n          if(addr != 0 &amp;&amp; copyout(p-&gt;pagetable, addr, (char *)&amp;pp-&gt;xstate,\n                                  sizeof(pp-&gt;xstate)) &lt; 0) {\n            release(&amp;pp-&gt;lock);\n            release(&amp;wait_lock);\n            return -1;\n          }\n          freeproc(pp);\n          release(&amp;pp-&gt;lock);\n          release(&amp;wait_lock);\n          return pid;\n        }\n        release(&amp;pp-&gt;lock);\n      }\n    }\n\n    // No point waiting if we don't have any children.\n    if(!havekids || killed(p)){\n      release(&amp;wait_lock);\n      return -1;\n    }\n\n    // Wait for a child to exit.\n    sleep(p, &amp;wait_lock);  //DOC: wait-sleep\n  }\n}\n\n// Per-CPU process scheduler.\n// Each CPU calls scheduler() after setting itself up.\n// Scheduler never returns.  It loops, doing:\n//  - choose a process to run.\n//  - swtch to start running that process.\n//  - eventually that process transfers control\n//    via swtch back to the scheduler.\nvoid\nscheduler(void)\n{\n  struct proc *p;\n  struct cpu *c = mycpu();\n\n  c-&gt;proc = 0;\n  for(;;){\n    // The most recent process to run may have had interrupts\n    // turned off; enable them to avoid a deadlock if all\n    // processes are waiting.\n    intr_on();\n\n    int found = 0;\n    for(p = proc; p &lt; &amp;proc[NPROC]; p++) {\n      acquire(&amp;p-&gt;lock);\n      if(p-&gt;state == RUNNABLE) {\n        // Switch to chosen process.  It is the process's job\n        // to release its lock and then reacquire it\n        // before jumping back to us.\n        p-&gt;state = RUNNING;\n        c-&gt;proc = p;\n        swtch(&amp;c-&gt;context, &amp;p-&gt;context);\n\n        // Process is done running for now.\n        // It should have changed its p-&gt;state before coming back.\n        c-&gt;proc = 0;\n        found = 1;\n      }\n      release(&amp;p-&gt;lock);\n    }\n    if(found == 0) {\n      // nothing to run; stop running on this core until an interrupt.\n      intr_on();\n      asm volatile(\"wfi\");\n    }\n  }\n}\n\n// Switch to scheduler.  Must hold only p-&gt;lock\n// and have changed proc-&gt;state. Saves and restores\n// intena because intena is a property of this\n// kernel thread, not this CPU. It should\n// be proc-&gt;intena and proc-&gt;noff, but that would\n// break in the few places where a lock is held but\n// there's no process.\nvoid\nsched(void)\n{\n  int intena;\n  struct proc *p = myproc();\n\n  if(!holding(&amp;p-&gt;lock))\n    panic(\"sched p-&gt;lock\");\n  if(mycpu()-&gt;noff != 1)\n    panic(\"sched locks\");\n  if(p-&gt;state == RUNNING)\n    panic(\"sched running\");\n  if(intr_get())\n    panic(\"sched interruptible\");\n\n  intena = mycpu()-&gt;intena;\n  swtch(&amp;p-&gt;context, &amp;mycpu()-&gt;context);\n  mycpu()-&gt;intena = intena;\n}\n\n// Give up the CPU for one scheduling round.\nvoid\nyield(void)\n{\n  struct proc *p = myproc();\n  acquire(&amp;p-&gt;lock);\n  p-&gt;state = RUNNABLE;\n  sched();\n  release(&amp;p-&gt;lock);\n}\n\n// A fork child's very first scheduling by scheduler()\n// will swtch to forkret.\nvoid\nforkret(void)\n{\n  static int first = 1;\n\n  // Still holding p-&gt;lock from scheduler.\n  release(&amp;myproc()-&gt;lock);\n\n  if (first) {\n    // File system initialization must be run in the context of a\n    // regular process (e.g., because it calls sleep), and thus cannot\n    // be run from main().\n    fsinit(ROOTDEV);\n\n    first = 0;\n    // ensure other cores see first=0.\n    __sync_synchronize();\n  }\n\n  usertrapret();\n}\n\n// Atomically release lock and sleep on chan.\n// Reacquires lock when awakened.\nvoid\nsleep(void *chan, struct spinlock *lk)\n{\n  struct proc *p = myproc();\n\n  // Must acquire p-&gt;lock in order to\n  // change p-&gt;state and then call sched.\n  // Once we hold p-&gt;lock, we can be\n  // guaranteed that we won't miss any wakeup\n  // (wakeup locks p-&gt;lock),\n  // so it's okay to release lk.\n\n  acquire(&amp;p-&gt;lock);  //DOC: sleeplock1\n  release(lk);\n\n  // Go to sleep.\n  p-&gt;chan = chan;\n  p-&gt;state = SLEEPING;\n\n  sched();\n\n  // Tidy up.\n  p-&gt;chan = 0;\n\n  // Reacquire original lock.\n  release(&amp;p-&gt;lock);\n  acquire(lk);\n}\n\n// Wake up all processes sleeping on chan.\n// Must be called without any p-&gt;lock.\nvoid\nwakeup(void *chan)\n{\n  struct proc *p;\n\n  for(p = proc; p &lt; &amp;proc[NPROC]; p++) {\n    if(p != myproc()){\n      acquire(&amp;p-&gt;lock);\n      if(p-&gt;state == SLEEPING &amp;&amp; p-&gt;chan == chan) {\n        p-&gt;state = RUNNABLE;\n      }\n      release(&amp;p-&gt;lock);\n    }\n  }\n}\n\n// Kill the process with the given pid.\n// The victim won't exit until it tries to return\n// to user space (see usertrap() in trap.c).\nint\nkill(int pid)\n{\n  struct proc *p;\n\n  for(p = proc; p &lt; &amp;proc[NPROC]; p++){\n    acquire(&amp;p-&gt;lock);\n    if(p-&gt;pid == pid){\n      p-&gt;killed = 1;\n      if(p-&gt;state == SLEEPING){\n        // Wake process from sleep().\n        p-&gt;state = RUNNABLE;\n      }\n      release(&amp;p-&gt;lock);\n      return 0;\n    }\n    release(&amp;p-&gt;lock);\n  }\n  return -1;\n}\n\nvoid\nsetkilled(struct proc *p)\n{\n  acquire(&amp;p-&gt;lock);\n  p-&gt;killed = 1;\n  release(&amp;p-&gt;lock);\n}\n\nint\nkilled(struct proc *p)\n{\n  int k;\n\n  acquire(&amp;p-&gt;lock);\n  k = p-&gt;killed;\n  release(&amp;p-&gt;lock);\n  return k;\n}\n\n// Copy to either a user address, or kernel address,\n// depending on usr_dst.\n// Returns 0 on success, -1 on error.\nint\neither_copyout(int user_dst, uint64 dst, void *src, uint64 len)\n{\n  struct proc *p = myproc();\n  if(user_dst){\n    return copyout(p-&gt;pagetable, dst, src, len);\n  } else {\n    memmove((char *)dst, src, len);\n    return 0;\n  }\n}\n\n// Copy from either a user address, or kernel address,\n// depending on usr_src.\n// Returns 0 on success, -1 on error.\nint\neither_copyin(void *dst, int user_src, uint64 src, uint64 len)\n{\n  struct proc *p = myproc();\n  if(user_src){\n    return copyin(p-&gt;pagetable, dst, src, len);\n  } else {\n    memmove(dst, (char*)src, len);\n    return 0;\n  }\n}\n\n// Print a process listing to console.  For debugging.\n// Runs when user types ^P on console.\n// No lock to avoid wedging a stuck machine further.\nvoid\nprocdump(void)\n{\n  static char *states[] = {\n  [UNUSED]    \"unused\",\n  [USED]      \"used\",\n  [SLEEPING]  \"sleep \",\n  [RUNNABLE]  \"runble\",\n  [RUNNING]   \"run   \",\n  [ZOMBIE]    \"zombie\"\n  };\n  struct proc *p;\n  char *state;\n\n  printf(\"\\n\");\n  for(p = proc; p &lt; &amp;proc[NPROC]; p++){\n    if(p-&gt;state == UNUSED)\n      continue;\n    if(p-&gt;state &gt;= 0 &amp;&amp; p-&gt;state &lt; NELEM(states) &amp;&amp; states[p-&gt;state])\n      state = states[p-&gt;state];\n    else\n      state = \"???\";\n    printf(\"%d %s %s\", p-&gt;pid, state, p-&gt;name);\n    printf(\"\\n\");\n  }\n}\n</code></pre>"},{"location":"6-uart/","title":"uart","text":""},{"location":"6-uart/#xv6-riscv-uartc","title":"xv6-riscv\uc758 uart.c \ud30c\uc77c\uc744 \uc77d\uc5b4\ubcf4\uc790","text":""},{"location":"6-uart/#uart","title":"\ubaa9\ud45c: uart \uc774\ud574","text":"<p>\uc791\uc131\uc790: kkongnyang2 \uc791\uc131\uc77c: 2025-06-26</p>"},{"location":"6-uart/#0","title":"0&gt; \uac1c\ub150 \uc815\ub9ac","text":"<p>uart\ub294 cpu, \uba54\ubaa8\ub9ac \ucabd\uc758 \ubcd1\ub82c \ub370\uc774\ud130\ub97c \ub450 \uac00\ub2e5(TX\ubcf4\ub0b4\uae30\uc640 RX\ubc1b\uae30)\uc758 \uc9c1\ub82c \uc2e0\ud638\ub85c \ubc14\uafd4 \uc8fc\ub294 \ucee8\ubc84\ud130\ub2e4. \uc6d0\ub798 \uce69 \ub0b4\ubd80\uc5d0\uc11c\ub294 64\uac1c\uc758 \uc120\uc73c\ub85c \ud074\ub7ed\ub9c8\ub2e4 64\ube44\ud2b8\ub97c \ubcf4\ub0b8\ub2e4. \ud558\uc9c0\ub9cc \uc678\ubd80\uc5d0\uc11c\ub294 \ud074\ub7ed\uc744 \ub3d9\uae30\ud654\ud560 \uc218 \uc5c6\uae30\uc5d0 \ube44\ub3d9\uae30 \uc9c1\ub82c\ub85c \uc804\uc1a1\ud558\uace0, 8\ube44\ud2b8(1\ubc14\uc774\ud2b8)\ub9c8\ub2e4 \uccb4\ud06c\ub97c \ud55c\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub7ec\ud55c \uc120\ub4e4\uc744 \ubc84\uc2a4\ub77c\uace0 \ubd80\ub974\ub294\ub370, \uc774\ubbf8 cpu\uc5d0\uc11c\ub294 \ud558\ub4dc\uc6e8\uc5b4 \uc81c\uc791 \ub2e8\uacc4\uc5d0\uc11c \uc774\ub7ec\ud55c uart mmio\uc758 \uc874\uc7ac\ub97c \uc54c\uace0 \uc788\uae30\uc5d0 \uc8fc\uc18c 0x10000000\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4.</p> <p>CPU \ud30c\uc774\ud504\ub77c\uc778 (5~10 stage \uc608)          \uba54\ubaa8\ub9ac\u00b7I/O \u250c\u2500 IF \u2500\u252c\u2500 ID \u2500\u252c\u2500 EX/AGU \u2500\u252c\u2500 MEM  \u2500\u252c\u2500 WB \u2500\u2510 | \uba85\ub839  | \ud574\uc11d  | \uc8fc\uc18c\uacc4\uc0b0   |\uce90\uc2dc/TLB | \uacb0\uacfc  | \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u25b2                \u2502 \uac00\uc0c1\uc8fc\uc18c(VA)           \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510           \u2502 TLB HIT \u2502 1~2 cycle           \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518                \u2502 \ubb3c\ub9ac\uc8fc\uc18c(PA)                \u25bc          L1 D-Cache HIT? 1~4 cycle                \u2502         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502     MISS     \u2502 (10~20 cyc L2, 30~50 cyc L3, 100~200 cyc DRAM\u2026)         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>\ubc84\uc2a4? \ub204\uac00 \uc5b8\uc81c DRAM\uc5d0 \ub9d0\uc744 \uac78 \uc218 \uc788\ub294\uc9c0 \uaddc\uc815\ud558\ub294 \uad50\ud1b5\ub85c \uaddc\uce59\uc774\ub2e4. CPU \ub9d0\uace0\ub3c4 \ub514\uc2a4\ud06c\ub098 I/O \ucee8\ud2b8\ub864\ub7ec\uac00 \ubc84\uc2a4 \ub9c8\uc2a4\ud130\uac00 \ub418\uc5b4 \uc9c1\uc811 \uba54\ubaa8\ub9ac\ub97c \uc77d\uace0 \uc4f0\ub294 \uba54\ucee4\ub2c8\uc998\uc774\ub2e4. CPU\ub294 \ubaa9\uc801\uc9c0, \uae38\uc774, \uc635\uc158\uc744 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc368\uc11c \ubbf8\uc158\uc744 \uc8fc\uace0, \uc778\ud130\ub7fd\ud2b8\uac00 \uc62c\ub54c\uae4c\uc9c0 \ub2e4\ub978\uc77c\uc744 \ud558\uba70 \uae30\ub2e4\ub9b0\ub2e4. \ub9c8\uc2a4\ud130\ub294 \"\ub098 DRAM 0x12340000 4KB \uc77d\uc744\ub798\" \ub77c\uace0 \uc678\uce58\ub294 \ucabd,(\uacfc\uac70\uc5d0\ub294 CPU \ud55c\uba85\uc774\uc5c8\uc9c0\ub9cc \ud604\ub300\uc5d0\ub294 DMA,GPU,NIC \ub4f1 \ub2e4\uc218), \uc2ac\ub808\uc774\ube0c\ub294 \uc8fc\uc18c\uac00 \uc790\uae30\uc0ac\uc774\uc988 \ubc94\uc704\uc5d0 \ub4e4\uc5b4\uc624\uba74 \"\uc5ec\uae34 DRAM\uc774\uc57c\" \"\uc5ec\uae34 UART\uc57c\" \uc751\ub2f5\ud558\ub294 \uce21\uc774\ub2e4. \ub9cc\uc57d \ub3d9\uc2dc\uc5d0 \ub450 \ub9c8\uc2a4\ud130\uac00 \ubc84\uc2a4\ub97c \uc694\uad6c\ud558\uba74 \uc6b0\uc120\uc21c\uc704\ub85c \ucc28\ub840\ub97c \uc9c0\uc815\ud55c\ub2e4.</p> <p>\uce35                      \ubb3c\ub9ac \ud3ed               \ud55c\ubc88\uc5d0 \ub2e4\ub8e8\ub294 \ub17c\ub9ac \ub2e8\uc704 CPU &lt;-&gt; L1/L2/L3        64~512bit           \uce90\ub9ac\ub77c\uc778 64B\ub97c \ubc84\uc2a4\ud2b8\ub85c \uc5ec\ub7ec \ud074\ub7ed CPU &lt;-&gt; DDRS DRAM       64bit+ECC           64bitburst16 = 128B \uba54\ubaa8\ub9ac \ubc84\uc2a4\ud2b8 PCle 44                4lane*1bit(\ubcf5\ud638\uc2dc128)    126B TLP \ud398\uc774\ub85c\ub4dc, 256B MPS \ucd94\ucc9c UART                    1bit(TX), 1bit(RX)      8bit payload+1start+1stop</p> <pre><code> \u250c\u2500 Start(0) \u2502  bit0 \u2026 bit7 \u2502 Stop(1) \u2500\u2510\n</code></pre> <p>TX\u2500\u2500\u2500\u2524\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\u2192 \uc2dc\uac04</p> <pre><code>  \u250c\u2500\u2500\u2500\u2500\u2500 \ubb3c\ub9ac\uce35(\uc120) \u2500\u2500\u2500\u2500\u2500\u2510\n</code></pre> <p>ADDR[31:0]  DATA[63:0]  CLK  RESET \u2026          \u2190 parallel AXI \uc608\uc2dc TX   RX  GND  REFCLK                       \u2190 serial PCIe \uc608\uc2dc       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u25b2               \u25bc       \u250c\u2500\u2500\u2500 \ud504\ub85c\ud1a0\ucf5c\uce35 \u2500\u2500\u2500\u2510 \u2022 \ubc84\uc2a4 \uc694\uccad/\ud5c8\uac00 (arbitration) \u2022 \uc8fc\uc18c \u2192 \ud0c0\uae43 \uc7a5\uce58 \uc778\uc2dd (decoding) \u2022 \uc77d\uae30 vs \uc4f0\uae30 \uad6c\ubd84 (control) \u2022 \ub370\uc774\ud130 \ud06c\uae30\u00b7\uc815\ub82c\u00b7burst \uaddc\uce59 \u2026       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>"},{"location":"6-uart/#1","title":"1&gt; \uc6a9\uc5b4 \uc815\ub9ac","text":"<p>baud rate                       // \ucd08\ub2f9 \uc804\uc1a1 \ube44\ud2b8 \uc218. xv6\uc740 38.4kbis/s\uc774\ub2e4 THR/RHR(transmit/receive holding register)  // cpu\uc5d0 \uc624\uac00\ub294 \ubc14\uc774\ud2b8\ub97c \ub2f4\ub294 8bit \ub808\uc9c0\uc2a4\ud130 LSR(line status register)       // TX_IDLE, RX_READY \uac19\uc740 \ud50c\ub798\uadf8\ub85c \ud558\ub4dc\uc6e8\uc5b4 \uc0c1\ud0dc \ubcf4\uace0 IER/ISR(interrupt enable/status)  // \uc5b4\ub5a4 \uc774\ubca4\ud2b8\ub85c \uc778\ud130\ub7fd\ud2b8\uac00 \uc654\uace0 \ubb58 \ud65c\uc131\ud654\ud587\ub294\uc9c0 \uc800\uc7a5 LCR(line control)               // \ub370\uc774\ud130 \uae38\uc774, stop\ube44\ud2b8, parity, baud-latch \ubaa8\ub4dc \uc804\ud658 \ub4f1\uc744 \uc9c0\uc815 FIFO                            // \ucd94\uac00\ub41c 16B \ud558\ub4dc\uc6e8\uc5b4 \ubc84\ud37c. FCR_FIFO_ENABLE\ub85c \ud0a4\uace0 FCR_FIFO_CLEAR\ub85c \ucd08\uae30 Uart interrupt                  // PLIC\uc774 IRQ 10\ubc88\uc73c\ub85c cpu\uc5d0 \uc804\ub2ec top/bottom half                 // \uc778\ud130\ub7fd\ud2b8 \uc9c4\uc785 \uc9c1\ud6c4 \ucc98\ub9ac(top)\uacfc \ubc84\ud37c \ube44\uc6b0\uae30 \uae68\uc6b0\uae30 \ub4f1 \ud6c4\ucc98\ub9ac(bottom) console subsystem               // \uc2e4\uc81c \ud558\ub4dc\uc6e8\uc5b4\ub294 uart.c, \ub77c\uc778 \ucc98\ub9ac\ub294 console.c</p>"},{"location":"6-uart/#2","title":"2&gt; \ud750\ub984 \uc815\ub9ac","text":"<pre><code>+-------------+        +-------------+         +----------------+\n| user space  | sys_write \u2192 consolewrite() \u2192   | circular TX buf|\n|  printf()   |        |  (console.c) |         | uart_tx_buf[]  |\n+-------------+        +-------------+         +----------------+\n                                     \u2502 (1)enqueue &amp; uartstart()\n                                     \u25bc\n                                uartputc()\n                                     \u2502            \u250c\u2500\u2510 HW raises\n                                     \u2502 (top-half) \u2502 \u2502 IRQ\n                                     \u25bc            \u25bc \u25bc\n                               uartstart()\u2500\u2500\u25b6[THR empty?]\u2500\u2500\u25b6 PLIC \u2500\u25ba devintr()\n                                     \u25b2                            \u2502\n                                     \u2502                            \u25bc\n (2) sleep(&amp;uart_tx_r) &lt;\u2500\u2500 buffer full?                    uartintr()\n                                     \u25b2                            \u2502\n    wakeup(&amp;uart_tx_r) \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         while(uartgetc()!=-1) consoleintr()\n</code></pre>"},{"location":"6-uart/#3-uartc","title":"3&gt; uart.c","text":"<pre><code>//\n// low-level driver routines for 16550a UART.\n//\n\n#include \"types.h\"\n#include \"param.h\"\n#include \"memlayout.h\"\n#include \"riscv.h\"\n#include \"spinlock.h\"\n#include \"proc.h\"\n#include \"defs.h\"\n\n// the UART control registers are memory-mapped\n// at address UART0. this macro returns the\n// address of one of the registers.\n#define Reg(reg) ((volatile unsigned char *)(UART0 + (reg)))\n\n// the UART control registers.\n// some have different meanings for\n// read vs write.\n// see http://byterunner.com/16550.html\n#define RHR 0                 // receive holding register (for input bytes)\n#define THR 0                 // transmit holding register (for output bytes)\n#define IER 1                 // interrupt enable register\n#define IER_RX_ENABLE (1&lt;&lt;0)\n#define IER_TX_ENABLE (1&lt;&lt;1)\n#define FCR 2                 // FIFO control register\n#define FCR_FIFO_ENABLE (1&lt;&lt;0)\n#define FCR_FIFO_CLEAR (3&lt;&lt;1) // clear the content of the two FIFOs\n#define ISR 2                 // interrupt status register\n#define LCR 3                 // line control register\n#define LCR_EIGHT_BITS (3&lt;&lt;0)\n#define LCR_BAUD_LATCH (1&lt;&lt;7) // special mode to set baud rate\n#define LSR 5                 // line status register\n#define LSR_RX_READY (1&lt;&lt;0)   // input is waiting to be read from RHR\n#define LSR_TX_IDLE (1&lt;&lt;5)    // THR can accept another character to send\n\n#define ReadReg(reg) (*(Reg(reg)))\n#define WriteReg(reg, v) (*(Reg(reg)) = (v))\n\n// the transmit output buffer.\nstruct spinlock uart_tx_lock;\n#define UART_TX_BUF_SIZE 32\nchar uart_tx_buf[UART_TX_BUF_SIZE];\nuint64 uart_tx_w; // write next to uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE]\nuint64 uart_tx_r; // read next from uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE]\n\nextern volatile int panicked; // from printf.c\n\nvoid uartstart();\n\nvoid\nuartinit(void)\n{\n  // disable interrupts.\n  WriteReg(IER, 0x00);\n\n  // special mode to set baud rate.\n  WriteReg(LCR, LCR_BAUD_LATCH);\n\n  // LSB for baud rate of 38.4K.\n  WriteReg(0, 0x03);\n\n  // MSB for baud rate of 38.4K.\n  WriteReg(1, 0x00);\n\n  // leave set-baud mode,\n  // and set word length to 8 bits, no parity.\n  WriteReg(LCR, LCR_EIGHT_BITS);\n\n  // reset and enable FIFOs.\n  WriteReg(FCR, FCR_FIFO_ENABLE | FCR_FIFO_CLEAR);\n\n  // enable transmit and receive interrupts.\n  WriteReg(IER, IER_TX_ENABLE | IER_RX_ENABLE);\n\n  initlock(&amp;uart_tx_lock, \"uart\");\n}\n\n// add a character to the output buffer and tell the\n// UART to start sending if it isn't already.\n// blocks if the output buffer is full.\n// because it may block, it can't be called\n// from interrupts; it's only suitable for use\n// by write().\nvoid\nuartputc(int c)\n{\n  acquire(&amp;uart_tx_lock);\n\n  if(panicked){\n    for(;;)\n      ;\n  }\n  while(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){\n    // buffer is full.\n    // wait for uartstart() to open up space in the buffer.\n    sleep(&amp;uart_tx_r, &amp;uart_tx_lock);\n  }\n  uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE] = c;\n  uart_tx_w += 1;\n  uartstart();\n  release(&amp;uart_tx_lock);\n}\n\n\n// alternate version of uartputc() that doesn't \n// use interrupts, for use by kernel printf() and\n// to echo characters. it spins waiting for the uart's\n// output register to be empty.\nvoid\nuartputc_sync(int c)\n{\n  push_off();\n\n  if(panicked){\n    for(;;)\n      ;\n  }\n\n  // wait for Transmit Holding Empty to be set in LSR.\n  while((ReadReg(LSR) &amp; LSR_TX_IDLE) == 0)\n    ;\n  WriteReg(THR, c);\n\n  pop_off();\n}\n\n// if the UART is idle, and a character is waiting\n// in the transmit buffer, send it.\n// caller must hold uart_tx_lock.\n// called from both the top- and bottom-half.\nvoid\nuartstart()\n{\n  while(1){\n    if(uart_tx_w == uart_tx_r){\n      // transmit buffer is empty.\n      ReadReg(ISR);\n      return;\n    }\n\n    if((ReadReg(LSR) &amp; LSR_TX_IDLE) == 0){\n      // the UART transmit holding register is full,\n      // so we cannot give it another byte.\n      // it will interrupt when it's ready for a new byte.\n      return;\n    }\n\n    int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];\n    uart_tx_r += 1;\n\n    // maybe uartputc() is waiting for space in the buffer.\n    wakeup(&amp;uart_tx_r);\n\n    WriteReg(THR, c);\n  }\n}\n\n// read one input character from the UART.\n// return -1 if none is waiting.\nint\nuartgetc(void)\n{\n  if(ReadReg(LSR) &amp; 0x01){\n    // input data is ready.\n    return ReadReg(RHR);\n  } else {\n    return -1;\n  }\n}\n\n// handle a uart interrupt, raised because input has\n// arrived, or the uart is ready for more output, or\n// both. called from devintr().\nvoid\nuartintr(void)\n{\n  // read and process incoming characters.\n  while(1){\n    int c = uartgetc();\n    if(c == -1)\n      break;\n    consoleintr(c);\n  }\n\n  // send buffered characters.\n  acquire(&amp;uart_tx_lock);\n  uartstart();\n  release(&amp;uart_tx_lock);\n}\n</code></pre>"},{"location":"7-mkfs/","title":"mkfs","text":""},{"location":"7-mkfs/#xv6-riscv-mkfs","title":"xv6-riscv\uc758 mkfs \ud3f4\ub354\uc744 \uc77d\uc5b4\ubcf4\uc790","text":""},{"location":"7-mkfs/#_1","title":"\ubaa9\ud45c: \ub514\uc2a4\ud06c \uc774\ubbf8\uc9c0 \uc774\ud574","text":"<p>\uc791\uc131\uc790: kkongnyang2 \uc791\uc131\uc77c: 2025-06-26</p>"},{"location":"7-mkfs/#0","title":"0&gt; \uac1c\ub150 \uc815\ub9ac","text":"<p>mkfs\ub780 make filesystem\uc758 \uc57d\uc790\uc774\ub2e4. \ud30c\uc77c \uc2dc\uc2a4\ud15c\uc740 \uc138 \uac00\uc9c0 \uc694\uc18c\ub97c \uc9c0\ub2cc\ub2e4. \ucd94\uc0c1\ud654, \ubb34\uacb0\uc131, \ubcf4\ud638. \ucd94\uc0c1\ud654\ub780 \ub514\uc2a4\ud06c\ucc98\ub7fc \ube14\ub85d \ub2e8\uc704(4KB)\ub85c\ub9cc \uc77d\uace0 \uc4f0\ub294 \uc7a5\uce58\ub97c \ub17c\ub9ac\uc801\uc73c\ub85c /home/kkong/note.txt \uac19\uc740 \uacf5\uac04\uc73c\ub85c \ubc14\uafd4\uc900\ub2e4. \ubb34\uacb0\uc131\uc774\ub780 \ub2e4\uc591\ud55c \uc5d0\ub7ec\uc5d0 \ub300\ud574 \uae30\ubc95\uc744 \uc0ac\uc6a9\ud574 \ubcf4\ud638\ud55c\ub2e4. bitmap+\ube14\ub85d \uadf8\ub8f9, \uc800\ub110\ub9c1, copy-on-write, log-structured \ub4f1\uc758 \uae30\ubc95\uc774 \ub300\uc911\uc801\uc774\ub2e4. \ubcf4\ud638\ub780 \ud37c\ubbf8\uc158, \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \uc5ec\ub7ec \ud504\ub85c\uc138\uc2a4\uac00 \uc548\uc804\ud558\uac8c \uc0ac\uc6a9\ud55c\ub2e4.</p> <p>\ub9cc\ub4e0 \ub514\uc2a4\ud06c \uc774\ubbf8\uc9c0 \uad6c\uc870\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc0dd\uacbc\ub2e4. (\ud30c\uc77c\uc2dc\uc2a4\ud15c\uc774 \ub514\uc2a4\ud06c \uc804\uccb4\ub97c \uc5b4\ub5bb\uac8c \uad6c\ud68d\ud588\ub290\ub0d0).</p> <p>\ub514\uc2a4\ud06c(\ud30c\ud2f0\uc158) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Boot   \u2502 Super-   \u2502 Inode     \u2502 Block   \u2502 Data    \u2502 \u2502 block  \u2502 block    \u2502  table    \u2502 bitmap  \u2502 blocks  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>"},{"location":"7-mkfs/#1","title":"1&gt; \uc6a9\uc5b4 \uc815\ub9ac","text":"<p>struct inode                // \ud37c\ubbf8\uc158, uid/gid, size, time, \ube14\ub85d \ud3ec\uc778\ud130 \ub4f1\uc758 \ud544\ub4dc\uac00 \uc788\ub2e4. \ucc38\uace0\ub85c \ub8e8\ud2b8\ub294 \uace0\uc815 inode \ubc88\ud638 2\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4.</p>"},{"location":"7-mkfs/#2","title":"2&gt; \ud750\ub984 \uc815\ub9ac","text":"<p>\ube4c\ub4dc \uc2dc\uc810\uc5d0 \uace0\uc815\ub418\ub294 mkfs \ub514\uc2a4\ud06c \uad6c\uc870 \ub9cc\ub4e4\uae30\uc640 \ub7f0\ud0c0\uc784\uc5d0 \ud30c\uc77c\uc744 \uc77d\uace0 \uc4f0\uae30 \uc704\ud55c \ub85c\uc9c1\uc778 fs.c\ub294 \ub2e4\ub974\ub2e4.</p> <p>fs.c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc21c\uc11c\ub85c \ud638\ucd9c\ub41c\ub2e4</p> <pre><code>user read()      \u2500\u25b6 \u2460 glibc  (\ubc84\ud37c\u00b7errno \uad00\ub9ac)\n                \u2500\u25b6 \u2461 sys_read()           \u2190 VFS \uc9c4\uc785 (fd \u2192 struct file*)\n                \u2500\u25b6 \u2462 \ud30c\uc77c\uc2dc\uc2a4\ud15c \ub4dc\ub77c\uc774\ubc84   (ext4_read_iter, xv6 readi \ub4f1)\n                \u2500\u25b6 \u2463 \ud398\uc774\uc9c0 \uce90\uc2dc          (struct page / buffer_head \uc5f0\uacb0)\n          \u250c\u2500\u2500\u2500\u2500\u25b6 \u2464 \uce90\uc2dc\uc5d0 \u2018HIT\u2019 \u2192 \ubc14\ub85c \ubcf5\uc0ac \ud6c4 \ub9ac\ud134\n          \u2502\n\uce90\uc2dc miss \u2518\n                \u2500\u25b6 \u2465 \ube14\ub85d I/O \uacc4\uce35 (bio \u25b8 blk-mq \u25b8 scheduler)\n                \u2500\u25b6 \u2466 \ub514\ubc14\uc774\uc2a4 \ub4dc\ub77c\uc774\ubc84 (NVMe, SATA, virtio\u2026)\n                \u2500\u25b6 \u2467 \ucee8\ud2b8\ub864\ub7ec DMA   (PCIe/NVMe queue)\n                \u2500\u25b6 \u2468 \uc800\uc7a5 \uc7a5\uce58      (SSD/NAND/NVCache)\n</code></pre>"},{"location":"8-mini-os/","title":"mini-os","text":""},{"location":"8-mini-os/#mini-os","title":"mini-os\ub97c \uc644\uc131\ud558\uc790","text":""},{"location":"8-mini-os/#os","title":"\ubaa9\ud45c: os\uc758 \uc774\ud574","text":"<p>\uc791\uc131\uc790: kkongnyang2 \uc791\uc131\uc77c: 2025-06-30</p>"},{"location":"8-mini-os/#0","title":"0&gt; \ud504\ub85c\uc81d\ud2b8","text":"<p>\ubaa8\ub4e0 \ud504\ub85c\uc81d\ud2b8\ub294 \uc18c\uc2a4\ud30c\uc77c -&gt; \uaddc\uce59 -&gt; \ucef4\ud30c\uc77c \ubc0f \ube4c\ub4dc -&gt; \uc124\uce58 -&gt; \ub7f0 \uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c4\ub2e4.</p> <p>\uadf8\ub9ac\uace0 \uc774 \ud504\ub85c\uc81d\ud2b8\uc758 \uc18c\uc7ac\ub294 mini-os \uc774\ub2e4. qemu\ub85c \uac00\uc0c1 \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc0dd\uc131\ud558\uace0 (\uadf8 \ub0b4\ubd80\uc5d0\uc11c \ubc8c\uc5b4\uc9c0\ub294 \uc2e4\uc81c \uc77c\uc740 \ub098\uc911\uc5d0 \uacf5\ubd80\ud558\uace0 \uc124\uce58\ub9cc) \uadf8 \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc6b4\uc6a9\ud558\uae30 \uc704\ud55c \ucee4\ub110 \uc774\ubbf8\uc9c0\uc640, \ub514\uc2a4\ud06c \uc774\ubbf8\uc9c0\uc640, \uc0ac\uc6a9\uc790 \uacf5\uac04\uc744 \ub9cc\ub4dc\ub294 \uac83\uc744 \ubaa9\uc801\uc73c\ub85c \ud55c\ub2e4.</p> <p>\uc774\ub97c \uc704\ud55c \uacfc\uc815\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. MMU\uc640 TRAP, PCB, MMIO \ud568\uc218\ub4e4\uacfc, mkfs \ud568\uc218 \ub4f1\uc758 \uc18c\uc2a4 \ud30c\uc77c\uc744 \ub9cc\ub4e0\ub2e4.\uadf8\ub9ac\uace0 GNU make\ub85c \ube4c\ub4dc\ud560 \uc218 \uc788\ub3c4\ub85d makefile\ub85c \uaddc\uce59\uc744 \uc791\uc131\ud55c\ub2e4. \ud06c\ub85c\uc2a4 \ud234\uccb4\uc778(riscv64-unknown-elf)\uc73c\ub85c \ucef4\ud30c\uc77c\ud558\uace0 linker.ld \ub9c1\ucee4 \ud30c\uc77c\ub85c \ube4c\ub4dc\ud558\uc5ec \ucee4\ub110 \uc774\ubbf8\uc9c0\ub97c \ub9cc\ub4e4\ub3c4\ub85d \ud55c\ub2e4. \uadf8\ub9ac\uace0 \ud638\uc2a4\ud2b8 \ud234\uccb4\uc778\uc73c\ub85c \ub514\uc2a4\ud06c \uc774\ubbf8\uc9c0\ub97c \ub9cc\ub4e0\ub2e4. \ud574\ub2f9 \uc774\ubbf8\uc9c0\ub4e4\uc744 \ube4c\ub4dc \uc0b0\ucd9c\ubb3c\ub85c \ub0b4\ub193\uace0 \ud648\uc5d0 \uc124\uce58\ud574 qemu\ub85c \ub7f0\ud558\ub3c4\ub85d \ud55c\ub2e4.</p>"},{"location":"8-mini-os/#_1","title":"&gt;","text":"<pre><code>            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n</code></pre> <p>\uc0ac\uc6a9\uc790 \ubaa8\ub4dc    \u2502 Syscall   \u2502 \u2190 trap/exception/interrupt\ub85c \uc9c4\uc785                 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518                      \u25bc  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Boot &amp; Init (start.S, main.c \u2026) \u2500\u2500\u2500\u2500\u2500\u2510  \u2502                                              \u2502  \u2502 \u250c\u2500\u2500 Process \uad00\ub9ac &amp; Scheduler (proc.c) \u2500\u2500\u2500\u2500\u2510  \u2502  \u2502 \u2502  \u2022 PCB/TCB      \u2022 context-switch         \u2502 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502                                              \u2502  \u2502 \u250c\u2500\u2500 Memory \uad00\ub9ac (vm.c) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502 \u2502  \u2022 MMU/Pagetable  \u2022 \ubb3c\ub9ac \ud398\uc774\uc9c0 \ud560\ub2f9\uae30     \u2502 \u2502  \u2502 \u2502  \u2022 Copy-on-write  \u2022 Page cache            \u2502 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502                                              \u2502  \u2502 \u250c\u2500\u2500 Trap/Interrupt/Timer (trap.c, plic.c) \u2500\u2510 \u2502  \u2502 \u2502  \u2022 Syscall \ub514\uc2a4\ud328\uce58  \u2022 \uc678\ubd80 IRQ           \u2502 \u2502  \u2502 \u2502  \u2022 \uc2dc\uacc4 \ud2f1 \uac31\uc2e0      \u2022 \uc18c\ud504\ud2b8IRQ          \u2502 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502                                              \u2502  \u2502 \u250c\u2500\u2500 VFS &amp; Filesystem (fs.c, log.c) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502  \u2502 \u2502  \u2022 inode \uce90\uc2dc   \u2022 \ub514\ub809\ud130\ub9ac \ud0d0\uc0c9          \u2502 \u2502  \u2502 \u2502  \u2022 log-based FS \u2022 \ubc84\ud37c \uce90\uc2dc              \u2502 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502                                              \u2502  \u2502 \u250c\u2500\u2500 Device I/O &amp; Drivers (uart.c, virtio.c)\u2510 \u2502  \u2502 \u2502  \u2022 \ucf58\uc194/TTY   \u2022 \ube14\ub85d \ub514\ubc14\uc774\uc2a4           \u2502 \u2502  \u2502 \u2502  \u2022 (\ub124\ud2b8\uc6cc\ud06c \uc2a4\ud0dd\uc740 xv6\uc5d4 \uc5c6\uc74c)         \u2502 \u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502  \u2502                                              \u2502  \u2502 \u250c\u2500\u2500 \ub3d9\uae30\ud654 &amp; IPC (spinlock.c, sleeplock.c) \u2510\u2502  \u2502 \u2502  \u2022 spin/sleep lock \u2022 pipe, futex \ub958      \u2502\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502  \u2502                                              \u2502  \u2502 \u250c\u2500\u2500 \uc2dc\uac04\u00b7\uc54c\ub78c\u00b7\uc804\uc6d0 (clock.c, pm.c*) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502  \u2502 \u2502  \u2022 timekeeping  \u2022 RTC                    \u2502\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>"},{"location":"8-mini-os/#1-xv6-riscv","title":"1&gt; \uae30\uc874 xv6-riscv \uacf5\ubd80","text":"<p>step 1. qemu-riscv64 \uc124\uce58 <pre><code>~$ sudo apt install ninja-build         # qemu\ub294 \uae30\ubcf8 \ub0b4\uc7a5 gnu make\uac00 \uc544\ub2c8\ub77c ninja\ub77c\ub294 builder \uc0ac\uc6a9\n~$ ninja --version\n1.10.1\n~$ git clone https://gitlab.com/qemu-project/qemu.git\n~$ cd qemu\n~$ ./configure --target-list=riscv64-softmmu\n~$ ninja -C build -j$(nproc)\n~$ ninja -C build install\n</code></pre></p> <p>step 2. \ubca0\uc5b4\uba54\ud0c8\uc6a9 \ud06c\ub85c\uc2a4 \ud234\uccb4\uc778 \uc124\uce58 <pre><code>~$ sudo apt install gcc-riscv64-unknown-elf\n~$ riscv64-unknown-elf-gcc --version\nriscv64-unknown-elf-gcc () 10.2.0\n</code></pre></p> <p>step 3. xv6-riscv \uc2e4\ud589 <pre><code>~$ git clone https://gitlab.com/xv6-riscv.git\n~$ cd xv6-riscv\n~$ make\n~$ make qemu\n\ub05d\ub0b4\uace0 \uc2f6\uc73c\uba74 ctrl+A+X\n</code></pre></p>"},{"location":"8-mini-os/#2","title":"2&gt; \ud544\uc694 \ud30c\uc77c \ud655\uc778","text":"<pre><code>                          |\n</code></pre> <p>`</p>"},{"location":"8-mini-os/#arm64","title":"&gt; arm64 \ud2b9\uc131","text":"<ol> <li>\ubc14\uc774\ud2b8 \uc21c\uc11c: little endian\uc0ac\uc6a9. 0x12345678\uc740 \uba54\ubaa8\ub9ac\uc5d0 78 56 34 12 \uc21c\uc11c\ub85c \uc800\uc7a5.</li> <li>\uba54\ubaa8\ub9ac \uc815\ub82c: 4\ubc14\uc774\ud2b8 \ub2e8\uc704\uc758 word alignment\uac00 \uae30\ubcf8. 0x40080001\uac19\uc740\uac74 \uc815\ub82c\ub418\uc9c0 \uc54a\uc740 \uc8fc\uc18c.</li> <li>\ub808\uc9c0\uc2a4\ud130: x0 ~ x30\uc740 \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130, sp\ub294 \uc2a4\ud0dd \ud3ec\uc778\ud130, pc\ub294 \ud504\ub85c\uadf8\ub7a8 \uce74\uc6b4\ud130, VBAR_EL1\uc740 \uc778\ud130\ub7fd\ud2b8 \ubca1\ud130 \ubca0\uc774\uc2a4, TTBR_EL1\uc740 \ud398\uc774\uc9c0 \ud14c\uc774\ube14 \ubca0\uc774\uc2a4, SCTLR_EL1\uc740 \uc2dc\uc2a4\ud15c \uc81c\uc5b4 \ub808\uc9c0\uc2a4\ud130(MMU,\uce90\uc2dc \ucf1c\uae30)</li> <li>\ud568\uc218 \ud638\ucd9c \uaddc\uc57d: \ub9ac\ud134\uac12\uc740 x0, \ud30c\ub77c\uba54\ud130 x0~x7. \uc2a4\ud0dd\uc740 16\ubc14\uc774\ud2b8 \uc815\ub82c(align 16)</li> </ol>"},{"location":"8-mini-os/#_2","title":"&gt; \ub514\ubc84\uae45","text":"<p>\ub2e4\ub978 \ud130\ubbf8\ub110\uc5d0\uc11c gdb-multiarch ~/make-os/kernel.elf (gdb) target remote localhost:1234  #\uc5f0\uacb0 (gdb) continue                      #\ucf54\ub4dc \uc2e4\ud589 (gdb) quit                          #\uadf8\ub9cc\ub450\uba74 \uba48\ucd98 \uc8fc\uc18c \ub098\ud0c0\ub0a8 (gdb) info registers                #\ub808\uc9c0\uc2a4\ud130 \uc815\ubcf4 (gdb) disassemble                   #\uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc \ubcf4\uae30 (gdb) x/i $pc                       #\ud604\uc7ac \uc704\uce58(pc)</p>"},{"location":"9-build/","title":"build","text":""},{"location":"9-build/#_1","title":"\ud504\ub85c\uc81d\ud2b8 \ube4c\ub4dc \uacfc\uc815\uc744 \uc54c\uc544\ubcf4\uc790","text":""},{"location":"9-build/#_2","title":"\ubaa9\ud45c: \ud504\ub85c\uc81d\ud2b8\uc758 \uc774\ud574","text":"<p>\uc791\uc131\uc790: kkongnyang2 \uc791\uc131\uc77c: 2025-06-30</p>"},{"location":"9-build/#0","title":"0&gt; \uae30\ubcf8","text":"<p>\uc18c\uc2a4\ud30c\uc77c \uac00\uc838\uc624\ub294\uac74   git clone https://gitlab.com/qemu-project/qemu.git</p> <p>(\uc0ac\ub78c)             (Generator)                 (Builder) \uc18c\uc2a4 + \uc635\uc158 \u2500\u2500\u25b6  [Autotools / CMake / Meson] \u2500\u2500\u25b6  [Make or Ninja]                               \u2502                      \u2502                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502                     \u2502  Makefile / Ninja  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2502  (\ube4c\ub4dc \uaddc\uce59 \ud30c\uc77c)  \u2502                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p> <p>generator: \ube4c\ub4dc \uaddc\uce59 \uc0dd\uc131 builder: \ube4c\ub4dc \uc0b0\ucd9c\ubb3c \ub9ac\ud134 install: prefix \uacbd\ub85c\uc5d0 \uc548\ucc29</p> <p>Cmake\ub294 \uc694\uc998 \ubc94\uc6a9\uc131 \ub192\uc544 \ub9ce\uc774 \uc4f0\uc784. make\ub3c4 ninja\ub3c4 \uc0ac\uc6a9 \uac00\ub2a5.</p>"},{"location":"9-build/#1-riscv-gnu-toolchain","title":"1&gt; riscv-gnu-toolchain","text":"<p>riscv-gnu-toolchain\uc758 \uc870\ud569 Generator  : Autotools(./configure\ub85c makefile\ud30c\uc77c \uc790\ub3d9\uc0dd\uc131) Builder    : GNU Make</p> <p>riscv-gnu-toolchain/ \u251c\u2500\u2500 configure            \u2190 \uc790\ub3d9 \uc0dd\uc131\ub41c \uc178 \uc2a4\ud06c\ub9bd\ud2b8(Autoconf) \u2500\u2500\u25b6 Generator \u251c\u2500\u2500 configure.ac         \u2190 configure\ub97c \u201c\ucc0d\uc5b4\ub0b4\ub294\u201d \uc18c\uc2a4 \u251c\u2500\u2500 Makefile.in          \u2190 configure\uac00 \ubcc0\uc218 \uce58\ud658\ud574 \ucd5c\uc885 Makefile \uc0dd\uc131 \u251c\u2500\u2500 scripts/             \u2190 build \uc21c\uc11c\u00b7\ud328\uce58 \uc801\uc6a9\uc6a9 \uc178 \uc2a4\ud06c\ub9bd\ud2b8 \ubaa8\uc74c \u251c\u2500\u2500 build              (\u2190 \ube4c\ub4dc \uc2dc \uc790\ub3d9 \uc0dd\uc131) \u2502   \u251c\u2500\u2500 .../Makefile     \u2190 Builder(\uba54\uc774\ud06c)\uac00 \uc2e4\uc81c \ud574\uc11d \u2502   \u2514\u2500\u2500 .../.o / *.a / gcc / ld ... \u2502 \u251c\u2500\u2500 gcc/                 (submodule)  \u2510 \u251c\u2500\u2500 binutils/            (submodule)  \u2502\u2014 \uac01 \ucef4\ud3ec\ub10c\ud2b8\ub3c4 *\uc790\uccb4 Autotools** \uad6c\uc870 \u251c\u2500\u2500 gdb/                 (submodule)  \u2502 \u251c\u2500\u2500 newlib/              (submodule)  \u2518 \u2514\u2500\u2500 linux/               (\uc635\uc158 glibc \ube4c\ub4dc\uc6a9 \ucee4\ub110 \ud5e4\ub354)</p>"},{"location":"9-build/#1-generator","title":"1) Generator \ub2e8\uacc4","text":"<p>./configure --prefix=$HOME/opt/riscv --enable-multilib      \u21b3 configure  \u2192  \ucd5c\uc0c1\uc704 + \uac01 \uc11c\ube0c\ub514\ub809\ud130\ub9ac Makefile \uc0dd\uc131</p>"},{"location":"9-build/#2-builder","title":"2) Builder \ub2e8\uacc4","text":"<p>make -j$(nproc)          # \uba54\uc778 Makefile\uc774 scripts/build-*.sh \ud638\ucd9c      \u21b3 \uac01 script \ub0b4\ubd80   \u2192  binutils, gcc, newlib \u2026 \ub97c \ucc28\ub840\ub85c make</p>"},{"location":"9-build/#3-install","title":"3) Install \ub2e8\uacc4","text":"<p>make install             # \uacb0\uacfc\ubb3c\uc744 $HOME/opt/riscv/{bin,lib,include,\u2026}\ub85c \ubcf5\uc0ac</p>"},{"location":"9-build/#2-qemu","title":"2&gt; qemu","text":"<p>qemu\uc758 \uc870\ud569 Generator   : Meson Builder     : Ninja \ucd5c\uc0c1\uc704 ./configure \uc2a4\ud06c\ub9bd\ud2b8\ub294 Autotools\uac00 \uc544\ub2c8\ub77c \u201cMeson \uc124\uc815 \ub798\ud37c\u201d\uc785\ub2c8\ub2e4.</p> <p>qemu/ \u251c\u2500\u2500 configure               \u2190 \uc178 \ub798\ud37c: \uc635\uc158 \ud30c\uc2f1 \ud6c4 meson \ud638\ucd9c \u251c\u2500\u2500 meson.build             \u2190 \ub8e8\ud2b8 Meson \uaddc\uce59 \u251c\u2500\u2500 meson_options.txt       \u2190 --enable-xxx \uc2a4\uc704\uce58 \uc815\uc758 \u251c\u2500\u2500 block/meson.build       \u2190 \uc11c\ube0c\ub514\ub809\ud130\ub9ac\ubcc4 \uaddc\uce59 (C \uc18c\uc2a4\u00b7libqemu-block...) \u251c\u2500\u2500 hw/{arm,riscv,x86}/...  \u2190 \uac01 \uac00\uc0c1 HW, \uc5ed\uc2dc meson.build \ud3ec\ud568 \u251c\u2500\u2500 scripts/meson-buildoptions.sh  \u2190 ./configure\uac00 Meson \uc635\uc158\uc73c\ub85c \ub9e4\ud551 \u2514\u2500\u2500 build/            (meson setup \ud6c4 \uc0dd\uc131)     \u251c\u2500\u2500 build.ninja          \u2190 Ninja \uaddc\uce59 \ud30c\uc77c     \u251c\u2500\u2500 config-host.h        \u2190 \ud638\uc2a4\ud2b8 \uae30\ub2a5 \ub9e4\ud06c\ub85c (#define)     \u251c\u2500\u2500 Makefile             \u2190 \ub2e8\uc21c \u201call: ninja -C .\u201d \ub798\ud37c     \u2514\u2500\u2500 meson-logs/\u2026</p>"},{"location":"9-build/#1-generator_1","title":"1) Generator","text":"<p>./configure --target-list=riscv64-softmmu --prefix=$HOME/opt/qemu     \u21b3 \uc6d0\ub798 \uc0ac\uc6a9\ud558\ub294 meson setup build/ \ub294 \uc790\ub3d9\uc73c\ub85c \ub418\uc5b4 build.ninja \uc0dd\uc131</p>"},{"location":"9-build/#2-builder_1","title":"2) Builder","text":"<p>ninja -C build -j$(nproc)                        # .o \u2192 libqemu* \u2192 qemu-system-riscv64</p>"},{"location":"9-build/#3-install_1","title":"3) Install","text":"<p>ninja -C build install               # \ub514\ud3f4\ud2b8\ub294 \uc2e4\ud589\ud30c\uc77c /usr/local/bin \uc5d0 \ubcf5\uc0ac. \uc544\uae4c prefix \uc124\uc815\ud588\uc73c\uba74 $HOME/opt/qemu/{bin,lib,share,\u2026}\ub85c \ubcf5\uc0ac\ub428</p>"},{"location":"9-build/#3-xv6-riscv","title":"3&gt; xv6-riscv","text":"<p>xv6-riscv\uc758 \uc870\ud569 Generator  : \uc5c6\uc74c.(generator\uac00 \uc544\ubb34\uac83\ub3c4 \uc5c6\uae30\uc5d0 \uc190\uc218 makefile\ud30c\uc77c \uc791\uc131) Builder    : GNU Make</p> <p>xv6-riscv/ \u251c\u2500\u2500 Makefile          \u2190 \ucd5c\uc0c1\uc704 \ube4c\ub4dc \uaddc\uce59 \u2015 \ud575\uc2ec \u251c\u2500\u2500 kernel/           \u2190 \ucee4\ub110 \uc18c\uc2a4 (.c, .S) \u251c\u2500\u2500 user/             \u2190 \uc720\uc800 \ud504\ub85c\uadf8\ub7a8 \uc18c\uc2a4 \u2502   \u2514\u2500\u2500 user.ld       \u2190 \uc0ac\uc6a9\uc790 \uc2e4\ud589\ud30c\uc77c\uc6a9 \ub9c1\ud06c\uc2a4\ud06c\ub9bd\ud2b8 \u251c\u2500\u2500 kernel/entry.S \u251c\u2500\u2500 mkfs.c            \u2190 \ud638\uc2a4\ud2b8 \ud234: \ud30c\uc77c\uc2dc\uc2a4\ud15c \uc774\ubbf8\uc9c0 \uc0dd\uc131 \u251c\u2500\u2500 *.lds             \u2190 \ucee4\ub110 \ub9c1\ud06c\uc2a4\ud06c\ub9bd\ud2b8 \u2514\u2500\u2500 README, LICENSE \u2026</p>"},{"location":"9-build/#1-generator_2","title":"1) Generator","text":"<p>\uc190\uc218 makefile\ud30c\uc77c \uc791\uc131</p>"},{"location":"9-build/#2-builder_2","title":"2) Builder","text":"<p>make</p>"},{"location":"9-build/#3-install_2","title":"3) Install","text":"<p>\ub530\ub85c \uacbd\ub85c\ub294 \uc548\ud558\uace0 \uc774 \uc18c\uc2a4\ud30c\uc77c\uc548\uc5d0 \ub0c5\ub450\uace0 qemu\uc5d0 \uc62c\ub824\uc11c \ubd80\ud305(make qemu)</p>"},{"location":"9-build/#3","title":"3&gt; \uba85\ub839\uc5b4 \uc758\ubbf8","text":"<p>--prefix=$HOME/opt/qemu \uc124\uce58 \uacb0\uacfc\ubb3c\uc744 \uc2dc\uc2a4\ud15c \ub8e8\ud2b8(/usr)\uac00 \uc544\ub2cc \ub0b4 \ud648 \ud3f4\ub354 \uc544\ub798\uc5d0 \ubcf5\uc0ac\ud574\ub77c. (\uc548\uc4f0\uba74 \ub514\ud3f4\ud2b8\ub294 /usr/local\uc77c\uac70\uc784) root \uad8c\ud55c \uc5c6\uc774, \ub2e4\ub978 qemu \ubc84\uc804\uacfc \ucda9\ub3cc \uc5c6\uc774 \uad00\ub9ac \uac00\ub2a5.</p> <p>echo 'export PATH=$HOME/opt/qemu/bin:$PATH' &gt;&gt; ~/.bashrc source ~/.bashrc \uc178\uc740 \uae30\ubcf8\uc801\uc73c\ub85c /usr/bin, /usr/local/bin \uac19\uc740 \ud45c\uc900 \ub514\ub809\ud1a0\ub9ac\ub9cc \ucc3e\uae30 \ub54c\ubb38\uc5d0, \ud648 \uc548\uc5d0 \uc124\uce58\ud588\uc73c\uba74 \uc774 \ub514\ub809\ud130\ub9ac\ub97c PATH\uc5d0 \ub123\uc5b4\uc57c \ud3b8\ud558\uac8c \ud638\ucd9c\uac00\ub2a5. \uc544\ub2c8\uba74 \ub9e4\ubc88 \uacbd\ub85c \uc785\ub825\ud574 \ud638\ucd9c\ud574\uc57c\ud568.</p> <p>\uc774\uac70 \uc548\ud574\uc904\uac70\uba74 \uadf8\ub0e5 \ub514\ud3f4\ud2b8\ub85c \ud558\ub098\ub9cc \uc4f0\uace0 \ub8e8\ud2b8 \ub514\ub809\ud1a0\ub9ac\ub85c sudo make install \ud574\uc8fc\uba74 \ub428.</p>"},{"location":"9-build/#4","title":"4&gt; \ud06c\ub85c\uc2a4 \ud234\uccb4\uc778 \uc704\uce58","text":"<p>\ud638\uc2a4\ud2b8 \ud234\uccb4\uc778 \uc2e4\ud589\ud30c\uc77c\uc740 usr/bin\uc5d0 \uc788\uc74c. \ud06c\ub85c\uc2a4 \ud234\uccb4\uc778\uc740 usr/riscv64-linux-gnu/bin\uc5d0 \uc800\uc7a5\ub418\uae30\uc5d0 \uad6c\ubd84</p>"},{"location":"9-build/#5","title":"5&gt; \uc0ad\uc81c \ubc29\ubc95","text":"<p>riscv-gnu-toolchain \uc124\uce58 \uc2e4\ud589\ud30c\uc77c \uc81c\uac70 rm -rf usr/riscv-gnu-toolchain path \ub418\ub3cc\ub9ac\uae30 nano ~/.bashrc\uc5d0\uc11c export PATH \ub77c\uc778 \uc0ad\uc81c \ube4c\ub4dc \uc0b0\ucd9c\ubb3c \uc0ad\uc81c make clean \uc18c\uc2a4 \ud2b8\ub9ac \ucd08\uae30\ud654 make distclean \uc18c\uc2a4 \ud3f4\ub354 \uc0ad\uc81c rm -rf ~/riscv-gnu-toolchain</p> <p>qemu \uc124\uce58 \uc2e4\ud589\ud30c\uc77c \uc81c\uac70 rm -rf usr/local/bin/qemu path \ub418\ub3cc\ub9ac\uae30 nano ~/.bashrc\uc5d0\uc11c export PATH \ub77c\uc778 \uc0ad\uc81c \ube4c\ub4dc \uc0b0\ucd9c\ubb3c \uc0ad\uc81c ninja -C build clean \uc18c\uc2a4 \ud2b8\ub9ac \ucd08\uae30\ud654 rm -rf build meson-logs meson-private \uc18c\uc2a4 \ud3f4\ub354 \uc0ad\uc81c rm -rf ~/qemu</p> <p>xv6-riscv \uc124\uce58 \uc2e4\ud589\ud30c\uc77c \uc81c\uac70  # \uc18c\uc2a4 \ud3f4\ub354\uc5d0 \uadf8\ub300\ub85c \uc788\uc74c(\uacf5\uc720 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uae30\ub54c\ubb38) path \ub418\ub3cc\ub9ac\uae30 nano ~/.bashrc\uc5d0\uc11c export PATH \ub77c\uc778 \uc0ad\uc81c \ube4c\ub4dc \uc0b0\ucd9c\ubb3c \uc0ad\uc81c make clean \uc18c\uc2a4 \ud2b8\ub9ac \ucd08\uae30\ud654 make distclean \uc18c\uc2a4 \ud3f4\ub354 \uc0ad\uc81c rm -rf ~/xv6-riscv</p> <pre><code>~$ ps aux | grep qemu           #\uc2e4\ud589\uc911\uc778 \ud504\ub85c\uc138\uc2a4 \ubc88\ud638\n~$ kill \uc22b\uc790                     #\uac15\uc81c\uc885\ub8cc\n</code></pre>"}]}